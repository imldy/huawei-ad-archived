/*!
 * Web Analytics(hwa-js-api-1.1.7_20160506_1,builded by ming t1)
 *
 * JavaScript tracking client,基于piwik开源JS API 并加以改进以适应华为IT需求
 *
 * @link http://piwik.org
 * @source http://dev.piwik.org/trac/browser/trunk/js/piwik.js
 * @license http://www.opensource.org/licenses/bsd-license.php Simplified BSD

 */
var dmpa_js_init_time = (typeof window.performance != 'undefined') ? window.performance.timing.navigationStart : (typeof hwa_pv_start_time != 'undefined' ? hwa_pv_start_time : new Date().getTime());
var asyn_pv_sendtime_dmpa = dmpa_js_init_time;
var dmpa_prototype_options_dmpaid;
var dmpa_prototype_options_gdomain;

function isIE() {
    if (window.navigator.userAgent.indexOf("MSIE") > -1)
        return true;
    else
        return false;
}

function isIE8() {
    if (window.navigator.userAgent.indexOf("MSIE") > -1 && window.navigator.userAgent.indexOf("Trident/4") > -1)
        return true;
    else
        return false;
}

function isFF() {
    if (window.navigator.userAgent.indexOf('Firefox') > -1)
        return true;
    else
        return false;
}

if (isFF()) {
    try {
        if (typeof (HTMLElement) != "undefined" && !window.opera) {
            HTMLElement.prototype.__defineGetter__("innerText", function () {
                    return this.textContent;
                }
            );

            HTMLElement.prototype.__defineSetter__("innerText", function (setValue) {
                this.textContent = setValue;
            });
        }
    } catch (e) {
    }
}

var dmpa_source_this = this;

/** @license MIT License (c) copyright 2011-2013 original author or authors */

/**【added by kelson on 20141204】
 * meld
 * Aspect Oriented Programming for Javascript
 *
 * meld is part of the cujo.js family of libraries (http://cujojs.com/)
 *
 * Licensed under the MIT License at:
 * http://www.opensource.org/licenses/mit-license.php
 *
 * @author Brian Cavalier
 * @author John Hann
 * @version 1.3.1
 */

(function (windowAlias) {


    //
    // Public API
    //

    // Add a single, specific type of advice
    // returns a function that will remove the newly-added advice
    meld.before = adviceApi('before');
    meld.around = adviceApi('around');
    meld.on = adviceApi('on');
    meld.afterReturning = adviceApi('afterReturning');
    meld.afterThrowing = adviceApi('afterThrowing');
    meld.after = adviceApi('after');

    // Access to the current joinpoint in advices
    meld.joinpoint = joinpoint;

    // DEPRECATED: meld.add(). Use meld() instead
    // Returns a function that will remove the newly-added aspect
    meld.add = function () {
        return meld.apply(null, arguments);
    };

    /**
     * Add an aspect to all matching methods of target, or to target itself if
     * target is a function and no pointcut is provided.
     * @param {object|function} target
     * @param {string|array|RegExp|function} [pointcut]
     * @param {object} aspect
     * @param {function?} aspect.before
     * @param {function?} aspect.on
     * @param {function?} aspect.around
     * @param {function?} aspect.afterReturning
     * @param {function?} aspect.afterThrowing
     * @param {function?} aspect.after
     * @returns {{ remove: function }|function} if target is an object, returns a
     *  remover { remove: function } whose remove method will remove the added
     *  aspect. If target is a function, returns the newly advised function.
     */
    function meld(target, pointcut, aspect) {
        var pointcutType, remove;

        if (arguments.length < 3) {
            return addAspectToFunction(target, pointcut);
        } else {
            if (isArray(pointcut)) {
                remove = addAspectToAll(target, pointcut, aspect);
            } else {
                pointcutType = typeof pointcut;

                if (pointcutType === 'string') {
                    if (typeof target[pointcut] === 'function') {
                        remove = addAspectToMethod(target, pointcut, aspect);
                    }

                } else if (pointcutType === 'function') {
                    remove = addAspectToAll(target, pointcut(target), aspect);

                } else {
                    remove = addAspectToMatches(target, pointcut, aspect);
                }
            }

            return remove;
        }

    }

    function Advisor(target, func) {

        var orig, advisor, advised;

        this.target = target;
        this.func = func;
        this.aspects = {};

        orig = this.orig = target[func];
        advisor = this;

        advised = this.advised = function () {
            var context, joinpoint, args, callOrig, afterType;

            // If called as a constructor (i.e. using "new"), create a context
            // of the correct type, so that all advice types (including before!)
            // are called with the correct context.
            if (this instanceof advised) {
                // shamelessly derived from https://github.com/cujojs/wire/blob/c7c55fe50238ecb4afbb35f902058ab6b32beb8f/lib/component.js#L25
                context = objectCreate(orig.prototype);
                callOrig = function (args) {
                    return applyConstructor(orig, context, args);
                };

            } else {
                context = this;
                callOrig = function (args) {
                    return orig.apply(context, args);
                };

            }

            args = slice.call(arguments);
            afterType = 'afterReturning';

            // Save the previous joinpoint and set the current joinpoint
            joinpoint = pushJoinpoint({
                target: context,
                method: func,
                args: args
            });

            try {
                advisor._callSimpleAdvice('before', context, args);

                try {
                    joinpoint.result = advisor._callAroundAdvice(context, func, args, callOrigAndOn);
                } catch (e) {
                    joinpoint.result = joinpoint.exception = e;
                    // Switch to afterThrowing
                    afterType = 'afterThrowing';
                }

                args = [joinpoint.result];

                callAfter(afterType, args);
                callAfter('after', args);

                if (joinpoint.exception) {
                    throw joinpoint.exception;
                }

                return joinpoint.result;

            } finally {
                // Restore the previous joinpoint, if necessary.
                popJoinpoint();
            }

            function callOrigAndOn(args) {
                var result = callOrig(args);
                advisor._callSimpleAdvice('on', context, args);

                return result;
            }

            function callAfter(afterType, args) {
                advisor._callSimpleAdvice(afterType, context, args);
            }
        };

        defineProperty(advised, '_advisor', {value: advisor, configurable: true});
    }

    Advisor.prototype = {

        /**
         * Invoke all advice functions in the supplied context, with the supplied args
         *
         * @param adviceType
         * @param context
         * @param args
         */
        _callSimpleAdvice: function (adviceType, context, args) {

            // before advice runs LIFO, from most-recently added to least-recently added.
            // All other advice is FIFO
            var iterator, advices;

            advices = this.aspects[adviceType];
            if (!advices) {
                return;
            }

            iterator = iterators[adviceType];

            iterator(this.aspects[adviceType], function (aspect) {
                var advice = aspect.advice;
                advice && advice.apply(context, args);
            });
        },

        /**
         * Invoke all around advice and then the original method
         *
         * @param context
         * @param method
         * @param args
         * @param applyOriginal
         */
        _callAroundAdvice: function (context, method, args, applyOriginal) {
            var len, aspects;

            aspects = this.aspects.around;
            len = aspects ? aspects.length : 0;

            /**
             * Call the next function in the around chain, which will either be another around
             * advice, or the orig method.
             * @param i {Number} index of the around advice
             * @param args {Array} arguments with with to call the next around advice
             */
            function callNext(i, args) {
                // If we exhausted all aspects, finally call the original
                // Otherwise, if we found another around, call it
                return i < 0
                    ? applyOriginal(args)
                    : callAround(aspects[i].advice, i, args);
            }

            function callAround(around, i, args) {
                var proceedCalled, joinpoint;

                proceedCalled = 0;

                // Joinpoint is immutable
                // TODO: Use Object.freeze once v8 perf problem is fixed
                joinpoint = pushJoinpoint({
                    target: context,
                    method: method,
                    args: args,
                    proceed: proceedCall,
                    proceedApply: proceedApply,
                    proceedCount: proceedCount
                });

                try {
                    // Call supplied around advice function
                    return around.call(context, joinpoint);
                } finally {
                    popJoinpoint();
                }

                /**
                 * The number of times proceed() has been called
                 * @return {Number}
                 */
                function proceedCount() {
                    return proceedCalled;
                }

                /**
                 * Proceed to the original method/function or the next around
                 * advice using original arguments or new argument list if
                 * arguments.length > 0
                 * @return {*} result of original method/function or next around advice
                 */
                function proceedCall(/* newArg1, newArg2... */) {
                    return proceed(arguments.length > 0 ? slice.call(arguments) : args);
                }

                /**
                 * Proceed to the original method/function or the next around
                 * advice using original arguments or new argument list if
                 * newArgs is supplied
                 * @param [newArgs] {Array} new arguments with which to proceed
                 * @return {*} result of original method/function or next around advice
                 */
                function proceedApply(newArgs) {
                    return proceed(newArgs || args);
                }

                /**
                 * Create proceed function that calls the next around advice, or
                 * the original.  May be called multiple times, for example, in retry
                 * scenarios
                 * @param [args] {Array} optional arguments to use instead of the
                 * original arguments
                 */
                function proceed(args) {
                    proceedCalled++;
                    return callNext(i - 1, args);
                }

            }

            return callNext(len - 1, args);
        },

        /**
         * Adds the supplied aspect to the advised target method
         *
         * @param aspect
         */
        add: function (aspect) {

            var advisor, aspects;

            advisor = this;
            aspects = advisor.aspects;

            insertAspect(aspects, aspect);

            return {
                remove: function () {
                    var remaining = removeAspect(aspects, aspect);

                    // If there are no aspects left, restore the original method
                    if (!remaining) {
                        advisor.remove();
                    }
                }
            };
        },

        /**
         * Removes the Advisor and thus, all aspects from the advised target method, and
         * restores the original target method, copying back all properties that may have
         * been added or updated on the advised function.
         */
        remove: function () {
            delete this.advised._advisor;
            this.target[this.func] = this.orig;
        }
    };

    /**
     * Returns the advisor for the target object-function pair.  A new advisor
     * will be created if one does not already exist.
     * @param target {*} target containing a method with the supplied methodName
     * @param methodName {String} name of method on target for which to get an advisor
     * @return {Object|undefined} existing or newly created advisor for the supplied method
     */
    Advisor.get = function (target, methodName) {
        if (!(methodName in target)) {
            return;
        }

        var advisor, advised;

        advised = target[methodName];

        if (typeof advised !== 'function') {
            throw new Error('Advice can only be applied to functions: ' + methodName);
        }

        advisor = advised._advisor;
        if (!advisor) {
            advisor = new Advisor(target, methodName);
            target[methodName] = advisor.advised;
        }

        return advisor;
    };

    /**
     * Add an aspect to a pure function, returning an advised version of it.
     * NOTE: *only the returned function* is advised.  The original (input) function
     * is not modified in any way.
     * @param func {Function} function to advise
     * @param aspect {Object} aspect to add
     * @return {Function} advised function
     */
    function addAspectToFunction(func, aspect) {
        var name, placeholderTarget;

        name = func.name || '_';

        placeholderTarget = {};
        placeholderTarget[name] = func;

        addAspectToMethod(placeholderTarget, name, aspect);

        return placeholderTarget[name];

    }

    function addAspectToMethod(target, method, aspect) {
        var advisor = Advisor.get(target, method);

        return advisor && advisor.add(aspect);
    }

    function addAspectToAll(target, methodArray, aspect) {
        var removers, added, f, i;

        removers = [];
        i = 0;

        while ((f = methodArray[i++])) {
            added = addAspectToMethod(target, f, aspect);
            added && removers.push(added);
        }

        return createRemover(removers);
    }

    function addAspectToMatches(target, pointcut, aspect) {
        var removers = [];
        // Assume the pointcut is a an object with a .test() method
        for (var p in target) {
            // TODO: Decide whether hasOwnProperty is correct here
            // Only apply to own properties that are functions, and match the pointcut regexp
            if (typeof target[p] == 'function' && pointcut.test(p)) {
                // if(object.hasOwnProperty(p) && typeof object[p] === 'function' && pointcut.test(p)) {
                removers.push(addAspectToMethod(target, p, aspect));
            }
        }

        return createRemover(removers);
    }

    function createRemover(removers) {
        return {
            remove: function () {
                for (var i = removers.length - 1; i >= 0; --i) {
                    removers[i].remove();
                }
            }
        };
    }

    // Create an API function for the specified advice type
    function adviceApi(type) {
        return function (target, method, adviceFunc) {
            var aspect = {};

            if (arguments.length === 2) {
                aspect[type] = method;
                return meld(target, aspect);
            } else {
                aspect[type] = adviceFunc;
                return meld(target, method, aspect);
            }
        };
    }

    /**
     * Insert the supplied aspect into aspectList
     * @param aspectList {Object} list of aspects, categorized by advice type
     * @param aspect {Object} aspect containing one or more supported advice types
     */
    function insertAspect(aspectList, aspect) {
        var adviceType, advice, advices;

        for (adviceType in iterators) {
            advice = aspect[adviceType];

            if (advice) {
                advices = aspectList[adviceType];
                if (!advices) {
                    aspectList[adviceType] = advices = [];
                }

                advices.push({
                    aspect: aspect,
                    advice: advice
                });
            }
        }
    }

    /**
     * Remove the supplied aspect from aspectList
     * @param aspectList {Object} list of aspects, categorized by advice type
     * @param aspect {Object} aspect containing one or more supported advice types
     * @return {Number} Number of *advices* left on the advised function.  If
     *  this returns zero, then it is safe to remove the advisor completely.
     */
    function removeAspect(aspectList, aspect) {
        var adviceType, advices, remaining;

        remaining = 0;

        for (adviceType in iterators) {
            advices = aspectList[adviceType];
            if (advices) {
                remaining += advices.length;

                for (var i = advices.length - 1; i >= 0; --i) {
                    if (advices[i].aspect === aspect) {
                        advices.splice(i, 1);
                        --remaining;
                        break;
                    }
                }
            }
        }

        return remaining;
    }

    function applyConstructor(C, instance, args) {
        try {
            // Try to define a constructor, but don't care if it fails
            defineProperty(instance, 'constructor', {
                value: C,
                enumerable: false
            });
        } catch (e) {
            // ignore
        }

        C.apply(instance, args);

        return instance;
    }

    var currentJoinpoint, joinpointStack,
        ap, prepend, append, iterators, slice, isArray, defineProperty, objectCreate;

    // TOOD: Freeze joinpoints when v8 perf problems are resolved
//  freeze = Object.freeze || function (o) { return o; };

    joinpointStack = [];

    ap = Array.prototype;
    prepend = ap.unshift;
    append = ap.push;
    slice = ap.slice;

    isArray = Array.isArray || function (it) {
        return Object.prototype.toString.call(it) == '[object Array]';
    };

    // Check for a *working* Object.defineProperty, fallback to
    // simple assignment.
    defineProperty = definePropertyWorks()
        ? Object.defineProperty
        : function (obj, prop, descriptor) {
            obj[prop] = descriptor.value;
        };

    objectCreate = Object.create ||
        (function () {
            function F() {
            }

            return function (proto) {
                F.prototype = proto;
                var instance = new F();
                F.prototype = null;
                return instance;
            };
        }());

    iterators = {
        // Before uses reverse iteration
        before: forEachReverse,
        around: false
    };

    // All other advice types use forward iteration
    // Around is a special case that uses recursion rather than
    // iteration.  See Advisor._callAroundAdvice
    iterators.on
        = iterators.afterReturning
        = iterators.afterThrowing
        = iterators.after
        = forEach;

    function forEach(array, func) {
        for (var i = 0, len = array.length; i < len; i++) {
            func(array[i]);
        }
    }

    function forEachReverse(array, func) {
        for (var i = array.length - 1; i >= 0; --i) {
            func(array[i]);
        }
    }

    function joinpoint() {
        return currentJoinpoint;
    }

    function pushJoinpoint(newJoinpoint) {
        joinpointStack.push(currentJoinpoint);
        return currentJoinpoint = newJoinpoint;
    }

    function popJoinpoint() {
        return currentJoinpoint = joinpointStack.pop();
    }

    function definePropertyWorks() {
        try {
            return 'x' in Object.defineProperty({}, 'x', {});
        } catch (e) { /* return falsey */
        }
    }

    windowAlias.hwa_meld = meld;
    //return meld;


})(window);


/*
 * Browser [In]Compatibility
 * - minimum required ECMAScript: ECMA-262, edition 3
 *
 * Incompatible with these (and earlier) versions of:
 * - IE4 - try..catch and for..in introduced in IE5
 * - IE5 - named anonymous functions, array.push, encodeURIComponent, decodeURIComponent, and getElementsByTagName introduced in IE5.5
 * - Firefox 1.0 and Netscape 8.x - FF1.5 adds array.indexOf, among other things
 * - Mozilla 1.7 and Netscape 6.x-7.x
 * - Netscape 4.8
 * - Opera 6 - Error object (and Presto) introduced in Opera 7
 * - Opera 7
 */

/************************************************************
 * JSON - public domain reference implementation by Douglas Crockford
 * @link https://github.com/douglascrockford/JSON-js/blob/master/json2.js
 ************************************************************/
/*
json2.js
2012-10-08

Public Domain.

NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

See http://www.JSON.org/js.html


This code should be minified before deployment.
See http://javascript.crockford.com/jsmin.html

USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
NOT CONTROL.


This file creates a global JSON object containing two methods: stringify
and parse.

JSON.stringify(value, replacer, space)
value any JavaScript value, usually an object or array.

replacer an optional parameter that determines how object
values are stringified for objects. It can be a
function or an array of strings.

space an optional parameter that specifies the indentation
of nested structures. If it is omitted, the text will
be packed without extra whitespace. If it is a number,
it will specify the number of spaces to indent at each
level. If it is a string (such as '\t' or '&nbsp;'),
it contains the characters used to indent at each level.

This method produces a JSON text from a JavaScript value.

When an object value is found, if the object contains a toJSON
method, its toJSON method will be called and the result will be
stringified. A toJSON method does not serialize: it returns the
value represented by the name/value pair that should be serialized,
or undefined if nothing should be serialized. The toJSON method
will be passed the key associated with the value, and this will be
bound to the value

For example, this would serialize Dates as ISO strings.

Date.prototype.toJSON = function (key) {
function f(n) {
// Format integers to have at least two digits.
return n < 10 ? '0' + n : n;
}

return this.getUTCFullYear() + '-' +
f(this.getUTCMonth() + 1) + '-' +
f(this.getUTCDate()) + 'T' +
f(this.getUTCHours()) + ':' +
f(this.getUTCMinutes()) + ':' +
f(this.getUTCSeconds()) + 'Z';
};

You can provide an optional replacer method. It will be passed the
key and value of each member, with this bound to the containing
object. The value that is returned from your method will be
serialized. If your method returns undefined, then the member will
be excluded from the serialization.

If the replacer parameter is an array of strings, then it will be
used to select the members to be serialized. It filters the results
such that only members with keys listed in the replacer array are
stringified.

Values that do not have JSON representations, such as undefined or
functions, will not be serialized. Such values in objects will be
dropped; in arrays they will be replaced with null. You can use
a replacer function to replace those with JSON values.
JSON.stringify(undefined) returns undefined.

The optional space parameter produces a stringification of the
value that is filled with line breaks and indentation to make it
easier to read.

If the space parameter is a non-empty string, then that string will
be used for indentation. If the space parameter is a number, then
the indentation will be that many spaces.

Example:

text = JSON.stringify(['e', {pluribus: 'unum'}]);
// text is '["e",{"pluribus":"unum"}]'


text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
// text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

text = JSON.stringify([new Date()], function (key, value) {
return this[key] instanceof Date ?
'Date(' + this[key] + ')' : value;
});
// text is '["Date(---current time---)"]'


JSON.parse(text, reviver)
This method parses a JSON text to produce an object or array.
It can throw a SyntaxError exception.

The optional reviver parameter is a function that can filter and
transform the results. It receives each of the keys and values,
and its return value is used instead of the original value.
If it returns what it received, then the structure is not modified.
If it returns undefined then the member is deleted.

Example:

// Parse the text. Values that look like ISO date strings will
// be converted to Date objects.

myData = JSON.parse(text, function (key, value) {
var a;
if (typeof value === 'string') {
a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
if (a) {
return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
+a[5], +a[6]));
}
}
return value;
});

myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
var d;
if (typeof value === 'string' &&
value.slice(0, 5) === 'Date(' &&
value.slice(-1) === ')') {
d = new Date(value.slice(5, -1));
if (d) {
return d;
}
}
return value;
});


This is a reference implementation. You are free to copy, modify, or
redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
lastIndex, length, parse, prototype, push, replace, slice, stringify,
test, toJSON, toString, valueOf
*/

// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== 'object') {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;
        };

        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) {
            return this.valueOf();
        };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = { // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"': '\\"',
            '\\': '\\\\'
        },
        rep;

    function quote(string) {

        // If the string contains no control characters, no quote characters, and no
        // backslash characters, then we can safely slap some quotes around it.
        // Otherwise we must also replace the offending characters with safe escape
        // sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }

    function str(key, holder) {

        // Produce a string from holder[key].

        var i, // The loop counter.
            k, // The member key.
            v, // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

        // If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

        // If we were called with a replacer function, then call the replacer to
        // obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

        // What happens next depends on the value's type.

        switch (typeof value) {
            case 'string':
                return quote(value);

            case 'number':

                // JSON numbers must be finite. Encode non-finite numbers as null.

                return isFinite(value) ? String(value) : 'null';

            case 'boolean':
            case 'null':

                // If the value is a boolean or null, convert it to a string. Note:
                // typeof null does not produce 'null'. The case is included here in
                // the remote chance that this gets fixed someday.

                return String(value);

            // If the type is 'object', we might be dealing with an object or an array or
            // null.

            case 'object':

                // Due to a specification blunder in ECMAScript, typeof null is 'object',
                // so watch out for that case.

                if (!value) {
                    return 'null';
                }

                // Make an array to hold the partial results of stringifying this object value.

                gap += indent;
                partial = [];

                // Is the value an array?

                if (Object.prototype.toString.apply(value) === '[object Array]') {

                    // The value is an array. Stringify every element. Use null as a placeholder
                    // for non-JSON values.

                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || 'null';
                    }

                    // Join all of the elements together, separated with commas, and wrap them in
                    // brackets.

                    v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
                    gap = mind;
                    return v;
                }

                // If the replacer is an array, use it to select the members to be stringified.

                if (rep && typeof rep === 'object') {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        if (typeof rep[i] === 'string') {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                } else {

                    // Otherwise, iterate through all of the keys in the object.

                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                }

                // Join all of the member texts together, separated with commas,
                // and wrap them in braces.

                v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
                gap = mind;
                return v;
        }
    }

    // If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

            // The stringify method takes a value and an optional replacer, and an optional
            // space parameter, and returns a JSON text. The replacer can be a function
            // that can replace values, or an array of strings that will select the keys.
            // A default replacer method can be provided. Use of the space parameter can
            // produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

            // If the space parameter is a number, make an indent string containing that
            // many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

                // If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

            // If there is a replacer, it must be a function or an array.
            // Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

            // Make a fake root object containing our value under the key of ''.
            // Return the result of stringifying the value.

            return str('', {
                '': value
            });
        };
    }

    // If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

            // The parse method takes a text and an optional reviver function, and returns
            // a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

                // The walk method is used to recursively walk the resulting structure so
                // that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }

            // Parsing happens in four stages. In the first stage, we replace certain
            // Unicode characters with escape sequences. JavaScript handles many characters
            // incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

            // In the second stage, we run the text against regular expressions that look
            // for non-JSON patterns. We are especially concerned with '()' and 'new'
            // because they can cause invocation, and '': because it can cause mutation.
            // But just to be safe, we want to reject all unexpected forms.

            // We split the second stage into 4 regexp operations in order to work around
            // crippling inefficiencies in IE's and Safari's regexp engines. First we
            // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
            // replace all simple value tokens with ']' characters. Third, we delete all
            // open brackets that follow a colon or comma or that begin the text. Finally,
            // we look to see that the remaining characters are only whitespace or ']' or
            // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                // In the third stage we use the eval function to compile the text into a
                // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
                // in JavaScript: it can begin a block or an object literal. We wrap the text
                // in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

                // In the optional fourth stage, we recursively walk the new structure, passing
                // each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function' ? walk({
                    '': j
                }, '') : j;
            }

            // If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}(window));
/************************************************************
 * end JSON
 ************************************************************/

/*jslint browser:true, plusplus:true, vars:true, nomen:true, evil:true */
/*global window */
/*global unescape */
/*global ActiveXObject */
/*global _haq:true */
/*members encodeURIComponent, decodeURIComponent, getElementsByTagName,
shift, unshift, createElement, appendChild, characterSet, charset,
addEventListener, attachEvent, removeEventListener, detachEvent, disableCookies,
cookie, domain, readyState, documentElement, doScroll, title, text,
location, top, document, referrer, parent, links, href, protocol, GearsFactory,
event, which, button, srcElement, type, target,
parentNode, tagName, hostname, className,
userAgent, cookieEnabled, platform, mimeTypes, enabledPlugin, javaEnabled,
XMLHttpRequest, ActiveXObject, open, setRequestHeader, onreadystatechange, send, readyState, status,
getTime, getTimeAlias, setTime, toGMTString, getHours, getMinutes, getSeconds,
toLowerCase, charAt, indexOf, lastIndexOf, split, slice, toUpperCase, substring,
onload, src, match, name,
round, random,
exec,
res, width, height, devicePixelRatio,
pdf, qt, realp, wma, dir, fla, java, gears, ag,
hook, getHook, getVisitorId, getVisitorInfo, setTrackerUrl, setSiteId,
getAttributionInfo, getAttributionCampaignName, getAttributionCampaignKeyword,
getAttributionReferrerTimestamp, getAttributionReferrerUrl,
setCustomData, getCustomData,
setCustomVariable, getCustomVariable, deleteCustomVariable,
setDownloadExtensions, addDownloadExtensions,
setDomains, setIgnoreClasses, setRequestMethod,
setReferrerUrl, setCustomUrl, setDocumentTitle,
setDownloadClasses, setLinkClasses,
setCampaignNameKey, setCampaignKeywordKey,
discardHashTag,
setCookieNamePrefix, setCookieDomain, setCookiePath, setVisitorIdCookie,
setVisitorCookieTimeout, setSessionCookieTimeout, setReferralCookieTimeout,
setConversionAttributionFirstReferrer,
doNotTrack, setDoNotTrack, msDoNotTrack,
addListener, enableLinkTracking, setLinkTrackingTimer,
setHeartBeatTimer, killFrame, redirectFile, setCountPreRendered,
trackGoal, trackLink, trackPageView, trackSiteSearch,
setEcommerceView, addEcommerceItem, trackEcommerceOrder, trackEcommerceCartUpdate,
addPlugin, getTracker, getAsyncTracker
*/

// asynchronous tracker (or proxy)
var
// HA singleton and namespace
    DMPA5 = DMPA5 || (function () {
        "use strict";

        /************************************************************
         * Private data
         ************************************************************/

        var expireDateTime,

            /* plugins */
            plugins = {},

            /* alias frequently used globals for added minification */
            documentAlias = document,
            navigatorAlias = navigator,
            screenAlias = screen,
            windowAlias = window,

            /* page id */
            pageId = null,

            pageIdBeforeHashChange = null,

            jalorPageForwardFlag = false,

            jalorPageForwardFlag4PV = false,

            urlBeforeHashChange = null,

            urlRefBeforeHashChange = null,


            configiFrameTrackingDisabled = false,
            dis_parent = false,

            documentTileBeforeHashchange = null,

            /* DOM Ready */
            hasLoaded = false,
            registeredOnLoadHandlers = [],

            /* Document unload */
            registeredOnUnloadHandlers = [],

            /* encode */
            encodeWrapper = windowAlias.encodeURIComponent,

            /* decode */
            decodeWrapper = windowAlias.decodeURIComponent,

            /* urldecode */
            urldecode = unescape,

            /* asynchronous tracker */
            asyncTracker,

            /* page performance info */
            perfInfo,

            /* iterator */
            i;

        /************************************************************
         * Private methods
         ************************************************************/

        /*
   * Is property defined?
   */

        function isDefined(property) {
            // workaround https://github.com/douglascrockford/JSLint/commit/24f63ada2f9d7ad65afc90e6d949f631935c2480
            return 'undefined' !== typeof property;
        }

        function hwaLog(message) {
            if (typeof console != 'undefined' && typeof console.log != 'undefined') {
                console.log(message);
            }

        }

        /*
   * Is property a function?
   */

        function isFunction(property) {
            return typeof property === 'function';
        }

        /*
   * Is property an object?
   *
   * @return bool Returns true if property is null, an Object, or subclass of Object (i.e., an instanceof String, Date, etc.)
   */

        function isObject(property) {
            return typeof property === 'object';
        }

        /*
   * Is property a string?
   */

        function isString(property) {
            return typeof property === 'string' || property instanceof String;
        }

        function mixin() {
            var target = arguments[0];
            var len = arguments.length;
            for (var i = 0; i < len; i++) {
                var src = arguments[i];
                if ((typeof src).toLowerCase() != "object") return;
                for (var p in src) {
                    if (typeof src[p] != 'undefined' && src[p] != 'undefined') {
                        target[p] = src[p];
                    }
                }
            }
            return target;
        }

        function preventDefault(e) {
            e.preventDefault && e.preventDefault();
            e.returnValue = false;
        }

        /*
   * apply wrapper
   *
   * @param array parameterArray An array comprising either:
   *      [ 'methodName', optional_parameters ]
   * or:
   *      [ functionObject, optional_parameters ]
   */

        function apply() {
            var i, f, parameterArray;

            for (i = 0; i < arguments.length; i += 1) {
                parameterArray = arguments[i];
                f = parameterArray.shift();

                if (isString(f)) {
                    asyncTracker[f].apply(asyncTracker, parameterArray);
                } else {
                    f.apply(asyncTracker, parameterArray);
                }
            }
        }

        /**
         * 获取 某元素所在父元素的下标
         * @param target 某元素
         * @returns {string}  JQuery的下标语法
         */
        function getEleIndex(target) {
            var parentElement = target.parentElement
            var index = ""
            var tagCountMap = {}
            var targetTagName = target.tagName
            for (var i = 0; i < parentElement.childElementCount; i++) {
                var childEle = parentElement.children[i]
                var childEleTagName = childEle.tagName

                //需要判断是否存在同元素，是否已经出现，并记录次数
                if (tagCountMap[childEleTagName] == undefined) {
                    tagCountMap[childEleTagName] = 0
                } else {
                    if (tagCountMap[childEleTagName] > -1) {
                        tagCountMap[childEleTagName] = tagCountMap[childEleTagName] + 1
                    }
                }
                /**
                 * 子元素是否与目的元素一样
                 * @type {boolean}
                 */
                var isSameEle = childEle.isEqualNode(target)
                    && (childEle.offsetTop == target.offsetTop
                        && childEle.offsetLeft == target.offsetLeft)

                if (isSameEle) {
                    index = ":eq(" + tagCountMap[childEleTagName] + ")";//这是JQuery的写法
                    return index
                }
            }

            return index
        }

        function getSingleSelector(target) {
            var targetId = target["id"]
            var parentElement = target.parentElement
            var singleEle
            //如果有ID的话作为唯一标识，就不需要该元素往上的路径了
            if (targetId) {
                singleEle = "#" + targetId
            } else {
                var isHasMultiChild = parentElement.childElementCount > 1
                var index = ""
                if (isHasMultiChild) {
                    index = getEleIndex(target)
                }
                //因为类匹配元素必须要使用"."隔开,所以需要使用替换
                var classList = "";
                //if (target.classList == "") {
                //  //单个元素的选择器由"元素名 下标 类匹配列表(使用"."分隔)"三部分组成
                //  classList = ("." + target.classList).replace(/\ /g, ".")
                //}

                singleEle = target.tagName.toLocaleLowerCase() + index + classList
            }
            return singleEle
        }

        /**
         * 根据点击的事件，获取获取被点击的元素的选择器（针对JQuery）
         * @param evt 原生的点击事件
         * @returns {string}
         */
        function getEleSelector(srcEle) {
            var path = ""
            var target = srcEle
            while (target.parentElement) {
                var parentElement = target.parentElement
                //body的话就不需要获取选择器了
                //if(target.tagName.toLowerCase() == "body"){
                //  break
                //}else{
                var targetId = target["id"]
                var singleEle = getSingleSelector(target)
                path = singleEle + ">" + path
                //如果有ID的话作为唯一标识，就不需要该元素往上的路径了
                if (targetId) {
                    break
                } else {
                    target = parentElement
                }
                //}
            }
            path = path.substr(0, path.length - 1)
            return path
        }

        /**
         * 根据点击的事件，获取获取被点击的元素的选择器（针对JQuery）
         * @param evt 原生的点击事件
         * @returns {string} 元素的选择器（针对JQuery）
         */
        function getEleSelectorByEvent(evt) {
            var target = evt.target

            return getEleSelector(target)
        }

        /*
   * Cross-browser helper function to add event handler
   */

        function addEventListener(element, eventType, eventHandler, useCapture) {
            if (element.attachEvent) {
                element.attachEvent('on' + eventType, (function (el) {
                    return function () {
                        eventHandler.call(el, window.event);
                    };
                }(element)));
            } else {
                element.addEventListener(eventType, eventHandler, useCapture);
            }
            element = null;
            return true;
        }

        /*
   * Cross-browser helper function to add event handler
   */

        function removeEventListener(element, eventType, eventHandler) {
            if (element.removeEventListener) {
                element.removeEventListener(eventType, eventHandler);
                return true;
            }

            if (element.detachEvent) {
                return element.detachEvent('on' + eventType, eventHandler);
            }

            element['on' + eventType] = null;
        }

        /*
   * Call plugin hook methods
   */

        function executePluginMethod(methodName, callback) {
            var result = '',
                i,
                pluginMethod;

            for (i in plugins) {
                if (Object.prototype.hasOwnProperty.call(plugins, i)) {
                    pluginMethod = plugins[i][methodName];
                    if (isFunction(pluginMethod)) {
                        result += pluginMethod(callback);
                    }
                }
            }

            return result;
        }

        /*
   * Handle beforeunload event
   *
   * Subject to Safari's "Runaway JavaScript Timer" and
   * Chrome V8 extension that terminates JS that exhibits
   * "slow unload", i.e., calling getTime() > 1000 times
   */

        function beforeUnloadHandler() {
            var now;

            executePluginMethod('unload');

            for (i = 0; i < registeredOnUnloadHandlers.length; i++) {
                registeredOnUnloadHandlers[i]();
            }

            /*
     * Delay/pause (blocks UI)
     * update by wuqiang 2017-01-09 新增delay最大值,防止往前调整时间后页面卡死
     */
            if (expireDateTime) {
                // the things we do for backwards compatibility...
                // in ECMA-262 5th ed., we could simply use:
                //     while (Date.now() < expireDateTime) { }
                do {
                    now = new Date();
                } while (now.getTimeAlias() < expireDateTime && expireDateTime - now.getTimeAlias() < 1000);
            }
        }

        /*
   * Handler for onload event
   */

        function loadHandler() {
            if (!hasLoaded) {
                hasLoaded = true;
                executePluginMethod('load');
                for (var i = 0; i < registeredOnLoadHandlers.length; i++) {
                    registeredOnLoadHandlers[i]();
                }
            }
            return true;
        }

        /*
  * 主要针对Jalor5框架的单页面进行处理Hashchange,当hashchange认为是一个新的pageview
  * 注：不支持IE7及以下版本IE浏览器，Jalor5也不支持IE7及以下版本IE浏览器，而且W3的统计数据
  * 显示，当前使用IE7及以下浏览器（不包含IE8+浏览器的兼容模式）只有不到2000人
  */
        function hashchangeHandler() {


        }


        /*
   * Add onload or DOM ready handler
   */

        function addReadyListener() {

            /*
        when used in async mode ,
        domcontentloaded event will never fired,
        just use load event instead
      */


            var _timer;

            if (documentAlias.attachEvent) {
                var readyFunc = function () {
                    if (documentAlias.readyState === 'complete') {
                        documentAlias.detachEvent('onreadystatechange', readyFunc);
                        loadHandler(true);
                    }
                };
                documentAlias.attachEvent('onreadystatechange', readyFunc);
                if (documentAlias.readyState === 'complete') {
                    documentAlias.detachEvent('onreadystatechange', readyFunc);
                    loadHandler(true);
                }
            } else if (documentAlias.addEventListener) {
                addEventListener(documentAlias, 'DOMContentLoaded', function ready() {
                    documentAlias.removeEventListener('DOMContentLoaded', ready, false);
                    loadHandler();
                });
            }
            // sniff for older WebKit versions
            //if ((new RegExp('WebKit')).test(navigatorAlias.userAgent) || (new RegExp('Trident/7')).test(navigatorAlias.userAgent) ) {
            if (typeof documentAlias.readyState != 'undefined') {
                _timer = setInterval(function () {
                    if (hasLoaded || /loaded|complete/.test(documentAlias.readyState)) {
                        clearInterval(_timer);
                        loadHandler();
                    }
                }, 10);
            }
            addEventListener(windowAlias, 'load', loadHandler, false);
            addEventListener(windowAlias, 'hashchange', hashchangeHandler, false);


        }

        /*
   * Load JavaScript file (asynchronously)
   */
        function loadScript(src, onLoad) {
            var script = documentAlias.createElement('script');

            script.type = 'text/javascript';
            script.src = src;

            if (script.readyState) {
                script.onreadystatechange = function () {
                    var state = this.readyState;

                    if (state === 'loaded' || state === 'complete') {
                        script.onreadystatechange = null;
                        onLoad();
                    }
                };
            } else {
                script.onload = onLoad;
            }

            documentAlias.getElementsByTagName('head')[0].appendChild(script);
        }

        /*
   * Get page referrer
   */

        function getReferrer() {
            var referrer = '';
            try {
                referrer = windowAlias.top.document.referrer;
            } catch (e) {
                if (windowAlias.parent) {
                    try {
                        referrer = windowAlias.parent.document.referrer;
                    } catch (e2) {
                        referrer = '';
                    }
                }
            }
            if (referrer === '') {
                referrer = documentAlias.referrer;
            }
            return referrer;
        }

        /*
   * Extract scheme/protocol from URL
   */

        function getProtocolScheme(url) {
            var e = new RegExp('^([a-z]+):'),
                matches = e.exec(url);

            return matches ? matches[1] : null;
        }

        /*
   * Extract hostname from URL
   */

        function getHostName(url) {
            // scheme : // [username [: password] @] hostame [: port] [/ [path] [? query] [# fragment]]
            var e = new RegExp('^(?:(?:https?|ftp):)/*(?:[^@]+@)?([^:/#]+)'),
                matches = e.exec(url);
            return matches ? matches[1] : url;
        }

        /*
   * Extract parameter from URL
   */

        function getParameter(url, name) {
            // scheme : // [username [: password] @] hostame [: port] [/ [path] [? query] [# fragment]]
            var e = new RegExp('^(?:https?|ftp)(?::/*(?:[^?]+)[?])([^#]+)'),
                matches = e.exec(url),
                f = new RegExp('(?:^|&)' + name + '=([^&]*)'),
                result = matches ? f.exec(matches[1]) : 0;
            return result ? decodeWrapper(result[1]) : '';
        }

        /*
   * UTF-8 encoding
   */

        function utf8_encode(argString) {
            return urldecode(encodeWrapper(argString));
        }

        /************************************************************
         * sha1
         * - based on sha1 from http://phpjs.org/functions/sha1:512 (MIT / GPL v2)
         ************************************************************/

        function sha1(str) {
            // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
            // + namespaced by: Michael White (http://getsprink.com)
            // +      input by: Brett Zamir (http://brett-zamir.me)
            // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
            // +   jslinted by: Anthon Pang (http://piwik.org)

            var
                rotate_left = function (n, s) {
                    return (n << s) | (n >>> (32 - s));
                },

                cvt_hex = function (val) {
                    var str = '',
                        i,
                        v;

                    for (i = 7; i >= 0; i--) {
                        v = (val >>> (i * 4)) & 0x0f;
                        str += v.toString(16);
                    }
                    return str;
                },

                blockstart,
                i,
                j,
                W = [],
                H0 = 0x67452301,
                H1 = 0xEFCDAB89,
                H2 = 0x98BADCFE,
                H3 = 0x10325476,
                H4 = 0xC3D2E1F0,
                A,
                B,
                C,
                D,
                E,
                temp,
                str_len,
                word_array = [];

            str = utf8_encode(str);
            str_len = str.length;

            for (i = 0; i < str_len - 3; i += 4) {
                j = str.charCodeAt(i) << 24 | str.charCodeAt(i + 1) << 16 | str.charCodeAt(i + 2) << 8 | str.charCodeAt(i + 3);
                word_array.push(j);
            }

            switch (str_len & 3) {
                case 0:
                    i = 0x080000000;
                    break;
                case 1:
                    i = str.charCodeAt(str_len - 1) << 24 | 0x0800000;
                    break;
                case 2:
                    i = str.charCodeAt(str_len - 2) << 24 | str.charCodeAt(str_len - 1) << 16 | 0x08000;
                    break;
                case 3:
                    i = str.charCodeAt(str_len - 3) << 24 | str.charCodeAt(str_len - 2) << 16 | str.charCodeAt(str_len - 1) << 8 | 0x80;
                    break;
            }

            word_array.push(i);

            while ((word_array.length & 15) !== 14) {
                word_array.push(0);
            }

            word_array.push(str_len >>> 29);
            word_array.push((str_len << 3) & 0x0ffffffff);

            for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {
                for (i = 0; i < 16; i++) {
                    W[i] = word_array[blockstart + i];
                }

                for (i = 16; i <= 79; i++) {
                    W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
                }

                A = H0;
                B = H1;
                C = H2;
                D = H3;
                E = H4;

                for (i = 0; i <= 19; i++) {
                    temp = (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
                    E = D;
                    D = C;
                    C = rotate_left(B, 30);
                    B = A;
                    A = temp;
                }

                for (i = 20; i <= 39; i++) {
                    temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
                    E = D;
                    D = C;
                    C = rotate_left(B, 30);
                    B = A;
                    A = temp;
                }

                for (i = 40; i <= 59; i++) {
                    temp = (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
                    E = D;
                    D = C;
                    C = rotate_left(B, 30);
                    B = A;
                    A = temp;
                }

                for (i = 60; i <= 79; i++) {
                    temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
                    E = D;
                    D = C;
                    C = rotate_left(B, 30);
                    B = A;
                    A = temp;
                }

                H0 = (H0 + A) & 0x0ffffffff;
                H1 = (H1 + B) & 0x0ffffffff;
                H2 = (H2 + C) & 0x0ffffffff;
                H3 = (H3 + D) & 0x0ffffffff;
                H4 = (H4 + E) & 0x0ffffffff;
            }

            temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);
            return temp.toLowerCase();
        }

        /************************************************************
         * end sha1
         ************************************************************/

        /*
   * Fix-up URL when page rendered from search engine cache or translated page
   */

        function urlFixup(hostName, href, referrer) {
            if (hostName === 'translate.googleusercontent.com') { // Google
                if (referrer === '') {
                    referrer = href;
                }
                href = getParameter(href, 'u');
                hostName = getHostName(href);
            } else if (hostName === 'cc.bingj.com' || // Bing
                hostName === 'webcache.googleusercontent.com' || // Google
                hostName.slice(0, 5) === '74.6.') { // Yahoo (via Inktomi 74.6.0.0/16)
                href = documentAlias.links[0].href;
                hostName = getHostName(href);
            }

            return [hostName, href, referrer];
        }

        /*
   * Fix-up domain
   */

        function domainFixup(domain) {
            var domain = (location.hostname + "/").match(/[\w-]+\.(com|info|net|org|me|mobi|hk|us|biz|xxx|ca|mx|tv|ws|am|asia|at|be|bz|cc|co|de|nom|es|eu|fm|fr|gs|firm|gen|ind|in|it|jobs|jp|ms|nl|nu|se|tc|tk|idv|tw|vg|gov|cn|ha)(\.(cn|hk|jp|tw|kr|mo|uk|ag|es|co|nz|in|br|bz|mx))*\//gi);
            dmpa_prototype_options_gdomain = domain = domain ? 0 < domain.length ? domain[0].substr(0, domain[0].length - 1) : void 0 : document.domain

            return domain
        }

        /*
   * Title fixup
   */

        function titleFixup(title) {
            if (!isString(title)) {
                title = title.text || '';
                var tmp = documentAlias.getElementsByTagName('title');
                if (tmp && isDefined(tmp[0])) {
                    title = tmp[0].text;
                }
            }
            return title;
        }

        /************************************************************
         * Page Overlay
         ************************************************************/

        function getPiwikUrlForOverlay(trackerUrl, apiUrl) {
            if (apiUrl) {
                return apiUrl;
            }

            if (trackerUrl.slice(-5) === '/hwa/') {
                trackerUrl = trackerUrl.slice(0, trackerUrl.length - 5);
            }

            return trackerUrl;
        }

        /*
   * Check whether this is a page overlay session
   *
   * @return boolean
   *
   * {@internal side-effect: modifies window.name }}
   */
        function isOverlaySession(configTrackerSiteId) {
            // return true;

            var windowName = 'Piwik_Overlay';

            // check whether we were redirected from the piwik overlay plugin
            var referrerRegExp = new RegExp('\/redirect\\?module=Overlay&action=startOverlaySession'
                + '&idSite=([^&]+)&period=([^&]+)&date=([^&]+)&url=([^&]+)$');

            var match = referrerRegExp.exec(documentAlias.referrer);

            if (match) {
                // check idsite
                var idsite = match[1];

                if (idsite !== String(configTrackerSiteId)) {
                    return false;
                }

                // store overlay session info in window name
                var period = match[2],
                    date = match[3];
                windowAlias.name = windowName + '###' + period + '###' + date;
            }

            // retrieve and check data from window name
            var windowNameParts = windowAlias.name.split('###');

            return windowNameParts.length === 3 && windowNameParts[0] === windowName;
        }

        /*
   * Inject the script needed for page overlay
   */
        function injectOverlayScripts(configTrackerUrl, configApiUrl, configTrackerSiteId) {
            var windowNameParts = windowAlias.name.split('###'),
                period = windowNameParts[1],
                date = windowNameParts[2],
                piwikUrl = getPiwikUrlForOverlay(configTrackerUrl, configApiUrl);

            loadScript(
                piwikUrl + 'resource/scripts/client/client.js?v=1',
                function () {
                    Piwik_Overlay_Client.initialize(piwikUrl, configTrackerSiteId, period, date);
                }
            );
        }

        /************************************************************
         * End Page Overlay
         ************************************************************/

        var intranet = true;
        /*
   * HA Tracker class
   *
   * trackerUrl and trackerSiteId are optional arguments to the constructor
   *
   * See: Tracker.setTrackerUrl() and Tracker.setSiteId()
   */
        var autoSendPP = false;
        var autoSendPV = false;
        var autoLinkTracking = false;
        var bfdvalue = null;

        function Tracker(siteId) {

            /************************************************************
             * Private members
             ************************************************************/
            const ACTION = {
                "OBTAINVOUCHER": "obtainVoucher",
                "COLLECT": "collect",
                "SCROLL": "scroll",
                "POST": "post",
                "REPLY": "reply",
                "JOIN": "join",
                "PRAISE": "praise",
                "REGISTER": "register",
                "SHARE": "share",
                "ENJOY": "enjoy",
                "SIGIN": "sigin",
                "FILTRATEPRODUCT": "filtrateProduct",
                "RATE": "rate",
                "CONTACTCUSTOMSERVICE": "contactCustomService",
                "CLICK": "click",
                "ADDSHOPCART": "addShopCart",
                "EXCHANGE": "exchange",
                "CREATEDORDER": "createDorder",
                "CANCELORDER": "cancelOrder",
                "PAIDORDER": "paidOrder",
                "REFUND": "refund",
                "SEARCH1": "search1",
                "INCREASECARTGOODSNUM": "increaseCartGoodsNum",
                "DECREASECARTGOODSNUM": "decreaseCartGoodsNum",
                "REMOVESHOPCART": "removeShopCart",
                "SUBSCRIBE": "subscribe",
                "PAIDSUCCESS": "paidSuccess",
                "PAIDFAIL": "paidFail",
                "REGISTERSUCCESS": "registerSuccess",
            };
            window.ACTION = ACTION;
            var
                /*<DEBUG>*/
                /*
     * registered test hooks
     */
                registeredHooks = {},
                /*</DEBUG>*/

                fields = {},//公共变量键值对
                mapFields = {
                    //站点id
                    'siteId': 'idsite',

                    //页面层级
                    'page_hierarchy': 'hier',

                    // 请求类型
                    'action_type': 'action',

                    //页面标题
                    'page_title': 'dt',

                    //当前页面url
                    'url': 'url',

                    //当前页面url的referrer
                    'referrer': 'urlref',

                    //当前页面是否是landing page，是为1，不是为0
                    'is_landing_page': 'blp',

                    //当前用户的uid
                    'uid': '_id',

                    //当前用户的id的加密串
                    'uid_encrypt': '_idenc',

                    //用户账号类型
                    'user_id_type': '_ut',

                    // session id,如果有自己实现的session逻辑，可以改
                    // 默认请不要修改
                    'session_id': '_sid',

                    // page id,如果有自己实现的page逻辑，可以改
                    // 默认请不要修改
                    'page_id': '_pid',

                    // 自定义json数据
                    'data': 'data',

                    //搜索关键字
                    'search_keyword': 's_key',

                    //搜索类别
                    'search_category': 's_cat',

                    //搜索类型
                    'search_type': 's_t',

                    //排序类型
                    'order_type': 'o_t',

                    //搜索返回结果数
                    'search_resultsCount': 's_count',

                    // 搜索id
                    'search_id': 's_id',

                    // 搜索结果的当前页数
                    'search_pageIndex': 's_page_n',

                    // 点击搜索结果的第几条（当前页）
                    'search_clickIndex': 's_item_n',
                    'search_clickIndex_inpage': 's_item_index',

                    // 点击搜索结果的类型
                    'search_clickType': 'l_type',

                    // 点击搜索结果的标题
                    'search_clickTitle': 'l_title',

                    // 点击搜索结果的url
                    'search_clickUrl': 'l_href',

                    // 页面语言
                    'language': 'url_l',

                    // 目标ID
                    'goal_id': 'idgoal',

                    // 盈利
                    'revenue': 'revenue',

                    // 链接标题
                    'link_title': 'l_title',

                    // 链接类型
                    'link_type': 'l_type',

                    // 链接目标
                    'link_target': 'l_target',

                    // 链接包含html
                    'link_html': 'l_html',

                    // 链接地址
                    'link_href': 'l_href',

                    // 点击页面的鼠标X坐标
                    'page_x': 'pagex',

                    // 点击页面的鼠标Y坐标
                    'page_y': 'pagey',

                    'opr_wf_d': 'opr_wf_d',

                    'opr_wf_n': 'opr_wf_n',

                    'opr_wf_s': 'opr_wf_s',

                    'biz_wf_n': 'biz_wf_n',

                    'biz_wf_s_s': 'biz_wf_s_s',

                    'biz_wf_s_n': 'biz_wf_s_n',

                    't_d_1': 't_d_1',

                    'appn': 'appn',

                    'appv': 'appv',
                    'user_id': 'user_id',
                    'tag_list': ['span', 'p'],

                    //2020-5-9 新增字段

                    "eType": "eType",
                    "category": "category",
                    "label": "label",
                    "value": "value",
                    "location": "location",
                    "uri": "uri",
                    "title": "title",
                    /*        "referrer": "referrer",*/
                    "referrerUrl": "referrerUrl",
                    "trackSource": "trackSource",
                    "trackMedium": "trackMedium",
                    "trackCampaign": "trackCampaign",
                    "trackContent": "trackContent",
                    "trackTerm": "trackTerm",
                    "ecType": "ecType",
                    "orderId": "orderId",
                    "name": "name",
                    "sku": "sku",
                    "brand": "brand",
                    "price": "price",
                    "currencyCode": "currencyCode",
                    "variant": "variant",
                    "quantity": "quantity",
                    "coupon": "coupon",
                    "orderStatus": "orderStatus",
                    "sType": "sType",
                    "keyword": "keyword",
                    "count": "count",
                    "pType": "pType",
                    "apiUrl": "apiUrl",
                    "requestStartTime": "requestStartTime",
                    "requestEndTime": "requestEndTime",

                    //2020-5-15页面浏览新增字段
                    "pageLoadDelay": "pageLoadDelay",
                    "pageHierarchy": "pageHierarchy",
                    "testPageViewData": "testPageViewData",
                    //2020-5-15新增公共字段
                    "sessionId": "sessionId",

                },
                // Current URL and Referrer URL
                locationArray = urlFixup(documentAlias.domain, windowAlias.location.href, getReferrer()),
                domainAlias = domainFixup(locationArray[0]),
                locationHrefAlias = locationArray[1],
                configReferrerUrl = locationArray[2],

                // Request method (GET or POST)
                configRequestMethod = 'POST',

                //configTrackerUrl = ("https:" == location.protocol ? "https:" : "http:") + "//eu-1.nebula-collector.huawei.com/dmpa/",
                //configTrackerUrl = DMPA_SCRIPT_BASEURL+"/dmpa/",

                /*不写死*/
                configTrackerUrl = DMPA_SCRIPT_BASEURL[DMPA_SCRIPT_BASEURL.length-1]!=='/'?DMPA_SCRIPT_BASEURL+"/" : DMPA_SCRIPT_BASEURL,

                configApiUrl = ("https:" == location.protocol ? "https:" : "http:") + "//w3.huawei.com/hwasite/",
                // Site ID
                configTrackerSiteId = siteId || '',

                // hierarchy
                configHierarchy = '',

                // Document URL
                configCustomUrl,

                // Document title
                configTitle = documentAlias.title,

                // Extensions to be treated as download links
                configDownloadExtensions = '7z|aac|ar[cj]|as[fx]|avi|bin|csv|deb|dmg|doc|exe|flv|gif|gz|gzip|hqx|jar|jpe?g|js|mp(2|3|4|e?g)|mov(ie)?|ms[ip]|od[bfgpst]|og[gv]|pdf|phps|png|ppt|qtm?|ra[mr]?|rpm|sea|sit|tar|t?bz2?|tgz|torrent|txt|wav|wm[av]|wpd||xls|xml|z|zip',

                // Hosts or alias(es) to not treat as outlinks
                configHostsAlias = [domainAlias],

                // HTML anchor element classes to not track
                configIgnoreClasses = [],

                // HTML anchor element classes to treat as downloads
                configDownloadClasses = [],

                // HTML anchor element classes to treat at outlinks
                configLinkClasses = [],

                // Maximum delay to wait for web bug image to be fetched (in milliseconds)
                configTrackerPause = 80,

                // Minimum visit time after initial page view (in milliseconds)
                configMinimumVisitTime,

                // Recurring heart beat after initial ping (in milliseconds)
                configHeartBeatTimer,

                // Disallow hash tags in URL
                configDiscardHashTag,

                // Custom data
                configCustomData,

                // Campaign names
                configCampaignNameParameters = ['ha_campaign', 'ha_campaign', 'utm_campaign', 'utm_source', 'utm_medium'],

                // Campaign keywords
                configCampaignKeywordParameters = ['ha_kwd', 'ha_kwd', 'utm_term'],

                // First-party cookie name prefix
                configCookieNamePrefix = '_dmpa_',

                // First-party cookie domain
                // User agent defaults to origin hostname
                configCookieDomain,

                // First-party cookie path
                // Default is user agent defined.
                //configCookiePath = "/" + (intranet ? location.pathname.split("/")[1] : ""),
                configCookiePath = "/" + (intranet ? location.pathname.split("/")[0] : ""),

                // Cookies are disabled
                configCookiesDisabled = (typeof g_hwa_configCookiesDisabled != 'undefined') ? g_hwa_configCookiesDisabled : false,

                // Do Not Track
                configDoNotTrack,

                // Count sites which are pre-rendered
                configCountPreRendered,

                // Do we attribute the conversion to the first referrer or the most recent referrer?
                configConversionAttributionFirstReferrer,

                // Life of the visitor cookie (in milliseconds)
                configVisitorCookieTimeout = 31536000000, // 1 年

                // Life of the session cookie (in milliseconds)
                configSessionCookieTimeout = 1800000, // 30 minutes

                // Life of the referral cookie (in milliseconds)
                configReferralCookieTimeout = 15768000000, // 6 months

                // Should cookies have the secure flag set
                cookieSecure = documentAlias.location.protocol === 'https',

                // Custom Variables read from cookie, scope "visit"
                customVariables = false,

                // Custom Variables, scope "page"
                customVariablesPage = {},

                // Custom Variables names and values are each truncated before being sent in the request or recorded in the cookie
                customVariableMaximumLength = 200,


                // Browser features via client-side data collection
                browserFeatures = {},

                // Guard against installing the link tracker more than once per Tracker instance
                linkTrackingInstalled = false,

                // Guard against installing the activity tracker more than once per Tracker instance
                activityTrackingInstalled = false,

                // Last activity timestamp
                lastActivityTime,

                // Internal state of the pseudo click handler
                lastButton,
                lastTarget,

                // Hash function
                hash = sha1,

                // Domain hash value
                domainHash,

                // Visitor UUID
                visitorUUID,

                // uuid encryted
                visitorUUIDEncrypt,

                pageURLBeforeRegenerate,

                //Huawei web analyse structure
                configHaIgnoreClass = 'ha_ignore',

                configHaClickClass = 'hwa-click',

                //性能数据队列
                perf_event_q = [],

                //sleep:非工作状态；ready:待命状态，周期一到就上报数据；sending:正在上报；done:上报完成，些时如果队列仍有数据则状态置为ready，如为空则置为sleep
                perf_send_status = 'sleeping',

                perf_ajaxpage_in = 0,

                perf_ajaxpage_out = 0,

                perf_ajaxpage_sended = false,

                perf_ajaxpage_min_time = 0,

                perf_ajaxpage_max_time = 0,

                perf_ajaxpage_firstloadtime = 0,

                ajaxthreshold_time = 0,

                //性能监控忽略的url
                perf_url_ignore_p = /(\.css)|(only4ssoTimeUpdate.do)/i,


                //生成本次主窗体加载的唯一ID
                ha_js_parent_pid = ha_js_parent_pid || hash(dmpa_js_init_time + locationHrefAlias + (new Date() - 0));
            var ha_js_parent_sid,
                ha_js_parent_url,
                duration,
                perf_ifrmae_succeed_flag = false;
            var hasiFrame = false;

            function getTagList() {
                for (var i = 0; i < mapFields.tag_list.length; i++) {
                    mapFields.tag_list[i] = mapFields.tag_list[i].toUpperCase();
                }
                return mapFields.tag_list;
            }

            /*
        haBIPrefix = 'hwbi',
        haBIStructure = {
        };
        */
            function sendPerfQueue() {
                //perf_event_q，把队列所有内容发送出去
                try {
                    perf_send_status = 'sending';
                    var _qlen = perf_event_q.length;
                    var _tmp_q = [];
                    for (var i = 0; i < _qlen; i++) {
                        _tmp_q.push(perf_event_q.shift());
                    }
                    ;
                    if (perf_event_q.length > 0) {
                        perf_send_status = 'ready';
                        setTimeout(sendPerfQueue, 4000);
                    } else {
                        perf_send_status = 'sleeping';
                    }

                } catch (e) {
                }
                ;
            };

            function getCustomName(name) {
                var ret = null;
                if (name) {
                    var m = name.match(/((metric)|(dimension))(.*)/);
                    if (m && m[4]) {
                        if (m[2]) ret = 'ri';
                        else if (m[3]) ret = 'rv';
                        if (ret) {
                            var no = m[4] - 0;
                            if (isNaN(no) || no < 1 || no > 10) return null;
                            ret += no;
                        }
                    }
                }
                return ret;
            }


            /*
     *  map data for fields using mapFields
     *
     */

            function mapData(data) {
                var ret = {};
                for (var o in data) {
                    var name;
                    if (mapFields[o] instanceof Array) {
                        name = o;
                    } else {
                        name = mapFields[o];
                    }
                    if (o == "search_filters") {
                        for (var i = 1; i <= data[o].length; i++) {
                            ret['s_f' + i] = data[o][i - 1];
                        }
                    }
                    var custom_name = getCustomName(o);
                    if (custom_name) {
                        ret[custom_name] = data[o];
                        continue;
                    }
                    if (name) ret[name] = data[o];
                }
                return ret;
            }

            /**
             * 获取百分点的cookie
             */
            function getbfdCookie() {
                var bfdkey = "bfdid";
                var _bfd_value = getBfdid(bfdkey);
                return _bfd_value;
            }

            /*
     * Set cookie value
     */

            function setCookie(cookieName, value, msToExpire, path, domain, secure) {
                if (configCookiesDisabled) {
                    return;
                }

                var expiryDate;
                // relative time to expire in milliseconds
                if (msToExpire) {
                    expiryDate = new Date();
                    expiryDate.setTime(expiryDate.getTime() + msToExpire);
                } else {
                    expiryDate = new Date();
                    expiryDate.setFullYear(expiryDate.getFullYear() + 1);
                    expiryDate.setTime(expiryDate.getTime() + oneYear);
                }
                if ("_dmpa_ses" == cookieName) {
                    documentAlias.cookie = '_dmpa_ses=' + encodeWrapper(value) + ';path=/;domain=' + dmpa_prototype_options_gdomain;
                } else {
                    documentAlias.cookie = cookieName + '=' + encodeWrapper(value) + (msToExpire ? ';expires=' + expiryDate.toGMTString() : '') +
                        ';path=' + (path || '/') + (dmpa_prototype_options_gdomain ? ';domain=' + dmpa_prototype_options_gdomain : '') + (secure ? ';secure' : '');
                }
            }

            /*
     * Get cookie value
     */

            function getCookie(cookieName) {
                if (configCookiesDisabled) {
                    return 0;
                }

                var cookiePattern = new RegExp('(^|;)[ ]*' + cookieName + '=([^;]*)'),
                    cookieMatch = cookiePattern.exec(documentAlias.cookie);

                return cookieMatch ? decodeWrapper(cookieMatch[2]) : 0;
            }


            /**
             * 获取bfd的老用户cookie
             * @author cWX344871
             * @since 2016-07-06
             */
            function getBfdid(bfdkey) {
                var arr = document.cookie.split(";");
                for (var i = 0; i < arr.length; i++) {
                    if (arr[i].indexOf(bfdkey) >= 0) {
                        var itemArr = arr[i].split("=");
                        for (var j = 0; j < itemArr.length; j++) {
                            var value = itemArr[1];
                            return value;
                        }
                    }

                }
            }

            /*
     * Removes hash tag from the URL
     *
     * URLs are purified before being recorded in the cookie,
     * or before being sent as GET parameters
     */

            function purify(url) {
                var targetPattern;

                if (configDiscardHashTag) {
                    targetPattern = new RegExp('#.*');
                    return url.replace(targetPattern, '');
                }

                return url;
            }

            /*
     * Resolve relative reference
     *
     * Note: not as described in rfc3986 section 5.2
     */

            function resolveRelativeReference(baseUrl, url) {
                var protocol = getProtocolScheme(url),
                    i;

                if (protocol) {
                    return url;
                }

                if (url.slice(0, 1) === '/') {
                    return getProtocolScheme(baseUrl) + '://' + getHostName(baseUrl) + url;
                }

                baseUrl = purify(baseUrl);
                if ((i = baseUrl.indexOf('?')) >= 0) {
                    baseUrl = baseUrl.slice(0, i);
                }

                if ((i = baseUrl.lastIndexOf('/')) !== baseUrl.length - 1) {
                    baseUrl = baseUrl.slice(0, i + 1);
                }

                return baseUrl + url;
            }

            /*
     * Is the host local? (i.e., not an outlink)
     */

            function isSiteHostName(hostName) {
                var i,
                    alias,
                    offset;

                for (i = 0; i < configHostsAlias.length; i++) {
                    alias = domainFixup(configHostsAlias[i].toLowerCase());

                    if (hostName === alias) {
                        return true;
                    }

                    if (alias.slice(0, 1) === '.') {
                        if (hostName === alias.slice(1)) {
                            return true;
                        }

                        offset = hostName.length - alias.length;
                        if ((offset > 0) && (hostName.slice(offset) === alias)) {
                            return true;
                        }
                    }
                }
                return false;
            }

            /*
     * Send image request to HA server using GET.
     * The infamous web bug (or beacon) is a transparent, single pixel (1x1) image
     */

            function getParmers(request) {
                var json = {"other": "other"};
                if (bfdvalue != null && "" != bfdvalue) {
                    json.bfdid = bfdvalue;
                }
                var _rv4 = JSON.stringify(json);
                request = request + "&rv1='" + encodeWrapper(_rv4) + "'"
                return request;
            }

            function getImage(request) {
                var image = new Image(1, 1);
                image.onload = function () {
                };
                //request=getParmers(request);
                image.src = configTrackerUrl + "open/dc?" + request;
            }


            function iframePost(data) {
                if (document.body) {
                    try {
                        data = encodeURIComponent(data);
                        try {
                            var ifr = document.createElement('<iframe name="' + data + '""></iframe>')
                        } catch (d) {
                            ifr = document.createElement("iframe"), ifr.name = data;
                        }
                        ifr.height = "0";
                        ifr.width = "0";
                        ifr.style.display = "none";
                        ifr.style.visibility = "hidden";
                        //消除默认静态资源请求不到的场景
                        var _ss = "/favicon.ico";
                        if (typeof static_source_4hwa != 'undefined') {
                            _ss = static_source_4hwa;
                        }

                        var src = configTrackerUrl + "../api/2.0/analytics_iframe.html#" + encodeURIComponent(location.protocol + "//" + location.host + _ss),
                            clear = function () {
                                ifr.src = "";
                                ifr.parentNode && ifr.parentNode.removeChild(ifr);
                            };


                        if (src.indexOf("/../") !== -1) {//特殊处理下
                            src = src.replace("../", "");
                        }else if (src.indexOf("../") !== -1) {//特殊处理下
                            src = src.replace("../", "/");
                        }

                        if (src.indexOf("https://") === -1 && src.indexOf("http://") === -1) {
                            src = "https://" + src;
                        }

                        addEventListener(windowAlias, "beforeunload", clear);
                        var flag = !1,
                            l = 0,
                            run = function () {
                                if (!flag) {
                                    try {
                                        if (9 < l || (ifr.contentWindow.location.host == location.host && ifr.contentWindow.location.path == _ss)) {
                                            flag = !0;
                                            clear();
                                            removeEventListener(windowAlias, "beforeunload", clear);
                                            //if(cb) cb();
                                            return;
                                        }
                                    } catch (e) {
                                    }
                                    l++;
                                    setTimeout(run, 200);
                                }
                            };
                        addEventListener(ifr, "load", run);
                        document.body.appendChild(ifr);
                        ifr.src = src;
                    } catch (e) {
                    }
                    ;

                } else {
                    setTimeout(function () {
                        //iframePost(data, cb);
                        iframePost(data);
                    }, 100);
                }
            }

            /*
     * Send request
     */

            var _cRequest = 0;
            var _dDate = new Date();

            function isChrome() {
                var aAgent = navigatorAlias.userAgent;
                if (aAgent.indexOf("Chrome") >= 0) {
                    return true;
                }
                return false;
            }

            function sendRequest(request, delay) {
                var now = new Date();
                // request interval more than 1 second
                if ((now - _dDate) > 1000) {
                    _cRequest = 0;
                    _dDate = now;
                }


                // restrict 5 request in one second
                if (!configDoNotTrack && _cRequest < 5) {
                    _cRequest++;
                    /*if (fields['DMPAVersion'] !== undefined) {
                        iframePost(request);
                    } else {
                        if (configRequestMethod === "GET") {
                            getImage(request);
                        } else {
                            iframePost(request);
                        }
                    }*/
                    //当前后端只支持POST
                    iframePost(request);


                    expireDateTime = now.getTime() + delay;
                }
                try {
                    //清理全局数据
                    fields['data'] = null;
                    fields['goal_id'] = null;
                    fields['page_x'] = null;
                    fields['page_y'] = null;
                    fields['opr_wf_d'] = null;
                    fields['opr_wf_n'] = null;
                    fields['opr_wf_s'] = null;
                    fields['biz_wf_n'] = null;
                    fields['biz_wf_s_s'] = null;
                    fields['biz_wf_s_n'] = null;
                    if (fields['page_hierarchy'] != null) {
                        fields['page_hierarchy'] = fields['page_hierarchy'].replace(/((g:{)|(t:{)|(tab:{)|(app:{)|(func:{)|(f:{))(.*?)}/g, "");
                    }
                    fields['ri1'] = null;
                    fields['ri2'] = null;
                    fields['ri3'] = null;
                    fields['ri4'] = null;
                    fields['ri5'] = null;

                    fields['rv1'] = null;
                    fields['rv2'] = null;
                    fields['rv3'] = null;
                    fields['rv4'] = null;
                    fields['rv5'] = null;

                    fields['t_d_1'] = null;


                } catch (e) {
                }
            }

            /*
     * Get cookie name with prefix and domain hash
     */

            function getCookieName(baseName) {
                // NOTE: If the cookie name is changed, we must also update the functions which
                // will attempt to discover first party cookies.
                //return configCookieNamePrefix + baseName + '.' + configTrackerSiteId + '.' + domainHash;
                return configCookieNamePrefix + baseName;
            }

            /*
     * Does browser have cookies enabled (for this site)?
     */

            function hasCookies() {
                if (configCookiesDisabled) {
                    return '0';
                }

                if (!isDefined(navigatorAlias.cookieEnabled)) {
                    var testCookieName = getCookieName('testcookie');
                    setCookie(testCookieName, '1');

                    return getCookie(testCookieName) === '1' ? '1' : '0';
                }

                return navigatorAlias.cookieEnabled ? '1' : '0';
            }

            /*
     * Update domain hash
     */

            function updateDomainHash() {
                domainHash = hash((configCookieDomain || domainAlias) + (configCookiePath || '/')).slice(0, 4); // 4 hexits = 16 bits
            }

            /*
     * Inits the custom variables object
     */

            function getCustomVariablesFromCookie() {
                var cookieName = getCookieName('cvar'),
                    cookie = getCookie(cookieName);

                if (cookie.length) {
                    cookie = JSON.parse(cookie);
                    if (isObject(cookie)) {
                        return cookie;
                    }
                }
                return {};
            }

            /*
     * Lazy loads the custom variables from the cookie, only once during this page view
     */

            function loadCustomVariables() {
                if (customVariables === false) {
                    customVariables = getCustomVariablesFromCookie();
                }
            }

            /*
     * Process all "activity" events.
     * For performance, this function must have low overhead.
     */

            function activityHandler() {
                var now = new Date();

                lastActivityTime = now.getTime();
            }

            /*
     * Sets the Visitor ID cookie: either the first time loadVisitorIdCookie is called
     * or when there is a new visit or a new page view
     */

            function setVisitorIdCookie(uuid, createTs, visitCount, nowTs, lastVisitTs, lastEcommerceOrderTs) {
                setCookie(getCookieName('id'), uuid + '.' + createTs + '.' + visitCount + '.' + nowTs + '.' + lastVisitTs + '.' + lastEcommerceOrderTs, configVisitorCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
            }

            /*
     * Load visitor ID cookie
     */

            function loadVisitorIdCookie() {
                var now = new Date(),
                    nowTs = Math.round(now.getTime() / 1000),
                    id = getCookie(getCookieName('id')),
                    tmpContainer;

                var cst_uid = document.getElementById("fm_loginUserName");
                if (cst_uid && cst_uid.innerText) {
                    //业务系统定制获取w3账号
                    visitorUUID = cst_uid.innerText.replace(/\s{1,}/g, "").split("|")[0];
                    visitorUUIDEncrypt = 0;
                }

                //visitorUUID = getCookie("uid");
                visitorUUID = dmpa_prototype_options_dmpaid;
                visitorUUIDEncrypt = 0;

                /*dmpa的cookie继后传的id和前台取的uuid*/

                if (id) {
                    tmpContainer = id.split('.');

                    // returning visitor flag
                    tmpContainer.unshift('0');
                    if (tmpContainer[0] === visitorUUID || !visitorUUID) {
                        return tmpContainer;
                    }
                }
                // uuid - generate a pseudo-unique ID to fingerprint this user;
                // note: this isn't a RFC4122-compliant UUID
                if (!visitorUUID) {
                    visitorUUID = dmpa_prototype_options_dmpaid;
                }

                tmpContainer = [
                    // new visitor
                    '1',

                    // uuid
                    visitorUUID,

                    // creation timestamp - seconds since Unix epoch
                    nowTs,

                    // visitCount - 0 = no previous visit
                    0,

                    // current visit timestamp
                    nowTs,

                    // last visit timestamp - blank = no previous visit
                    '',

                    // last ecommerce order timestamp
                    ''
                ];
                return tmpContainer;
            }

            /*
     * Loads the referrer attribution information
     *
     * @returns array
     *  0: campaign name
     *  1: campaign keyword
     *  2: timestamp
     *  3: raw URL
     */

            function loadReferrerAttributionCookie() {
                // NOTE: if the format of the cookie changes,
                // we must also update JS tests, jsp tracker, Integration tests,
                // and notify other tracking clients (eg. Java) of the changes
                var cookie = getCookie(getCookieName('ref'));

                if (cookie.length) {
                    try {
                        cookie = JSON.parse(cookie);
                        if (isObject(cookie)) {
                            return cookie;
                        }
                    } catch (err) {
                        // Pre 1.3, this cookie was not JSON encoded
                    }
                }
                return [
                    '',
                    '',
                    0,
                    ''];
            }


            // get page performance info

            var unloadCookieFuncBound;

            function getPerformance() {
                try {
                    if (!perfInfo) {
                        var perf = windowAlias.performance || windowAlias.webkitPerformance,
                            perf = perf && perf.timing;
                        if (perf) {
                            var c = perf.navigationStart;
                            if (0 == c) return !1;
                            var d = perf.loadEventStart - c;
                            if (Infinity == d || isNaN(d) || d <= 0) return !1;
                            perfInfo = {
                                // page load time
                                plt: d,
                                dns: perf.connectEnd - c,
                                // dom interactive time
                                dit: perf.domInteractive - c,
                                // tcp connect time
                                tcp: perf.connectEnd - perf.connectStart,
                                // server response time
                                srt: perf.responseStart - perf.requestStart,
                                // page download time
                                pdt: perf.responseEnd - perf.responseStart,
                                // hard to define, see https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html#dom-performancetiming-fetchstart
                                rrt: perf.domComplete - perf.domLoading,
                                // domContent load time
                                clt: perf.loadEventEnd - perf.loadEventStart
                            };
                            for (var o in perfInfo)
                                if (perfInfo[o] < 0) perfInfo[o] = 0;

                        } else {
                            // using google toolbar to collect performance data
                            //if (windowAlias.top != windowAlias) return !1;
                            var b = windowAlias.external,
                                c = b && b.onloadT;
                            b && !b.isValidLoadTime && (c = void 0);
                            2147483648 < c && (c = void 0);
                            0 < c && b.setPageReadyTime();
                            if (c == void 0) {
                                /* collect plt using cookie
                 inspired by boomerang.js
                 https://github.com/yahoo/boomerang
              */
                                // document not loaded yet
                                if (document.readyState != "complete") return !1;
                                var _lpName = getCookieName("lp"),
                                    _info = getCookie(_lpName);

                                registeredOnUnloadHandlers.push(function () {
                                    //set lp cookie
                                    setCookie(_lpName, JSON.stringify({
                                        url: locationHrefAlias,
                                        t: new Date() - 0
                                    }), 6e4);
                                });

                                // clear the lp cookie
                                setCookie(_lpName, "", -86400);

                                if (!_info) {
                                    perfInfo = {
                                        plt: new Date().getTime() - dmpa_js_init_time
                                    };
                                    return perfInfo;
                                }
                                _info = JSON.parse(_info);

                                c = new Date() - (_info.t || 0);
                                // diff > 1min, don't track
                                if (c >= 6e4) return !1;
                            }
                            perfInfo = {
                                plt: c
                            };
                        }
                    }
                    return perfInfo;
                } catch (e) {
                }
            }

            function buildPayload(data) {
                var ret = [];
                for (var o in data) {
                    if (data[o] != null) {
                        ret.push(o + "=" + encodeURIComponent(data[o]));
                    }
                }
                return ret.join("&");
            }

            // http://www.fynas.com/ua/search?d=荣耀&b=&page=7
            var types = ["华为Mate 10 Pro:BLA-AL00 Build/HUAWEIBLA-AL00",
                "华为Mate 10:ALP-AL00 Build/HUAWEIALP-AL00",
                "华为Mate 9:MHA-AL00 Build/HUAWEIMHA-AL00",
                "华为Mate 8:HUAWEI NXT-TL00 Build/HUAWEINXT-TL00",
                "华为nova 3:PAR-AL00 Build/HUAWEIPAR-AL00",
                "华为nova 2:PIC-AL00 Build/HUAWEIPIC-AL00",
                "华为nova 2 Plus:BAC-AL00 Build/HUAWEIBAC-AL00",
                "华为P20:EML-AL00 Build/HUAWEIEML-AL00",
                "华为P10:VTR-AL00 Build/HUAWEIVTR-AL00",
                "华为P9:EVA-AL10 Build/HUAWEIEVA-AL10",
                "华为P8:HUAWEI GRA-UL10 Build/HUAWEIGRA-UL10",
                "华为MT1-U06:HUAWEI MT1-U06 Build/HuaweiMT1-U06",
                "荣华为荣耀10:COL-TL10 Build/HUAWEICOL-TL10",
                "荣耀V10 全网通标配版:BKL-AL00 Build/HUAWEIBKL-AL00",
                "荣耀V10:BKL-AL20 Build/HUAWEIBKL-AL20",
                "荣耀V9:DUK-AL20 Build/HUAWEIDUK-AL20",
                "荣耀9:STF-AL00 Build/HUAWEISTF-AL00",
                "华为荣耀8高配版:FRD-AL10 Build/HUAWEIFRD-AL10",
                "华为荣耀V8:KNT-AL20 Build/HUAWEIKNT-AL20",
                "华为荣耀8:FRD-AL00 Build/HUAWEIFRD-AL00",
                "华为荣耀7i:ATH-AL00 Build/HONORATH-AL00",
                "华为荣耀7:PLK-AL10 Build/HONORPLK-AL10",
                "荣耀V8全网通:KNT-UL10 Build/HUAWEIKNT-UL10",
                "荣耀畅玩6X:BLN-AL40 Build/HONORBLN-AL40",
                "荣耀畅玩5X:KIW-AL10 Build/HONORKIW-AL10",
                "荣耀畅玩4X:Che2-TL00 Build/HonorChe2-TL00",
                "荣耀8青春版:PRA-AL00X Build/HONORPRA-AL00X",
                "荣耀畅玩5C:NEM-AL10 Build/HONORNEM-AL10",
                "荣耀畅玩4C:CHM-TL00H Build/HonorCHM-TL00H",
                "荣耀6 Plus:PE-TL20 Build/HuaweiPE-TL20",
                "华为荣耀Note8:EDI-AL10 Build/HUAWEIEDISON-AL10",


                "三星Galaxy J3:SM-J3109 Build/LMY47X",
                "三星Galaxy S9+:SM-G9650 Build/R16NW",
                "三星Galaxy Note 8:SM-N9500 Build/R16NW",
                "三星GALAXY S6 Edge+:SM-G9280 Build/NRD90M",
                "三星GALAXY S6 Edge:SM-G9250 Build/NRD90M",
                "三星Galaxy S6:SM-G9208 Build/NRD90M",
                "三星GALAXY S8:SM-G9500 Build/R16NW",
                "三星GALAXY S7:SM-G9350 Build/R16NW",
                "三星GALAXY C7:SM-C7000 Build/NRD90M",
                "三星GALAXY S8+:SM-G9550 Build/NRD90M",
                "三星GALAXY S7 Edge:SM-G9350 Build/NRD90M",
                "三星GALAXY C9:SM-C9000 Build/MMB29M",
                "三星GALAXY C9 Pro:SM-C9000 Build/MMB29M",
                "三星GALAXY C5:SM-C5000 Build/R16NW",
                "三星2016版GALAXY A7:SM-A7100 Build/LMY47X",
                "三星GALAXY S7 Edge:SM-G9350 Build/NRD90M",
                "三星GALAXY Note 5:SM-N9200 Build/NRD90M",
                "三星GALAXY A5:SM-A5000 Build/MMB29M",
                "三星GALAXY A8:SM-A8000 Build/MMB29M",

                "小米Note 2:Mi Note 2 Build/OPR",
                "小米6:MI 6 Build/OPR",
                "小米5s:MI 5s Build/NRD90M",
                "小米Note 3:Mi Note 3 Build/OPM",
                "小米5:MI 5 Build/OPR",
                "小米MAX 3:MI MAX 3 Build/OPM",
                "小米2S:MIX 2S Build/PKQ",
                "小米5s Plus:MI 5s Plus Build/NRD90M",
                "小米MAX 2:MI MAX 2 Build/NMF26F",
                "小米3:MI 3 Build/KTU84P",
                "小米5X:MI 5X Build/N2G47H",
                "小米8:MI 8 Build/OPM",
                "小米6X:MI 6X Build/OPM",
                "小米Note:MI NOTE LTE Build/MMB29M",
                "小米5s:MI 5s Build/MXB48T",
                "小米5s Plus:MI 5s Plus Build/NRD90M",
                "小米8 SE:MI 8 SE Build/OPM",
                "小米MIX 2:MIX 2 Build/OPR",
                "小米MIX:MIX Build/OPR",
                "小米NOTE Pro:MI NOTE Pro Build/NRD90M",
                "红米Note 4X:Redmi Note 4X Build/NRD90M",
                "红米6 Pro:Redmi 6 Pro Build/OPM",
                "红米5 Plus:Redmi 5 Plus Build/N2G47H",
                "红米Pro:Redmi Pro Build/MRA58K",
                "红米Note 5:Redmi Note 5 Build/OPM",
                "红米Note 4:Redmi Note 4 Build/MRA58K",
                "红米Note 3:Redmi Note 3 Build/MMB29M",
                "红米4A:Redmi 4A Build/MMB29M",
                "红米3S:Redmi 3S Build/MMB29M",
                "红米4:Redmi 4 Build/MMB29M",
                "红米5:Redmi 5 Build/N2G47H",
                "红米6:Redmi 6 Build/O11019",
                "红米Note 5A:Redmi Note 5A Build/N2G47H",
                "红米4X:Redmi 4X Build/MMB29M",

                "魅族m2 note:m2 note Build/LMY47D",
                "魅族PRO 6:PRO 6 Build/NMF26O",
                "魅族MX6:MX6 Build/NMF26O",
                "魅族MX5:MX5 Build/LMY47I",
                "魅族PRO 5:PRO 5 Build/NRD90M",
                "魅族MX4:MX4 Pro Build/LMY48W",
                "魅族魅蓝metal:m1 metal Build/LMY47I",
                "魅族MX4 Pro:MX4 Pro Build/LMY48W",

                "OPPO A57:OPPO A57 Build/MMB29M",
                "OPPO R15:PACM00 Build/O11019",
                "OPPO R11:OPPO R11 Build/NMF26X",
                "OPPO R9 Plus:OPPO R9 Plustm A Build/LMY47V",
                "OPPO R9s:OPPO R9s Build/MMB29M",
                "OPPO R11st:OPPO R11st Build/NMF26X",
                "OPPO R9 Plusm A:OPPO R9 Plusm A Build/LMY47V",
                "OPPO R7s:OPPO R7s Build/KTU84P",
                "OPPO R9sk:OPPO R9sk Build/MMB29M",
                "OPPO R9st:OPPO R9st Build/MMB29M",
                "OPPO R9m:OPPO R9m Build/LMY47I",
                "OPPO A59s:OPPO A59s Build/LMY47I",
                "OPPO A57t:OPPO A57t Build/MMB29M",
                "OPPO A57:OPPO A57 Build/MMB29M",
                "OPPO R11t:OPPO R11t Build/NMF26X",
                "OPPO A83t:OPPO A83t Build/N6F26Q",
                "OPPO R11s:OPPO R11s Build/NMF26X",
                "OPPO A33m:OPPO A33m Build/LMY47V",
                "OPPO A37t:OPPO A37t Build/MRA58K",
                "OPPO A77:OPPO A77 Build/NMF26F",
                "OPPO R9s Plus:OPPO R9s Plus Build/MMB29M",
                "OPPO A73:OPPO A73 Build/N6F26Q",
                "OPPO R11plus:OPPO R11plus Build/NRD90M",
                "OPPO A79k:OPPO A79k Build/N6F26Q",
                "OPPO A53:OPPO A53 Build/LMY47V",
                "OPPO A59:A59m Build/LMY47I",
                "OPPO A83:OPPO A83 Build/N6F26Q",
                "OPPO A37m:OPPO A37m Build/LMY47I",
                "OPPO R7sPlus:OPPO R7sPlus Build/LMY47V",
                "OPPO A73t:OPPO A73t Build/N6F26Q",

                "vivo X6S A:vivo X6S A Build/LMY47V",
                "vivo X20A:vivo X20A Build/NMF26X",
                "vivo Y85:vivo Y85 Build/OPM",
                "vivo Y71A:vivo Y71A Build/OPM",
                "vivo Z1:vivo Z1 Build/OPM",
                "vivo X6Plus D:vivo X6Plus D Build/LMY47I",
                "vivo X9Plus:vivo X9Plus Build/N2G47H",
                "vivo X7:vivo X7 Build/LMY47V",
                "vivo X9:vivo X9 Build/N2G47H",
                "vivo Y35A:vivo Y35A Build/LRX22G",
                "vivo X9s Plus:vivo X9s Plus Build/N2G47H",
                "vivo V3Max A:vivo V3Max A Build/LMY47V",
                "vivo X5Pro L:vivo X5Pro L Build/LRX21M",
                "vivo X9i:vivo X9i Build/N2G47H",
                "vivo Y66:vivo Y66 Build/MMB29M",
                "vivo X21A:vivo X21A Build/OPM",
                "vivo Y55:vivo Y55 Build/MMB29M",
                "vivo X21UD A:vivo X21UD A Build/OPM",
                "vivo Xplay6:vivo Xplay6 Build/NMF26F",
                "vivo Y66L:vivo Y66L Build/MMB29M",
                "vivo X21:vivo X21 Build/OPM",
                "vivo Y85A:vivo Y85A Build/OPM",
                "vivo X6S A:vivo X6S A Build/LMY47V",
                "vivo X21A:vivo X21A Build/OPM",
                "vivo X20Plus A:vivo X20Plus A Build/NMF26X",
                "vivo Y79A: vivo Y79A Build/N2G47H",
                "vivo X6:vivo X6A Build/LRX22G",


            ];

            function getDType() {
                var userAgent = navigator.userAgent;
                if (userAgent == undefined || null == userAgent) {
                    return "others";
                }
                if (userAgent.indexOf("iPhone") != -1) {
                    return userAgent.substring(userAgent.indexOf("iPhone OS"), userAgent.indexOf(" like"));
                }

                if (userAgent.indexOf("iPad") != -1) {
                    return "iPad " + userAgent.substring(userAgent.indexOf("CPU") + 4, userAgent.indexOf(" like"));
                }


                var indexOfBuild = userAgent.indexOf("Build/");
                if (indexOfBuild == -1) {
                    return "others";
                }

                var preIndex = userAgent.substring(0, indexOfBuild).lastIndexOf(";");
                var fenhao = userAgent.indexOf(";", userAgent.indexOf("Build"));
                var kuohao = userAgent.indexOf(")", userAgent.indexOf("Build"));
                var posIndex = fenhao == -1 ? kuohao : kuohao == -1 ? fenhao : fenhao > kuohao ? kuohao : fenhao;
                if (preIndex == -1 || posIndex == -1) {
                    return "others";
                }
                return userAgent.substring(preIndex + 2, posIndex);

            }

            /*
				 * Returns the URL to call dmpa.jsp, with the standard
				 * parameters (plugins, resolution, url, referrer, etc.). Sends
				 * the pageview and browser settings with every request in case
				 * of race conditions.
				 */

            function getRequest(request, customData, pluginMethod, currentEcommerceOrderTs) {
                var i,
                    now = new Date(),
                    nowTs = Math.round(now.getTime() / 1000),
                    newVisitor,
                    uuid,
                    visitCount,
                    createTs,
                    currentVisitTs,
                    lastVisitTs,
                    lastEcommerceOrderTs,
                    referralTs,
                    referralUrl,
                    referralUrlMaxLength = 1024,
                    currentReferrerHostName,
                    originalReferrerHostName,
                    customVariablesCopy = customVariables,
                    idname = getCookieName('id'),
                    sesname = getCookieName('ses'),
                    refname = getCookieName('ref'),
                    cvarname = getCookieName('cvar'),
                    datasend = null,
                    id = loadVisitorIdCookie(),
                    ses = getCookie(sesname),
                    attributionCookie = loadReferrerAttributionCookie(),
                    currentUrl = configCustomUrl || locationHrefAlias,
                    campaignNameDetected,
                    campaignKeywordDetected;
                if (configCookiesDisabled) {
                    // Temporarily allow cookies just to delete the existing ones
                    configCookiesDisabled = false;
                    setCookie(idname, '', -86400, configCookiePath, configCookieDomain);
                    setCookie(sesname, '', -86400, configCookiePath, configCookieDomain);
                    setCookie(cvarname, '', -86400, configCookiePath, configCookieDomain);
                    setCookie(refname, '', -86400, configCookiePath, configCookieDomain);
                    configCookiesDisabled = true;
                }

                if (configDoNotTrack) {
                    return '';
                }
                newVisitor = id[0];
                uuid = id[1];
                createTs = id[2];
                visitCount = id[3];
                currentVisitTs = id[4];
                lastVisitTs = id[5];

                // case migrating from pre-1.5 cookies
                if (!isDefined(id[6])) {
                    id[6] = "";
                }

                lastEcommerceOrderTs = id[6];

                if (!isDefined(currentEcommerceOrderTs)) {
                    currentEcommerceOrderTs = "";
                }

                // send charset if document charset is not utf-8. sometimes encoding
                // of urls will be the same as this and not utf-8, which will cause problems
                // do not send charset if it is utf8 since it's assumed by default in HA
                var charSet = document.characterSet || document.charset;
                if (!charSet || charSet.toLowerCase() === 'utf-8') {
                    charSet = null;
                }

                campaignNameDetected = attributionCookie[0];
                campaignKeywordDetected = attributionCookie[1];
                referralTs = attributionCookie[2];
                referralUrl = attributionCookie[3];
                var _dmpa_ses_time = getCookie("_dmpa_ses_time");
                var newDate = new Date() - 0;
                if (!ses) {
                    // new session (aka new visit)
                    visitCount++;
                    ses = hash(uuid + (new Date() - 0) + "" + Math.random());
                    lastVisitTs = currentVisitTs;

                    // Detect the campaign information from the current URL
                    // Only if campaign wasn't previously set
                    // Or if it was set but we must attribute to the most recent one
                    // Note: we are working on the currentUrl before purify() since we can parse the campaign parameters in the hash tag
                    if (!configConversionAttributionFirstReferrer || !campaignNameDetected.length) {
                        for (i in configCampaignNameParameters) {
                            if (Object.prototype.hasOwnProperty.call(configCampaignNameParameters, i)) {
                                campaignNameDetected = getParameter(currentUrl, configCampaignNameParameters[i]);
                                if (campaignNameDetected.length) {
                                    break;
                                }
                            }
                        }
                        for (i in configCampaignKeywordParameters) {
                            if (Object.prototype.hasOwnProperty.call(configCampaignKeywordParameters, i)) {
                                campaignKeywordDetected = getParameter(currentUrl, configCampaignKeywordParameters[i]);
                                if (campaignKeywordDetected.length) {
                                    break;
                                }
                            }
                        }
                    }

                    // Store the referrer URL and time in the cookie;
                    // referral URL depends on the first or last referrer attribution
                    currentReferrerHostName = getHostName(configReferrerUrl);
                    originalReferrerHostName = referralUrl.length ? getHostName(referralUrl) : '';
                    if (currentReferrerHostName.length && // there is a referrer
                        !isSiteHostName(currentReferrerHostName) && // domain is not the current domain
                        (!configConversionAttributionFirstReferrer || // attribute to last known referrer
                            !originalReferrerHostName.length || // previously empty
                            isSiteHostName(originalReferrerHostName))) { // previously set but in current domain
                        referralUrl = configReferrerUrl;
                    }

                    // Set the referral cookie if we have either a Referrer URL, or detected a Campaign (or both)
                    if (referralUrl.length || campaignNameDetected.length) {
                        referralTs = nowTs;
                        attributionCookie = [
                            campaignNameDetected,
                            campaignKeywordDetected,
                            referralTs,
                            purify(referralUrl.slice(0, referralUrlMaxLength))
                        ];
                        setCookie(refname, JSON.stringify(attributionCookie), configReferralCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
                    }
                    setCookie("_dmpa_ses_time", newDate + configSessionCookieTimeout, configSessionCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
                }

                if (!_dmpa_ses_time) {
                    setCookie("_dmpa_ses_time", newDate + configSessionCookieTimeout, configSessionCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
                    ses = hash(uuid + newDate + "" + Math.random());
                } else {
                    var timeMistake = newDate - _dmpa_ses_time;
                    if (timeMistake > 0) {//session需要更新
                        ses = hash(uuid + newDate + "" + Math.random());
                    }
                    setCookie("_dmpa_ses_time", newDate + configSessionCookieTimeout, configSessionCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
                }
                pageId = pageId || hash(uuid + ses + newDate);

                function isLandingPage() {
                    if (configReferrerUrl === "") return false;
                    var referrerHost = getHostName(configReferrerUrl);
                    var ret = /(\/\/)([^\/]*)(.*)/.exec(configReferrerUrl);
                    var referrerPath = ret && ret[3] || "";
                    return referrerHost != location.hostname || !(new RegExp(configCookiePath)).test(referrerPath);
                }

                // build out the rest of the request

                // keep the string to a minimum   //'&h': + now.getHours() + '&m': + now.getMinutes() + '&s': + now.getSeconds() +

                //datasend = mixin({}, )

                //页面层级处理，优先从hwa-page-hier域取页面层级信息，其次是用户设置的page_hierarchy


                if (request === undefined || request.action === undefined) {
                    //暂不处理
                } else {
                    if (request.action === "pv" && jalorPageForwardFlag4PV) {
                        fields["page_hierarchy"] = null;
                        jalorPageForwardFlag4PV = false;
                    }
                }

                if (request === undefined || request.hier === undefined) {
                    var hwaHier = "";
                } else {
                    var hwaHier = (request.hier ? request.hier : configHierarchy);
                }

                if (hwaHier == null || hwaHier == "") {
                    if (request && request.action) {
                        if (request.action == "link-h") {
                            hwaHier = fields["page_hierarchy_before"];
                            fields["page_hierarchy_before"] = null;
                        } else {
                            hwaHier = fields["page_hierarchy"];
                        }
                    }

                }

                if (!/((c:{)|(c{)|(c\())(.*?)}/.test(hwaHier)) {
                    if (fields["page_hierarchy"] != null && fields["page_hierarchy"].match(/((c:{)|(c{)|(c\())(.*?)}/g) != null) {
                        var hwaPageHier = fields["page_hierarchy"].match(/((c:{)|(c{)|(c\())(.*?)}/g)[0];
                        if (hwaPageHier != null) {
                            hwaHier = hwaPageHier + (hwaHier == null ? "" : hwaHier);

                        }
                    } else if (isDefined(documentAlias.getElementById("hwa-page-hier"))) {
                        var hwaPageHier = getPageHierCurrent(documentAlias.getElementById("hwa-page-hier"));
                        if (hwaPageHier != null) {
                            hwaHier = hwaPageHier + (hwaHier == null ? "" : hwaHier);

                        }
                    }
                }
                request.hier = hwaHier;
                //如果为hashchange 触发的页面跳转，则不暂存
                if (request && request.action) {
                    if (request.action != "link-h") {
                        fields["page_hierarchy"] = hwaHier;
                    } else {
                        fields["page_hierarchy"] = null;
                    }
                }


                if (fields.DMPAVersion !== undefined) {
                    Date.prototype.MyFormat = function (fmt) { // author: meizz
                        var o = {
                            "M+": this.getMonth() + 1, // 月份
                            "d+": this.getDate(), // 日
                            "h+": this.getHours(), // 小时
                            "m+": this.getMinutes(), // 分
                            "s+": this.getSeconds(), // 秒
                            "q+": Math.floor((this.getMonth() + 3) / 3), // 季度
                            "S": this.getMilliseconds() // 毫秒
                        };
                        if (/(y+)/.test(fmt))
                            fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
                        for (var k in o)
                            if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
                        return fmt;
                    };
                    datasend = {
                        //混入时间
                        "timeStamp": new Date().MyFormat("yyyy-MM-dd hh:mm:ss"),
                    };
                    var PerformanceTiming = window.performance.timing;
                    var performance = {
                        redirection: PerformanceTiming.redirectEnd - PerformanceTiming.redirectStart,
                        domainLookupTime: PerformanceTiming.domainLookupEnd - PerformanceTiming.domainLookupStart,
                        serverConnectionTime: PerformanceTiming.connectEnd - PerformanceTiming.connectStart,
                        serverResponseTime: PerformanceTiming.responseEnd - PerformanceTiming.responseStart,
                        pageDownloadTime: PerformanceTiming.responseEnd - PerformanceTiming.responseStart,
                        pageLoad: PerformanceTiming.loadEventEnd - PerformanceTiming.loadEventStart,
                    };
                    mixin(datasend, performance);
                } else {
                    var _bfdid_ = getbfdCookie();
                    var _dType = getDType();
                    if (!configCustomData) {
                        configCustomData = {};
                    }
                    configCustomData["device_type"] = _dType;
                    //setCustomData("device_type", _dType);

                    datasend = {
                        'action': request.action,
                        'idsite': configTrackerSiteId,
                        'hier': hwaHier,
                        'r': String(Math.random()).slice(2, 8),
                        "t": (request.action == "pv" ? dmpa_js_init_time : now - 0),
                        "tz": (-now.getTimezoneOffset() / 60),
                        'dt': configTitle,
                        'url': (request.action == "link-h" ? purify(urlBeforeHashChange) : purify(currentUrl)),
                        'urlref': (request.action == "link-h" ? purify(urlRefBeforeHashChange) : (configReferrerUrl.length ? purify(configReferrerUrl) : null)),
                        'blp': isLandingPage() ? 1 : 0,
                        "_idenc": visitorUUIDEncrypt,
                        '_id': uuid,
                        "_sid": ses,
                        '_pid': (request.action == "link-h" ? pageIdBeforeHashChange : pageId),
                        '_idts': createTs, // currently unused
                        '_idvc': visitCount, // currently unused
                        '_idn': newVisitor, // currently unused
                        '_rcn': (campaignNameDetected.length ? campaignNameDetected : null),
                        '_rck': (campaignKeywordDetected.length ? campaignKeywordDetected : null),
                        '_refts': referralTs,
                        '_viewts': lastVisitTs,
                        '_ects': (String(lastEcommerceOrderTs).length ? lastEcommerceOrderTs : null),
                        '_ref': (String(referralUrl).length ? purify(referralUrl.slice(0, referralUrlMaxLength)) : null),
                        'cs': (charSet ? charSet : null),
                        'data': customData,
                        '_bfd_id': _bfdid_,
                        'user_id': request.user_id
                    }
                }

                //dyx
                if (fields.DMPAVersion !== undefined) {
                    if (customData !== null && customData !== undefined) {
                        datasend = mixin(datasend, customData);
                    }
                } else {
                    //计算与页面打开时间之差
                    if (fields['pageReadyTime']) {
                        try {
                            var now1 = new Date();
                            datasend.offset = now1.getTime() - fields['pageReadyTime'];
                        } catch (ee1) {
                            datasend.offset = 0;
                        }

                    }

                    if (request.action && (request.action == 'search' || request.action == 'searchclick')) {
                        datasend['ri1'] = 10;
                    }
                }


                if (request.action != "link-h") {
                    if (fields.DMPAVersion !== undefined) {//为新版本DMPA混入不用映射的公共参数
                        //没有userId取_dmpa_id
                        if (fields.userId === null || fields.userId === undefined || fields.userId === "") {
                            /*function getMyCookie(cname){
                                var name = cname + "=";
                                var ca = document.cookie.split(';');
                                for(var i=0; i<ca.length; i++) {
                                    var c = ca[i].trim();
                                    if (c.indexOf(name)==0) { return c.substring(name.length,c.length); }
                                }
                                return "";
                            }
                            fields.userId = getMyCookie("_dmpa_id");*/
                            var myId = window.dmpa_prototype_options_dmpaid;
                            if (!myId) {
                                myId = "";
                            }
                            fields.userId = myId;
                        }
                        mixin(datasend, fields);
                    } else {
                        mixin(datasend, mapData(fields));
                    }

                }

                mixin(datasend, request);
                if ((request.action == "pp" || request.action == "ajax-pp") && !configiFrameTrackingDisabled && !dis_parent && perf_ifrmae_succeed_flag) { //本窗体未禁用 && 父窗体未禁用
                    var tempStructure, p;
                    try {
                        p = windowAlias.performance.timing || windowAlias.webkitPerformance.timing;
                        if (p.loadEventEnd) {
                            duration = p.loadEventEnd - dmpa_js_init_time;
                        } else {
                            duration = p.loadEventStart - dmpa_js_init_time;
                        }
                    } catch (e) {
                    }
                    ;
                    if (request.action == "ajax-pp") {
                        duration = perf_ajaxpage_max_time - dmpa_js_init_time
                    }
                    ;
                    if (window == top && hasiFrame) {
                        tempStructure = {
                            sid: ha_js_parent_sid,
                            pid: ha_js_parent_pid,
                            time: dmpa_js_init_time,
                            dur: duration,
                            istop: true
                        };
                    }
                    ;
                    if (window !== top && !dis_parent && typeof ha_js_parent_sid == 'string') {
                        tempStructure = {
                            sid: ha_js_parent_sid,
                            pid: ha_js_parent_pid,
                            time: dmpa_js_init_time,
                            dur: duration,
                            url: ha_js_parent_url
                        };
                    }
                    ;
                    datasend["rv5"] = JSON.stringify(tempStructure);
                }
                ;


                // Custom Variables, scope "page"
                var customVariablesPageStringified = JSON.stringify(customVariablesPage);
                if (customVariablesPageStringified.length > 2) {
                    datasend.cvar = customVariablesPageStringified;
                    //request += '&cvar': +encodeWrapper(customVariablesPageStringified);
                }

                // browser features
                //如果是新版本JS则屏蔽这段方法,反之执行 dyx
                if (fields.DMPAVersion === undefined) {
                    for (i in browserFeatures) {
                        if (Object.prototype.hasOwnProperty.call(browserFeatures, i)) {
                            datasend[i] = browserFeatures[i];
                            // request += '&' + i + '': +browserFeatures[i];
                        }
                    }
                }

                customData = customData || configCustomData;
                // custom data
                if (customData) {
                    var sCustomData = JSON.stringify(customData);
                    if (sCustomData.length < 4000) datasend.data = sCustomData;
                    // if (sCustomData.length < 4000) request += '&data': +sCustomData;
                }
                // Custom Variables, scope "visit"
                if (customVariables) {
                    var customVariablesStringified = JSON.stringify(customVariables);
                    // Don't sent empty custom variables {}
                    if (customVariablesStringified.length > 2) {
                        datasend._cvar = customVariablesStringified;
                        // request += '&_cvar': +encodeWrapper(customVariablesStringified);
                    }

                    // Don't save deleted custom variables in the cookie
                    for (i in customVariablesCopy) {
                        if (Object.prototype.hasOwnProperty.call(customVariablesCopy, i)) {
                            if (customVariables[i][0] === '' || customVariables[i][1] === '') {
                                delete customVariables[i];
                            }
                        }
                    }
                    setCookie(cvarname, JSON.stringify(customVariables), configSessionCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
                }
                //若为产生hashchange的点击，在发送h-link数据后清理掉pageIdBeforeHashChange
                if (request.action == "link-h") {
                    pageIdBeforeHashChange = null;
                }
                // update cookies
                setVisitorIdCookie(uuid, createTs, visitCount, nowTs, lastVisitTs, isDefined(currentEcommerceOrderTs) && String(currentEcommerceOrderTs).length ? currentEcommerceOrderTs : lastEcommerceOrderTs);

                setCookie(sesname, ses, configSessionCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
                request = buildPayload(datasend);
                // tracker plugin hook
                request += executePluginMethod(pluginMethod);


                return request;
            }


            /*
     * Log the page performance
     */
            function logiFramePerf() {
                var i_error = 0, _topTimer, _childTimer;
                if (windowAlias !== top) {
                    if (!configiFrameTrackingDisabled) {
                        top.postMessage({flag: 'ifr_get'}, 'huawei.com')
                    }
                    ;
                    _childTimer = setInterval(function () {
                        if (!ha_js_parent_sid) {

                            top.postMessage({flag: 'ifr_get'}, 'huawei.com');
                            if ((i_error += 1) >= 10) {
                                perf_ifrmae_succeed_flag = true;
                                clearInterval(_childTimer);
                            }
                            ;
                        }
                        ;
                    }, Math.ceil(Math.random() * 2000));
                } else {
                    _topTimer = setInterval(function () {
                        if (hasiFrame) {
                            perf_ifrmae_succeed_flag = true;
                            clearInterval(_topTimer);
                        }
                        ;
                    }, 300);
                    setTimeout(
                        function () {
                            hasiFrame = false;
                            perf_ifrmae_succeed_flag = true;
                            clearInterval(_topTimer);
                        }
                        , 10000);
                }
                ;
                addEventListener(windowAlias, 'message', function (event) {
                    switch (event.data.flag) {
                        case 'ifr_get':
                            var iFrameArray = [];
                            hasiFrame = true;
                            var parentMessage = {
                                ifr_siteId: ha_js_parent_sid,
                                ifr_pageId: ha_js_parent_pid,
                                ifr_time: dmpa_js_init_time,
                                ifr_url: document.location.href
                            };
                            if (configiFrameTrackingDisabled) {
                                parentMessage.flag = 'ifr_dis'
                            } else {
                                parentMessage.flag = 'ifr_set'
                            }
                            ;
                            event.source.postMessage(parentMessage, event.origin);
                            break;
                        case 'ifr_dis':
                            dis_parent = true;
                            perf_ifrmae_succeed_flag = true;
                            break;
                        case 'ifr_set':
                            var urlPattern = new RegExp('[.xml]', 'i');
                            if (urlPattern.test(document.referrer)) {
                                ha_js_parent_url = event.data.ifr_url;
                            } else {
                                ha_js_parent_url = document.referrer;
                            }
                            ;
                            if (event.data.ifr_siteId) {
                                dmpa_js_init_time = event.data.ifr_time;
                                ha_js_parent_sid = event.data.ifr_siteId;
                                ha_js_parent_pid = event.data.ifr_pageId;
                                perf_ifrmae_succeed_flag = true;
                                dis_parent = false
                            }
                            ;
                            break;
                    }
                }, false);
            };

            function logPerformance(customTitle, customData, dryrun) {
                /*cwx*/
                if (!configiFrameTrackingDisabled && !perf_ifrmae_succeed_flag) {
                    setTimeout(function () {
                        logPerformance(customTitle, customData, dryrun);
                    }, 100);
                    return;
                } else if (documentAlias.readyState != "complete") {
                    setTimeout(function () {
                        logPerformance(customTitle, customData, dryrun);
                    }, 100);
                    return;
                }
                perfInfo = perfInfo || getPerformance();
                if (!perfInfo || dryrun) return;

                if (fields['DMPAVersion'] === undefined) {//没有设定DMPA采集版本就是旧版本
                    var request = getRequest(mixin(perfInfo, {
                        action: 'pp',
                    }), customData, "performance");
                    sendRequest(request, configTrackerPause);
                } else {

                    var request = getRequest(mixin({}, {
                        action: 'trackPerformance',
                        pType: customTitle,
                    }), customData, "performance");
                    sendRequest(request, configTrackerPause);
                }

            }

            /**
             * 组装json对象
             */
            function getJsonData() {
                var _bfd_cookie = getbfdCookie();
                if (_bfd_cookie) {
                    _json.bfdid = _bfd_cookie
                } else {

                }
                return _json;
            }

            /*
     * Log the page view / visit
     */

            /*cwx*/
            function logPageView(data) {
                var now = new Date();
                fields["pageReadyTime"] = (new Date()).getTime();
                var _pv_timeout = 10;
                if (dmpa_source_this.parent != dmpa_source_this) {
                    _pv_timeout = 1000;
                }


                setTimeout(function () {

                    if (fields['DMPAVersion'] === undefined) {//未设定DMPA采集版本就是老版本
                        var request = getRequest(mixin({
                            'action': 'pv',
                        }, mapData(data)), null, 'log');

                    } else {
                        //截取url的方法
                        function getParameter(theParameter) {
                            var params = window.location.search.substr(1).split('&');
                            for (var i = 0; i < params.length; i++) {
                                var p = params[i].split('=');
                                if (p[0] == theParameter) {
                                    return decodeURIComponent(p[1]);
                                }
                            }
                            return false;
                        }

                        var url_src, url_mdm;
                        url_src = getParameter('utm_source') || 0;
                        url_mdm = getParameter('utm_medium') || 0;
                        var request = getRequest(mixin({
                                'action': 'trackPageView',
                            },
                            {
                                'trackSource': url_src,
                                'trackMedium': url_mdm,
                            }, data), null, 'log');
                    }


                    sendRequest(request, configTrackerPause);
                    //for Jalor异步加载页面
                    try {
                        if (typeof Jalor !== "object" || typeof Jalor.Page !== "object") {
                            return;
                        }
                        hwa_meld.before(Jalor.Page, ['forward', '_forward', 'forwardMethod', 'forwardIntervalMethod'], function (result) {
                            try {
                                urlBeforeHashChange = windowAlias.location.href;
                                pageIdBeforeHashChange = pageId;
                                urlRefBeforeHashChange = configReferrerUrl;
                                documentTileBeforeHashchange = configTitle;
                            } catch (e) {
                            }
                        });
                        hwa_meld.after(Jalor.Page, ['forward', '_forward', 'forwardMethod', 'forwardIntervalMethod'], function (result) {
                            try {
                                /*if((new Date().getTime() - asyn_pv_sendtime_dmpa < 200) || (new Date().getTime() - dmpa_js_init_time < 1000) ) {//小于1即指未发送过异步加载的pv的pv记录
                  return;
                }*/
                                if (((new Date().getTime() - dmpa_js_init_time) < 1000)) {
                                    return;
                                }
                                if (pageURLBeforeRegenerate != null && pageURLBeforeRegenerate == windowAlias.location.href) {
                                    return;//由于时间差等原因同一个pv触发了多次
                                } else {
                                    pageURLBeforeRegenerate = windowAlias.location.href;//用来判断是否从复发送，使用jalor框架的系统有些在一个页面打开里面既调用了forward,又调用了_forward
                                }
                                var sesname = getCookieName('ses'),
                                    _id = loadVisitorIdCookie(),
                                    _ses = getCookie(sesname),
                                    _uuid = _id[1];
                                pageId = hash(_uuid + _ses + (new Date() - 0));

                                fields["referrer"] = urlBeforeHashChange;
                                configReferrerUrl = urlBeforeHashChange;
                                fields["url"] = windowAlias.location.href;
                                configCustomUrl = windowAlias.location.href;
                                configTitle = documentAlias.title;
                                fields["page_hierarchy_before"] = fields["page_hierarchy"];
                                fields["page_hierarchy"] = null;
                                var haBIStructure = {};
                                jalorPageForwardFlag = true;
                                jalorPageForwardFlag4PV = true;
                                setTimeout(function () {
                                    logPageView(haBIStructure);
                                }, 500);

                                //约定：异步加载页面的pv加载完成时间需要动态更新
                                asyn_pv_sendtime_dmpa = new Date().getTime();
                                //异步页面第一个请求完成的时间
                                perf_ajaxpage_firstloadtime = 0;

                            } catch (e) {
                            }
                        });
                    } catch (e) {
                    }
                    ;

                }, _pv_timeout);


            }

            /*
     * Log the site search request
     */

            function logSiteSearch(type, data) {

                if (fields['DMPAVersion'] !== undefined) {//设定了DMPA采集版本就是新版本
                    var request1 = getRequest(mixin({
                        action: 'trackSiteSearch',
                        sType: type
                    }, data), null, 'sitesearch');
                    //var request = getRequest('search': + encodeWrapper(keyword) + (category ? '&search_cat': + encodeWrapper(category) : '') + (isDefined(resultsCount) ? '&search_count': + resultsCount : ''), customData, 'sitesearch');

                    sendRequest(request1, configTrackerPause);
                } else {
                    type = type == "click" ? "searchclick" : "search";

                    var request = getRequest(mixin({
                        action: type
                    }, mapData(data)), null, 'sitesearch');
                    //var request = getRequest('search': + encodeWrapper(keyword) + (category ? '&search_cat': + encodeWrapper(category) : '') + (isDefined(resultsCount) ? '&search_count': + resultsCount : ''), customData, 'sitesearch');

                    sendRequest(request, configTrackerPause);
                }

            }


            /*
     * Log the goal with the server
     */

            function logGoal(gData, data) {

                var request = getRequest(mixin(gData, {
                    'action': 'goal'
                }, mapData(data)), null, 'goal');
                sendRequest(request, configTrackerPause);
            }

            /*
     * Log the link or click with the server
     */

            function logLink(url, linkType, customData) {
                if (fields['DMPAVersion'] === undefined) {//老版本,才发送点击事件等
                    customData.data = configCustomData;
                    var request = getRequest(mixin(customData, {
                        "action": linkType
                    }), null, 'link');

                    sendRequest(request, configTrackerPause);
                }
            }

            /*
     * Browser prefix
     */

            function prefixPropertyName(prefix, propertyName) {
                if (prefix !== '') {
                    return prefix + propertyName.charAt(0).toUpperCase() + propertyName.slice(1);
                }

                return propertyName;
            }


            /*
     * Check for pre-rendered web pages, and log the page view/link/goal
     * according to the configuration and/or visibility
     *
     * @see http://dvcs.w3.org/hg/webperf/raw-file/tip/specs/PageVisibility/Overview.html
     */

            function trackCallback(callback) {
                var isPreRendered,
                    i,
                    // Chrome 13, IE10, FF10
                    prefixes = ['', 'webkit', 'ms', 'moz'],
                    prefix;

                if (!configCountPreRendered) {
                    for (i = 0; i < prefixes.length; i++) {
                        prefix = prefixes[i];

                        // does this browser support the page visibility API?
                        if (Object.prototype.hasOwnProperty.call(documentAlias, prefixPropertyName(prefix, 'hidden'))) {
                            // if pre-rendered, then defer callback until page visibility changes
                            if (documentAlias[prefixPropertyName(prefix, 'visibilityState')] === 'prerender') {
                                isPreRendered = true;
                            }
                            break;
                        }
                    }
                }

                if (isPreRendered) {
                    // note: the event name doesn't follow the same naming convention as vendor properties
                    addEventListener(documentAlias, prefix + 'visibilitychange', function ready() {
                        documentAlias.removeEventListener(prefix + 'visibilitychange', ready, false);
                        callback();
                        //setTimeout(callback,500);
                    });
                    return;
                }

                // configCountPreRendered === true || isPreRendered === false
                callback();
                //setTimeout(callback,500);
            }

            /*
     * Construct regular expression of classes
     */

            function getClassesRegExp(configClasses, defaultClass) {
                var i,
                    classesRegExp = '(^| )(hwa[_-]' + defaultClass;

                if (configClasses) {
                    for (i = 0; i < configClasses.length; i++) {
                        classesRegExp += '|' + configClasses[i];
                    }
                }

                classesRegExp += ')( |$)';

                return new RegExp(classesRegExp);
            }

            /*
     * Link or Download?
     */

            function getLinkType(className, href) {
                // does class indicate whether it is an (explicit/forced) outlink or a download?
                var downloadPattern = getClassesRegExp(configDownloadClasses, 'download'),
                    linkPattern = getClassesRegExp(configLinkClasses, 'link'),

                    // does file extension indicate that it is a download?
                    downloadExtensionsPattern = new RegExp('\\.(' + configDownloadExtensions + ')([?&#]|$)', 'i');

                // optimization of the if..elseif..else construct below
                return linkPattern.test(className) ?
                    'link' : (downloadPattern.test(className) || downloadExtensionsPattern.test(href) ? 'download' : 'link');
            }

            /**
             if heatmap is open, then call isParent, ommit map items
             */
            function isParentOrSelf(obj, parentObj) {
                while (obj != undefined && obj != null && obj.tagName.toUpperCase() != 'BODY') {
                    if (obj == parentObj) {
                        return true;
                    }
                    obj = obj.parentNode;
                }
                return false;
            }

            /*
     * Process clicks
     */
            function processClick(evt) {
                try {
                    var parentElement,
                        tag,
                        linkType,
                        // loop 4 times
                        _c = 3,
                        sourceElement = evt.target || evt.srcElement,
                        sourceElementOrginal = evt.target || evt.srcElement,
                        event = event || evt;

                    var mapContainer = document.getElementById("dmp_analytics_map");
                    if (mapContainer) {
                        return;
                    }

                    var ignorePattern = getClassesRegExp([configHaIgnoreClass], 'ignore');

                    if (ignorePattern.test(sourceElement.className)) return;

                    /*BEGIN 处理HWA自定义事件*/
                    var hwaClickPattern = getClassesRegExp([configHaClickClass], "hwa-click");
                    if (hwaClickPattern.test(sourceElement.className)) {
                        var attrs = sourceElement.attributes,
                            target = sourceElement.target;
                        if (attrs) {
                            if (attrs['hwa-opr-wf']) {
                                if (attrs['hwa-opr-wf-status'] && attrs['hwa-opr-wf-status'].value == "end") {
                                    var now = new Date();
                                    var wf = fields[attrs['hwa-opr-wf'].value] = fields[attrs['hwa-opr-wf'].value] || [];
                                    var duration = 0;
                                    if (wf.length > 0) {
                                        duration = now.getTime() - wf[0].t;
                                    }
                                    wf.push({
                                        't': now.getTime(),
                                        'opr': (attrs['hwa-func'] ? attrs['hwa-func'].value : ""),
                                        'duration': duration
                                    });
                                    var doc = sourceElement.ownerDocument || document, body = doc.body;
                                    doc = doc.documentElement;
                                    var haBIStructure = {
                                        'l_title': sourceElement.innerText ? sourceElement.innerText : sourceElement.title,
                                        'l_href': sourceHref,
                                        'l_target': target,
                                        'l_html': sourceElement.innerHTML,
                                        'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
                                        'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
                                        'rv4': getEleSelector(sourceElement)
                                    };
                                    haBIStructure['hier'] = getModuleHier(sourceElement);
                                    haBIStructure['opr_wf_d'] = duration;
                                    haBIStructure['opr_wf_n'] = attrs['hwa-opr-wf'].value;
                                    haBIStructure['opr_wf_s'] = attrs['hwa-opr-wf-status'].value;
                                    haBIStructure['data'] = wf;
                                    logLink(sourceElement.href, 'click', haBIStructure);
                                    delete fields[attrs['hwa-opr-wf'].value];
                                    return;
                                } else {
                                    var now = new Date();
                                    var wf = fields[attrs['hwa-opr-wf'].value] = fields[attrs['hwa-opr-wf'].value] || [];
                                    if (wf.length > 10) {
                                        delete fields[attrs['hwa-opr-wf'].value];
                                        return;
                                    }
                                    wf.push({
                                        't': now.getTime(),
                                        'opr': (attrs['hwa-func'] ? attrs['hwa-func'].value : "")
                                    });
                                    return;
                                }
                            } else if (attrs['hwa-biz-wf']) {
                                var now = new Date();
                                var doc = sourceElement.ownerDocument || document, body = doc.body;
                                doc = doc.documentElement;
                                var haBIStructure = {
                                    'l_title': sourceElement.innerText ? sourceElement.innerText : sourceElement.title,
                                    'l_href': sourceHref,
                                    'l_target': target,
                                    'l_html': sourceElement.innerHTML,
                                    'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
                                    'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
                                    'rv4': getEleSelector(sourceElement)
                                };
                                haBIStructure['hier'] = getModuleHier(sourceElement);
                                haBIStructure['biz_wf_n'] = attrs['hwa-biz-wf'].value;
                                haBIStructure['biz_wf_s_s'] = attrs['hwa-biz-wf-status'] ? attrs['hwa-biz-wf-status'].value : "";
                                haBIStructure['biz_wf_s_n'] = attrs['hwa-func'] ? attrs['hwa-func'].value : "";
                                logLink(sourceElement.href, 'click', haBIStructure);
                                return;
                            } else if (attrs['hwa-query-form']) {
                                //记录表单查询
                                var targetForm = attrs['hwa-query-form'].value;
                                if (!targetForm) return;

                                var doc = sourceElement.ownerDocument || document, body = doc.body;
                                doc = doc.documentElement;
                                var fills = [];
                                var hwaforms = document.getElementsByTagName("form");
                                var queryForm = null;
                                if (!hwaforms || hwaforms.length < 1) return;
                                for (var i = 0; i < hwaforms.length; i++) {
                                    if (hwaforms[i] && hwaforms[i].attributes["hwa-query-form-name"] && targetForm == hwaforms[i].attributes["hwa-query-form-name"].value && typeof document.getElementsByClassName != 'undefined') {
                                        var hwaFill = hwaforms[i].getElementsByClassName('hwa-query-fill');
                                        for (var j = 0; j < hwaFill.length; j++) {
                                            var i_id = hwaFill[j].attributes["id"] != null ? hwaFill[j].attributes["id"].value : '';
                                            var i_name = hwaFill[j].attributes["name"] != null ? hwaFill[j].attributes["name"].value : '';
                                            var i_value = hwaFill[j].value != null ? hwaFill[j].value : '';
                                            var i_ele = {};
                                            i_ele.id = i_id;
                                            i_ele.name = i_name;
                                            i_ele.value = i_value;
                                            fills.push(i_ele);
                                        }
                                        break;
                                    }
                                }
                                var haBIStructure = {
                                    'l_title': sourceElement.innerText ? sourceElement.innerText : null,
                                    'l_html': sourceElement.innerHTML,
                                    'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
                                    'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
                                    'rv1': sourceElementOrginal.attributes["id"] != null ? sourceElementOrginal.attributes["id"].value : null,
                                    'rv2': sourceElementOrginal.attributes["name"] != null ? sourceElementOrginal.attributes["name"].value : null,
                                    'rv4': getEleSelector(sourceElement),
                                    'data': JSON.stringify(fills)
                                };
                                haBIStructure['hier'] = getModuleHier(sourceElement);
                                logLink(sourceElement.href, 'click-query', haBIStructure);
                                return;
                            } else {
                                var doc = sourceElement.ownerDocument || document, body = doc.body;
                                doc = doc.documentElement;

                                var haBIStructure = {
                                    'l_title': sourceElement.innerText ? sourceElement.innerText : sourceElement.title,
                                    'l_href': sourceHref,
                                    'l_target': target,
                                    'l_html': sourceElement.innerHTML,
                                    'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
                                    'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
                                    'rv4': getEleSelector(sourceElement)
                                };
                                haBIStructure['hier'] = getModuleHier(sourceElement);
                                logLink(sourceElement.href, 'click', haBIStructure);
                                return;
                            }
                        }
                        return;
                    }
                    /*END 处理HWA自定义事件*/

                    while ((parentElement = sourceElement.parentNode) !== null && isDefined(parentElement) && isDefined(parentElement.tagName) && // buggy IE5.5
                    ((tag = sourceElement.tagName.toUpperCase()) !== 'A' && tag !== 'AREA') && _c--) {
                        sourceElement = parentElement;
                    }

                    if (isDefined(sourceElement.href) && sourceElement.href != "" && ((tag = sourceElement.tagName.toUpperCase()) == 'A' || tag == 'AREA')) {
                        // browsers, such as Safari, don't downcase hostname and href
                        var originalSourceHostName = sourceElement.hostname || getHostName(sourceElement.href),
                            sourceHostName = originalSourceHostName.toLowerCase(),
                            sourceHref = sourceElement.href.replace(originalSourceHostName, sourceHostName);
                        //scriptProtocol = new RegExp('^(javascript|vbscript|jscript|mocha|livescript|ecmascript|mailto):', 'i');
                        // ignore script pseudo-protocol links
                        //if (!scriptProtocol.test(sourceHref)) {
                        var attrs = sourceElement.attributes,
                            target = sourceElement.target,
                            onclick = sourceElement.onclick;

                        if (attrs) {
                            var doc = sourceElement.ownerDocument || document,
                                body = doc.body;
                            doc = doc.documentElement;

                            var custHWMicroFormatPattern = /^habi:(\w+)/i,
                                haBIStructure = {
                                    'l_title': ((sourceElement.title != null && sourceElement.title != "") ? sourceElement.title : sourceElement.innerText),
                                    'l_href': sourceHref,
                                    'l_target': target,
                                    'l_html': sourceElement.innerHTML,
                                    'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
                                    'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
                                    'rv4': getEleSelector(sourceElement)
                                },
                                result;
                            for (i = 0; i < sourceElement.attributes.length; i += 1) {
                                result = custHWMicroFormatPattern.exec(sourceElement.attributes[i].nodeName);
                                if (result) {
                                    var _name = result[1].toLowerCase();
                                    var _value = attrs[i].value;
                                    if (_name == "data") {
                                        result = {};

                                        try {
                                            result = JSON.parse(_value);
                                        } catch (e) {
                                        }

                                        haBIStructure.data = result;

                                        //mixin(haBIStructure, {data:result});
                                    }
                                    var _pTitlePattern = /^parenttitle([1-3]?)$/i;
                                    var _pTitleIdPattern = /^parenttitleid([1-3]?)$/i
                                    var match;

                                    if (_name === 'title') {
                                        haBIStructure.title = _value;
                                    } else if (_name === 'titleid') {
                                        var ele = documentAlias.getElementById(_value);
                                        if (ele) {
                                            haBIStructure.title = ele.childNodes[0].value.replace(/\n/g, '');
                                        }
                                    } else if ((match = _pTitlePattern.exec(_name))) {
                                        if (match[1].length < 1) {
                                            haBIStructure.pTitleL3 = _value;
                                        } else {
                                            haBIStructure['pTitleL' + match[1]] = _value;
                                        }
                                    } else if (match = _pTitleIdPattern.exec(_name)) {
                                        var ele = documentAlias.getElementById(_value);
                                        if (ele) {
                                            if (match[1].length < 1) {
                                                haBIStructure.pTitleL3 = ele.childNodes[0].value.replace(/\n/g, '');
                                            } else {
                                                haBIStructure['pTitleL' + match[1]] = ele.childNodes[0].value.replace(/\n/g, '');
                                            }
                                        }
                                    } else if (_name === 'btype') {
                                        haBIStructure['l_type'] = _value;
                                    } else if (_name === 'datacallback') {
                                        if (_value && _value.length > 0) {
                                            var custDataFunc = eval(_value);
                                            if (isFunction(custDataFunc)) {
                                                var custData = custDataFunc.apply(sourceElement);
                                                if (isObject(custData)) {
                                                    haBIStructure = mixin(haBIStructure, custData);
                                                    //haBIStructure.custData = JSON.stringify(custData);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        // track outlinks and all downloads
                        linkType = getLinkType(sourceElement.className, sourceHref);
                        if (linkType) {
                            // urldecode %xx
                            sourceHref = urldecode(sourceHref);
                            logLink(sourceHref, linkType, haBIStructure);
                            var href = sourceElement.getAttribute('href');
                            if ((!target || target == "_self") && href.indexOf("#") != 0 && href != location.href && href != (location.href + '#')) {
                                if (onclick != null && (onclick.toString().indexOf("return(false)") > -1 || onclick.toString().indexOf("return false") > -1 || onclick.toString().indexOf("return  false")) > -1) {
                                    //nothing to do
                                } else {

                                }
                            }
                        }
                        return;
                    }
                    /* 处理HREF为空的A标签且在_seft或_blank打开的点击 */
                    if (isDefined(sourceElement.target) && (sourceElement.target == "_self" || sourceElement.target == "_blank") && ((tag = sourceElement.tagName.toUpperCase()) == 'A' || tag == 'AREA')) {
                        var originalSourceHostName = sourceElement.hostname || getHostName(sourceElement.href),
                            sourceHostName = originalSourceHostName.toLowerCase(),
                            sourceHref = sourceElement.href.replace(originalSourceHostName, sourceHostName);
                        //scriptProtocol = new RegExp('^(javascript|vbscript|jscript|mocha|livescript|ecmascript|mailto):', 'i');

                        var doc = sourceElement.ownerDocument || document, body = doc.body;
                        doc = doc.documentElement;

                        haBIStructure = {
                            'l_title': ((sourceElement.title != null && sourceElement.title != "") ? sourceElement.title : sourceElement.innerText),
                            //'l_href': sourceHref,
                            'rv4': getEleSelector(sourceElement),
                            'l_target': target,
                            'l_html': sourceElement.innerHTML,
                            'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
                            'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0))
                        };
                        if (jalorPageForwardFlag) {
                            setTimeout(function () {
                                haBIStructure.l_href = windowAlias.location.href;
                                logLink(null, 'link-h', haBIStructure);
                                return;
                            }, 500);
                        } else {
                            logLink(null, 'link', haBIStructure);
                            jalorPageForwardFlag = false;
                        }


                    }
                    if (!Array.prototype.indexOf) {

                        Array.prototype.indexOf = function (searchElement, fromIndex) {

                            var k;

                            if (this == null) {
                                throw new TypeError('"this" is null or not defined');
                            }

                            var O = Object(this);

                            var len = O.length >>> 0;

                            if (len === 0) {
                                return -1;
                            }

                            var n = +fromIndex || 0;

                            if (Math.abs(n) === Infinity) {
                                n = 0;
                            }

                            if (n >= len) {
                                return -1;
                            }

                            k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

                            while (k < len) {
                                if (k in O && O[k] === searchElement) {
                                    return k;
                                }

                                k++;

                            }

                            return -1;

                        };

                    }


                    if (sourceElement.tagName.toUpperCase() == 'A' || getTagList().indexOf(sourceElementOrginal.tagName.toUpperCase()) != -1 || ((getTagList().indexOf("BUTTON")) != -1 && (sourceElementOrginal.tagName.toUpperCase() === 'INPUT' && sourceElementOrginal.type.toUpperCase() === 'BUTTON'))) {
                        var doc = sourceElement.ownerDocument || document, body = doc.body;
                        doc = doc.documentElement;

                        var title_t;
                        if (sourceElementOrginal.title != null && sourceElementOrginal.title != "") {
                            title_t = sourceElementOrginal.title;
                        } else if (sourceElementOrginal.attributes["value"] != null && sourceElementOrginal.attributes["value"].value) {
                            title_t = sourceElementOrginal.attributes["value"].value
                        } else {
                            title_t = sourceElementOrginal.innerText.substr(0, 100)
                        }
                        haBIStructure = {
                            'l_title': title_t,
                            'l_target': sourceElementOrginal,
                            'l_html': sourceElementOrginal.outerHTML.substr(0, 500),
                            'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
                            'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
                            't_d_1': sourceElementOrginal.tagName,
                            'rv1': sourceElementOrginal.attributes["id"] != null ? sourceElementOrginal.attributes["id"].value : null,
                            'rv2': sourceElementOrginal.attributes["name"] != null ? sourceElementOrginal.attributes["name"].value : null,
                            'rv4': getEleSelector(sourceElementOrginal)
                        };
                        logLink("", 'click', haBIStructure);
                        return;
                    }

                    if ("trackAll" === fields["trackType"]) {
                        //处理开通跟踪所有事件的网络的事件
                        var doc = sourceElement.ownerDocument || document, body = doc.body;
                        doc = doc.documentElement;

                        var title_t;
                        if (sourceElementOrginal.title != null && sourceElementOrginal.title != "") {
                            title_t = sourceElementOrginal.title;
                        } else if (sourceElementOrginal.attributes["value"] != null && sourceElementOrginal.attributes["value"].value) {
                            title_t = sourceElementOrginal.attributes["value"].value
                        } else {
                            title_t = sourceElementOrginal.innerText.substr(0, 100)
                        }
                        haBIStructure = {
                            'l_title': title_t,
                            'l_target': target,
                            'l_html': sourceElementOrginal.outerHTML.substr(0, 500),
                            'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
                            'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
                            'rv1': sourceElementOrginal.attributes["id"] != null ? sourceElementOrginal.attributes["id"].value : null,
                            'rv2': sourceElementOrginal.attributes["name"] != null ? sourceElementOrginal.attributes["name"].value : null,
                            'rv3': sourceElementOrginal.attributes["value"] != null ? sourceElementOrginal.attributes["value"].value : null,
                            'rv4': getEleSelectorByEvent(sourceElementOrginal)
                        };
                        logLink("", 'click-trackall', haBIStructure);
                        return;
                    }
                } catch (e) {
                }
            }

            function processKeydown(evt) {
                if ("trackAll" === fields["trackType"] && (evt.keyCode == 13 || evt.keyCode == 9)) {
                    try {
                        var sourceElement = evt.target || evt.srcElement, event = event || evt;
                        var doc = sourceElement.ownerDocument || document, body = doc.body;
                        doc = doc.documentElement;
                        var title_t;
                        if (sourceElement.title != null && sourceElement.title != "") {
                            title_t = sourceElement.title;
                        } else if (sourceElement.attributes["value"] != null && sourceElement.attributes["value"].value) {
                            title_t = sourceElement.attributes["value"].value
                        } else {
                            title_t = sourceElement.innerText.substr(0, 100)
                        }

                        var haBIStructure = {
                            'l_title': title_t,
                            'l_target': sourceElement.target,
                            'l_html': sourceElement.outerHTML.substr(0, 500),
                            'pagex': getElementX(sourceElement),
                            'pagey': getElementY(sourceElement),
                            'rv1': sourceElement.attributes["id"] != null ? sourceElement.attributes["id"].value : null,
                            'rv2': sourceElement.attributes["name"] != null ? sourceElement.attributes["name"].value : null,
                            'rv3': sourceElement.attributes["value"] != null ? sourceElement.attributes["value"].value : null
                        };
                        var request = getRequest(mixin({
                            'action': "keydown_" + evt.keyCode
                        }, haBIStructure));
                        sendRequest(request, configTrackerPause);
                    } catch (e) {
                    }
                }


            }

            function getElementX(sourceElement) {
                return sourceElement.getBoundingClientRect().left + Math.max(sourceElement.scrollLeft, document.body.scrollLeft);
            }

            function getElementY(sourceElement) {
                return sourceElement.getBoundingClientRect().top + Math.max(sourceElement.scrollTop, document.body.scrollTop);
            }


            function getModuleHier(sourceElement) {
                try {
                    var parent = sourceElement, hwaParentClass = getClassesRegExp("hwa-dc", "dc");
                    var levels = [], modules = [], tabs = [], func, module_hier;

                    for (var i = 0; i < 20; i++) {
                        if (!isDefined(parent) || parent == null) {
                            break;
                        }
                        if (parent.className != null && hwaParentClass.test(parent.className)) {
                            if (levels.length < 6 && isDefined(parent.attributes["hwa-hier"])) {
                                levels.push((parent.attributes["hwa-hier"].value || parent.attributes["hwa-hier"]));
                            }
                            if (modules.length < 3 && isDefined(parent.attributes["hwa-module"])) {
                                modules.push((parent.attributes["hwa-module"].value || parent.attributes["hwa-module"]));
                            }
                            if (tabs.length < 3 && isDefined(parent.attributes["hwa-tab"])) {
                                tabs.push((parent.attributes["hwa-tab"].value || parent.attributes["hwa-tab"]));
                            }
                        }
                        parent = parent.parentElement;
                    }
                    var levels_t;
                    for (var i = levels.length; i > 0; i--) {
                        levels_t = (levels_t == null ? "" : levels_t) + levels.pop() + "/";
                    }
                    if (levels_t != null) {
                        module_hier = "c:{" + levels_t + "}"
                    }

                    var modules_t;
                    for (var i = modules.length; i > 0; i--) {
                        modules_t = (modules_t == null ? "" : modules_t) + modules.pop() + "/";
                    }
                    if (modules_t != null) {
                        module_hier = "g:{" + modules_t + "}"
                    }

                    var tabs_t;
                    for (var i = tabs.length; i > 0; i--) {
                        tabs_t = (tabs_t == null ? "" : tabs_t) + tabs.pop() + "/";
                    }
                    if (tabs_t != null) {
                        module_hier = (module_hier == null ? "" : module_hier) + "t:{" + tabs_t + "}"
                    }

                    if (func == null && isDefined(sourceElement.attributes["hwa-func"])) {
                        func = "f:{" + (sourceElement.attributes["hwa-func"].value || sourceElement.attributes["hwa-func"]) + "}";
                    }


                    return (module_hier == null ? "" : module_hier) + func;
                } catch (e) {
                }
            }

            function getPageHierCurrent(sourceElement) {
                try {
                    var parentTemp = sourceElement;
                    if (!isDefined(parentTemp) || parentTemp == null) {
                        return;
                    }
                    var page_hier;
                    if (isDefined(parentTemp.attributes["hwa-hier"])) {
                        page_hier = "c:{" + (parentTemp.attributes["hwa-hier"].value || parentTemp.attributes["hwa-hier"]) + "}";
                    }
                    return page_hier;
                } catch (e) {

                }
            }


            function addClickListener(element, enable) {
                if (!linkTrackingInstalled) {
                    linkTrackingInstalled = true;
                    addEventListener(documentAlias, 'click', processClick, false);
                    addEventListener(windowAlias, 'keydown', processKeydown, false);
                }

            }

            /*
      get flash version
    */

            function _getFlashVersion() {
                var a, b, c;
                if ((c = (c = window["navigator"]) ? c.plugins : da) && c["length"])
                    for (var d = 0; d < c["length"] && !b; d++) {
                        var e = c[d];
                        -1 < e["name"]["indexOf"]("Shockwave Flash") && (b = e.description)
                    }
                if (!b) try {
                    a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7"), b = a.GetVariable("$version")
                } catch (g) {
                }
                if (!b) try {
                    a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6"), b = "WIN 6,0,21,0", a.AllowScriptAccess = "always", b = a.GetVariable("$version")
                } catch (ca) {
                }
                if (!b) try {
                    a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash"), b = a.GetVariable("$version")
                } catch (l) {
                }
                b && (a = b["match"](/[\d]+/g)) && 3 <= a["length"] && (b = a[0] + "." + a[1] + " r" + a[2]);
                return b || ""
            };

            /*
     * Browser features (plugins, resolution, cookies)
     */

            function detectBrowserFeatures() {
                var i,
                    mimeType,
                    pluginMap = {
                        // document types
                        pdf: 'application/pdf',

                        // media players
                        qt: 'video/quicktime',
                        realp: 'audio/x-pn-realaudio-plugin',
                        wma: 'application/x-mplayer2',

                        // interactive multimedia
                        dir: 'application/x-director',
                        fla: 'application/x-shockwave-flash',

                        // RIA
                        java: 'application/x-java-vm',
                        gears: 'application/x-googlegears',
                        ag: 'application/x-silverlight'
                    },
                    devicePixelRatio = (new RegExp('Mac OS X.*Safari/')).test(navigatorAlias.userAgent) ? windowAlias.devicePixelRatio || 1 : 1;

                //if (!((new RegExp('MSIE')).test(navigatorAlias.userAgent))) {
                // general plugin detection
                if (navigatorAlias.mimeTypes && navigatorAlias.mimeTypes.length) {
                    for (i in pluginMap) {
                        if (Object.prototype.hasOwnProperty.call(pluginMap, i)) {
                            mimeType = navigatorAlias.mimeTypes[pluginMap[i]];
                            browserFeatures[i] = (mimeType && mimeType.enabledPlugin) ? '1' : '0';
                        }
                    }
                }

                // Safari and Opera
                // IE6/IE7 navigator.javaEnabled can't be aliased, so test directly
                if (typeof navigator.javaEnabled !== 'unknown' && isDefined(navigatorAlias.javaEnabled) && navigatorAlias.javaEnabled()) {
                    browserFeatures.java = '1';
                }

                // Firefox
                if (isFunction(windowAlias.GearsFactory)) {
                    browserFeatures.gears = '1';
                }

                if (!browserFeatures.fla) {
                    var _flav = _getFlashVersion();
                    if (_flav) browserFeatures.fla = '1';
                }

                // other browser features
                browserFeatures.cookie = hasCookies();
                //}

                // screen resolution
                // - only Apple reports screen.* in device-independent-pixels (dips)
                // - devicePixelRatio is always 2 on MacOSX+Retina regardless of resolution set in Display Preferences
                browserFeatures.res = screenAlias.width * devicePixelRatio + 'x' + screenAlias.height * devicePixelRatio;
            }

            /*<DEBUG>*/

            /*
     * Register a test hook. Using eval() permits access to otherwise
     * privileged members.
     */

            function registerHook(hookName, userHook) {
                var hookObj = null;

                if (isString(hookName) && !isDefined(registeredHooks[hookName]) && userHook) {
                    if (isObject(userHook)) {
                        hookObj = userHook;
                    } else if (isString(userHook)) {
                        try {
                            eval('hookObj =' + userHook);
                        } catch (e) {
                        }
                    }

                    registeredHooks[hookName] = hookObj;
                }
                return hookObj;
            }

            /*</DEBUG>*/

            /************************************************************
             * Constructor
             ************************************************************/

            /*
     * initialize tracker
     */
            detectBrowserFeatures();
            //updateDomainHash();

            /*<DEBUG>*/
            /*
     * initialize test plugin
     */
            executePluginMethod('run', registerHook);
            /*</DEBUG>*/

            /************************************************************
             * Public data and methods
             ************************************************************/
            return {
                /*<DEBUG>*/
                /*
       * Test hook accessors
       */
                hook: registeredHooks,
                getHook: function (hookName) {
                    return registeredHooks[hookName];
                },
                // set fields
                set: function (name, value) {
                    if (typeof name == "object") {
                        configCustomData = name.data;
                        mixin(fields, name);
                        if (name.siteId && windowAlias == top) {
                            ha_js_parent_sid = fields["siteId"];
                        }
                        ;
                        if (name.tag_list) {
                            mapFields.tag_list = fields["tag_list"];
                        }
                    } else if (typeof name == "string") {
                        fields[name] = value;
                        if (name == 'siteId' && windowAlias == top) {
                            ha_js_parent_sid = fields["siteId"];
                        }
                    }
                },
                // get field value
                get: function (name) {
                    return fields[name];
                },
                getACTIONS: function () {
                    return ACTION;
                },
                /*</DEBUG>*/

                /**
                 * Get visitor ID (from first party cookie)
                 *
                 * @return string Visitor ID in hexits (or null, if not yet known)
                 */
                getVisitorId: function () {
                    return (loadVisitorIdCookie())[1];
                },

                /**
                 * Get the visitor information (from first party cookie)
                 *
                 * @return array
                 */
                getVisitorInfo: function () {
                    return loadVisitorIdCookie();
                },

                /**
                 * Get the Attribution information, which is an array that contains
                 * the Referrer used to reach the site as well as the campaign name and keyword
                 * It is useful only when used in conjunction with Tracker API function setAttributionInfo()
                 * To access specific data point, you should use the other functions getAttributionReferrer* and getAttributionCampaign*
                 *
                 * @return array Attribution array, Example use:
                 *   1) Call JSON.stringify(piwikTracker.getAttributionInfo())
                 *   2) Pass this json encoded string to the Tracking API (jsp or java client): setAttributionInfo()
                 */
                getAttributionInfo: function () {
                    return loadReferrerAttributionCookie();
                },

                /**
                 * Get the Campaign name that was parsed from the landing page URL when the visitor
                 * landed on the site originally
                 *
                 * @return string
                 */
                getAttributionCampaignName: function () {
                    return loadReferrerAttributionCookie()[0];
                },

                /**
                 * Get the Campaign keyword that was parsed from the landing page URL when the visitor
                 * landed on the site originally
                 *
                 * @return string
                 */
                getAttributionCampaignKeyword: function () {
                    return loadReferrerAttributionCookie()[1];
                },

                /**
                 * Get the time at which the referrer (used for Goal Attribution) was detected
                 *
                 * @return int Timestamp or 0 if no referrer currently set
                 */
                getAttributionReferrerTimestamp: function () {
                    return loadReferrerAttributionCookie()[2];
                },

                /**
                 * Get the full referrer URL that will be used for Goal Attribution
                 *
                 * @return string Raw URL, or empty string '' if no referrer currently set
                 */
                getAttributionReferrerUrl: function () {
                    return loadReferrerAttributionCookie()[3];
                },

                /**
                 * Specify the HA server URL
                 *
                 * @param string trackerUrl
                 */

                setTrackerUrl: function (trackerUrl) {
                    configTrackerUrl = configTrackerUrl = ("https:" == location.protocol ? "https://" : "http://") + trackerUrl;
                },


                /**
                 * Specify the site ID
                 *
                 * @param int|string siteId
                 */
                setSiteId: function (siteId) {
                    configTrackerSiteId = siteId;
                    if (windowAlias == top) {
                        ha_js_parent_sid = siteId;
                    }
                    ;
                },

                /**
                 * Specify hierarchy
                 *
                 * @param int|string siteId
                 */

                setHierarchy: function (hierarchy) {
                    configHierarchy = hierarchy;
                },
                /**
                 * Specify the visitor ID
                 *
                 * @param int|string siteId
                 */
                setUUID: function (uuid, encrypt) {
                    visitorUUID = uuid;
                    visitorUUIDEncrypt = encrypt;
                },

                /**
                 * Pass custom data to the server
                 *
                 * Examples:
                 *   tracker.setCustomData(object);
                 *   tracker.setCustomData(key, value);
                 *
                 * @param mixed key_or_obj
                 * @param mixed opt_value
                 */
                setCustomData: function (key_or_obj, opt_value) {
                    if (isObject(key_or_obj)) {
                        configCustomData = key_or_obj;
                    } else {
                        if (!configCustomData) {
                            configCustomData = [];
                        }
                        configCustomData[key_or_obj] = opt_value;
                    }
                },

                /**
                 * Get custom data
                 *
                 * @return mixed
                 */
                getCustomData: function () {
                    return configCustomData;
                },

                /**
                 * Set custom variable within this visit
                 *
                 * @param int index
                 * @param string name
                 * @param string value
                 * @param string scope Scope of Custom Variable:
                 *                     - "visit" will store the name/value in the visit and will persist it in the cookie for the duration of the visit,
                 *                     - "page" will store the name/value in the page view.
                 */
                setCustomVariable: function (index, name, value, scope) {
                    var toRecord;
                    if (!isDefined(scope)) {
                        scope = 'visit';
                    }
                    if (index > 0) {
                        name = isDefined(name) && !isString(name) ? String(name) : name;
                        value = isDefined(value) && !isString(value) ? String(value) : value;
                        toRecord = [name.slice(0, customVariableMaximumLength), value.slice(0, customVariableMaximumLength)];
                        if (scope === 'visit' || scope === 2) { /* GA compatibility/misuse */
                            loadCustomVariables();
                            customVariables[index] = toRecord;
                        } else if (scope === 'page' || scope === 3) { /* GA compatibility/misuse */
                            customVariablesPage[index] = toRecord;
                        }
                    }
                },

                /**
                 * Get custom variable
                 *
                 * @param int index
                 * @param string scope Scope of Custom Variable: "visit" or "page"
                 */
                getCustomVariable: function (index, scope) {
                    var cvar;

                    if (!isDefined(scope)) {
                        scope = "visit";
                    }

                    if (scope === "page" || scope === 3) {
                        cvar = customVariablesPage[index];
                    } else if (scope === "visit" || scope === 2) {
                        loadCustomVariables();
                        cvar = customVariables[index];
                    }

                    if (!isDefined(cvar) || (cvar && cvar[0] === '')) {
                        return false;
                    }

                    return cvar;
                },

                /**
                 * Delete custom variable
                 *
                 * @param int index
                 */
                deleteCustomVariable: function (index, scope) {
                    // Only delete if it was there already
                    if (this.getCustomVariable(index, scope)) {
                        this.setCustomVariable(index, '', '', scope);
                    }
                },

                /**
                 * Set delay for link tracking (in milliseconds)
                 *
                 * @param int delay
                 */
                setLinkTrackingTimer: function (delay) {
                    configTrackerPause = delay;
                },

                /**
                 * Set list of file extensions to be recognized as downloads
                 *
                 * @param string extensions
                 */
                setDownloadExtensions: function (extensions) {
                    configDownloadExtensions = extensions;
                },

                /**
                 * Specify additional file extensions to be recognized as downloads
                 *
                 * @param string extensions
                 */
                addDownloadExtensions: function (extensions) {
                    configDownloadExtensions += '|' + extensions;
                },

                /**
                 * Set array of domains to be treated as local
                 *
                 * @param string|array hostsAlias
                 */
                setDomains: function (hostsAlias) {
                    configHostsAlias = isString(hostsAlias) ? [hostsAlias] : hostsAlias;
                    configHostsAlias.push(domainAlias);
                },

                /**
                 * Set array of classes to be ignored if present in link
                 *
                 * @param string|array ignoreClasses
                 */
                setIgnoreClasses: function (ignoreClasses) {
                    configIgnoreClasses = isString(ignoreClasses) ? [ignoreClasses] : ignoreClasses;
                },

                /**
                 * Set request method
                 *
                 * @param string method GET or POST; default is GET
                 */
                setRequestMethod: function (method) {
                    configRequestMethod = method || 'GET';
                },

                /**
                 * Override referrer
                 *
                 * @param string url
                 */
                setReferrerUrl: function (url) {
                    configReferrerUrl = url;
                },

                getReferrerUrl: function () {
                    return configReferrerUrl;
                },

                /**
                 * Override url
                 *
                 * @param string url
                 */
                setCustomUrl: function (url) {
                    configCustomUrl = resolveRelativeReference(locationHrefAlias, url);
                },

                getCurrentUrl: function () {
                    return configCustomUrl || locationHrefAlias;
                },

                /**
                 * Override document.title
                 *
                 * @param string title
                 */
                setDocumentTitle: function (title) {
                    configTitle = title;
                },
                getDocumentTitle: function () {
                    return configTitle;
                },

                /**
                 * Set array of classes to be treated as downloads
                 *
                 * @param string|array downloadClasses
                 */
                setDownloadClasses: function (downloadClasses) {
                    configDownloadClasses = isString(downloadClasses) ? [downloadClasses] : downloadClasses;
                },

                /**
                 * Set array of classes to be treated as outlinks
                 *
                 * @param string|array linkClasses
                 */
                setLinkClasses: function (linkClasses) {
                    configLinkClasses = isString(linkClasses) ? [linkClasses] : linkClasses;
                },

                /**
                 * Set array of campaign name parameters
                 *
                 * @see http://piwik.org/faq/how-to/#faq_120
                 * @param string|array campaignNames
                 */
                setCampaignNameKey: function (campaignNames) {
                    configCampaignNameParameters = isString(campaignNames) ? [campaignNames] : campaignNames;
                },

                /**
                 * Set array of campaign keyword parameters
                 *
                 * @see http://piwik.org/faq/how-to/#faq_120
                 * @param string|array campaignKeywords
                 */
                setCampaignKeywordKey: function (campaignKeywords) {
                    configCampaignKeywordParameters = isString(campaignKeywords) ? [campaignKeywords] : campaignKeywords;
                },

                /**
                 * Strip hash tag (or anchor) from URL
                 *
                 * @param bool enableFilter
                 */
                discardHashTag: function (enableFilter) {
                    configDiscardHashTag = enableFilter;
                },

                /**
                 * Set first-party cookie name prefix
                 *
                 * @param string cookieNamePrefix
                 */
                setCookieNamePrefix: function (cookieNamePrefix) {
                    configCookieNamePrefix = cookieNamePrefix;
                    // Re-init the Custom Variables cookie
                    customVariables = getCustomVariablesFromCookie();
                },

                /**
                 * Set first-party cookie domain
                 *
                 * @param string domain
                 */
                setCookieDomain: function (domain) {
                    configCookieDomain = domainFixup(domain);
                    //updateDomainHash();
                },

                /**
                 * Set first-party cookie path
                 *
                 * @param string domain
                 */
                setCookiePath: function (path) {
                    configCookiePath = path;
                    //updateDomainHash();
                },

                /**
                 * Set visitor cookie timeout (in seconds)
                 *
                 * @param int timeout
                 */
                setVisitorCookieTimeout: function (timeout) {
                    configVisitorCookieTimeout = timeout * 1000;
                },

                /**
                 * Set session cookie timeout (in seconds)
                 *
                 * @param int timeout
                 */
                setSessionCookieTimeout: function (timeout) {
                    configSessionCookieTimeout = timeout * 1000;
                },

                /**
                 * Set referral cookie timeout (in seconds)
                 *
                 * @param int timeout
                 */
                setReferralCookieTimeout: function (timeout) {
                    configReferralCookieTimeout = timeout * 1000;
                },

                /**
                 * Set conversion attribution to first referrer and campaign
                 *
                 * @param bool if true, use first referrer (and first campaign)
                 *             if false, use the last referrer (or campaign)
                 */
                setConversionAttributionFirstReferrer: function (enable) {
                    configConversionAttributionFirstReferrer = enable;
                },

                /**
                 * Disables all cookies from being set
                 *
                 * Existing cookies will be deleted on the next call to track
                 */
                disableCookies: function () {
                    configCookiesDisabled = true;
                    browserFeatures.cookie = '0';
                },

                /*
       */
                disableiFrameTracking: function (flag) {
                    configiFrameTrackingDisabled = flag;
                    if (configiFrameTrackingDisabled) {
                        ha_js_parent_sid = null;
                    } else {
                        if (windowAlias == top) {
                            ha_js_parent_sid = fields["siteId"];
                        }
                        ;
                    }
                    ;
                },


                /**
                 * Handle do-not-track requests
                 *
                 * @param bool enable If true, don't track if user agent sends 'do-not-track' header
                 */
                setDoNotTrack: function (enable) {
                    var dnt = navigatorAlias.doNotTrack || navigatorAlias.msDoNotTrack;
                    configDoNotTrack = enable && (dnt === 'yes' || dnt === '1');

                    // do not track also disables cookies and deletes existing cookies
                    if (configDoNotTrack) {
                        this.disableCookies();
                    }
                },

                setDoNotTrack_dyx: function () {
                    asyncTracker = null;
                },

                /**
                 * Add click listener to a specific link element.
                 * When clicked, HA will log the click automatically.
                 *
                 * @param DOMElement element
                 * @param bool enable If true, use pseudo click-handler (mousedown+mouseup)
                 */
                addListener: function (element, enable) {
                    addClickListener(element, enable);
                },

                /**
                 * Install link tracker
                 *
                 * The default behaviour is to use actual click events. However, some browsers
                 * (e.g., Firefox, Opera, and Konqueror) don't generate click events for the middle mouse button.
                 *
                 * To capture more "clicks", the pseudo click-handler uses mousedown + mouseup events.
                 * This is not industry standard and is vulnerable to false positives (e.g., drag events).
                 *
                 * There is a Safari/Chrome/Webkit bug that prevents tracking requests from being sent
                 * by either click handler.  The workaround is to set a target attribute (which can't
                 * be "_self", "_top", or "_parent").
                 *
                 * @see https://bugs.webkit.org/show_bug.cgi?id=54783
                 *
                 * @param bool enable If true, use pseudo click-handler (mousedown+mouseup)
                 */
                enableLinkTracking: function () {
                    if (hasLoaded) {
                        // the load event has already fired, add the click listeners now
                        addClickListener();
                    } else {
                        // defer until page has loaded
                        registeredOnLoadHandlers.push(function () {
                            addClickListener();
                        });
                    }
                },

                /**
                 * Set heartbeat (in seconds)
                 *
                 * @param int minimumVisitLength
                 * @param int heartBeatDelay
                 */
                setHeartBeatTimer: function (minimumVisitLength, heartBeatDelay) {
                    var now = new Date();

                    configMinimumVisitTime = now.getTime() + minimumVisitLength * 1000;
                    configHeartBeatTimer = heartBeatDelay * 1000;
                },

                /**
                 * Frame buster
                 */
                killFrame: function () {
                    if (windowAlias.location !== windowAlias.top.location) {
                        windowAlias.top.location = windowAlias.location;
                    }
                },

                /**
                 * Redirect if browsing offline (aka file: buster)
                 *
                 * @param string url Redirect to this URL
                 */
                redirectFile: function (url) {
                    if (windowAlias.location.protocol === 'file:') {
                        windowAlias.location = url;
                    }
                },

                /**
                 * Count sites in pre-rendered state
                 *
                 * @param bool enable If true, track when in pre-rendered state
                 */
                setCountPreRendered: function (enable) {
                    configCountPreRendered = enable;
                },

                setAutoSendPV: function (flag) {
                    autoSendPV = flag;
                },

                setAutoLinkTracking: function (flag) {
                    autoLinkTracking = flag;
                },

                setAutoSendPP: function (flag) {
                    autoSendPP = flag;
                },


                /**
                 * Trigger a goal
                 *
                 * @param int|string idGoal
                 * @param int|float customRevenue
                 * @param mixed customData
                 */
                trackGoal: function (idGoal, customRevenue, data) {
                    trackCallback(function () {
                        logGoal({
                            'idgoal': idGoal,
                            'revenue': customRevenue
                        }, data);
                    });
                },

                /**
                 * Manually log a click from your own code
                 *
                 * @param string sourceUrl
                 * @param string linkType
                 * @param mixed customData
                 */
                trackLink: function (sourceUrl, linkType, customData) {
                    trackCallback(function () {
                        logLink(sourceUrl, linkType, customData);
                    });
                },

                // 设定 DMPA 采集版本
                setDMPAVersion: function (version) {
                    mixin(fields, {'DMPAVersion': version});
                    //同时设定默认配置
                    /*autoSendPP = false;
                    autoSendPV = false;*/
                    autoLinkTracking = false;

                    //设定没有cookie，不跟踪
                    if (!navigator.cookieEnabled) {
                        console.log("关闭跟踪");
                        this.setDoNotTrack_dyx();
                    }

                },
                getDMPAVersion: function (version) {
                    console.log("DMPAVersion:" + fields['DMPAVersion']);
                    return fields['DMPAVersion'];
                },
                getJSSource: function () {
                    return "5.0";
                },
                //5.1 事件
                trackEvent: function (eType, data) {
                    trackCallback(function () {
                        if (fields['DMPAVersion'] === undefined) {//未设定DMPA采集版本就是老版本
                            var request = getRequest(mixin({'action': eType}, mapData(data)));
                            sendRequest(request, configTrackerPause);
                        } else {
                            var request = getRequest(mixin({
                                'action': 'trackEvent',
                                'eType': eType,
                            }, data));
                            sendRequest(request, configTrackerPause);
                        }

                    });
                },


                /**
                 * Log visit to this page
                 *
                 * @param string customTitle
                 * @param mixed customData
                 */
                //5.2 页面浏览
                trackPageView: function (data) {
                    if (isOverlaySession(configTrackerSiteId)) {
                        trackCallback(function () {
                            injectOverlayScripts(configTrackerUrl, configApiUrl, configTrackerSiteId);
                        });
                    } else {
                        trackCallback(function () {
                            logPageView(data);
                        });
                    }
                },
                //新增 5.3 电商
                trackECommerce: function (ecType, ecData) {
                    var newData = JSON.stringify(ecData);
                    trackCallback(function () {
                        var request = getRequest({
                            'action': 'trackECommerce',
                            'ecType': ecType,
                            'ecData': newData
                        });
                        sendRequest(request, configTrackerPause);
                    });
                },


                trackAjax: function (data) {
                    //perf_event_q   perf_send_status
                    //sleeping:非工作状态；ready:待命状态，周期一到就上报数据；sending:正在上报；上报完成，些时如果队列仍有数据则状态置为ready，如为空则置为sleep
                    //第一次监控到Ajax请求后4秒钟往后台上报一次数据


                    //g_hwa_disable_trackajax: 全局变量，在引入ha.js前设置，设置为true时可以禁止hwa收集ajax性能数据
                    if (typeof g_hwa_disable_trackajax != 'undefined' && g_hwa_disable_trackajax == true) {
                        return;
                    }

                    if (window.addEventListener && window.XMLHttpRequest) {
                        var _XMLHttpRequest = window.XMLHttpRequest;
                        window.XMLHttpRequest = function () {
                            var e, req, startTime, _open, _send, _datalist, _isignore_url;
                            req = new _XMLHttpRequest;
                            try {
                                _open = req.open;
                                req.open = function (type, url, async) {
                                    if (!perf_url_ignore_p.test(url)) {
                                        var e;
                                        try {
                                            startTime = null;
                                            _datalist = {};
                                            //进入服务请求前的hook
                                            var s_begin = function (_event) {
                                                try {
                                                    /*req.readyState
                        0: request not initialized
                        1: server connection established
                        2: request received
                        3: processing request
                        4: request finished and response is ready
                      */
                                                    var dur, codeMapping;
                                                    codeMapping = {
                                                        1: 'sending',
                                                        2: 'headers',
                                                        3: 'waiting',
                                                        4: 'receiving'
                                                    };
                                                    if (startTime == null) {
                                                        startTime = new Date().getTime();
                                                    }
                                                    if (req.readyState == 2) {
                                                        var _now = new Date().getTime();
                                                        _datalist.st = startTime;
                                                        _datalist.url = url;

                                                        if (perf_ajaxpage_firstloadtime == 0 && _now - asyn_pv_sendtime_dmpa < 5000) {
                                                            //标识当前 ajax请求是否属于ajax异步加载页面对应的ajax请求,约定：页面打开时2秒内发起的请求都属于异步加载页面的一部分
                                                            req.ajaxpage_flag = 1;
                                                            perf_ajaxpage_in = ++perf_ajaxpage_in;
                                                            if (perf_ajaxpage_min_time == 0) {
                                                                perf_ajaxpage_min_time = startTime;
                                                            }
                                                            ajaxthreshold_time = ((perf_ajaxpage_firstloadtime - asyn_pv_sendtime_dmpa) > 2000) ? 5000 : 3000;

                                                        } else if (perf_ajaxpage_firstloadtime > 0 && (_now - perf_ajaxpage_firstloadtime <= ajaxthreshold_time)) {
                                                            req.ajaxpage_flag = 1;
                                                            perf_ajaxpage_in = ++perf_ajaxpage_in;
                                                        }
                                                        return;
                                                    }
                                                    if (startTime == null) {
                                                        return;
                                                    }
                                                    dur = new Date().getTime() - startTime;
                                                    (_datalist[codeMapping[req.readyState]]) = dur;
                                                } catch (e) {
                                                }
                                            }
                                            req.addEventListener('readystatechange', s_begin, false);

                                            //服务请求完成后的hook
                                            var s_end = function () {
                                                try {
                                                    if (typeof _datalist != 'undefined' && typeof _datalist.url != 'undefined') {
                                                        //请求结束
                                                        var _now = new Date().getTime();
                                                        _datalist.tt = (_now - startTime);
                                                        //发送结果
                                                        if (perf_ajaxpage_firstloadtime == 0) {
                                                            perf_ajaxpage_firstloadtime = _now;
                                                        }


                                                        if (req.ajaxpage_flag == 1) {
                                                            perf_ajaxpage_out = ++perf_ajaxpage_out;
                                                            perf_ajaxpage_max_time = _now;
                                                        }
                                                        perf_event_q.push(_datalist);
                                                        if (perf_send_status == 'sleeping') {
                                                            //如果还未开始批量上报性能数据，则触发一个4秒后执行的上报任务
                                                            perf_send_status = 'ready';
                                                            setTimeout(sendPerfQueue, 4000);
                                                        }
                                                    }

                                                } catch (e) {
                                                }
                                                ;
                                            }
                                            req.addEventListener('loadend', s_end, false);
                                        } catch (_error) {
                                            e = _error;
                                            hwaLog("HWA error monitoring XHR open call->" + e.message);
                                        }
                                    }
                                    return _open.apply(req, arguments);
                                };
                                _send = req.send;
                                req.send = function () {
                                    return _send.apply(req, arguments);
                                };
                            } catch (_error) {
                                e = _error;
                                hwaLog("HWA error monitoring XHR->" + e.message);
                            }
                            return req;
                        };
                    } else {//不支持addEventListener的浏览器必须是使用了jQuery进行ajax调用的才能统一监控服务请求性能
                        if (typeof $ != 'undefined' || typeof jQuery != 'undefined') {
                            try {
                                var _jq = (typeof $ != 'undefined' && $(document) != null && typeof $(document).ajaxSend == 'function') ? $ : jQuery;
                                if (_jq && typeof _jq(document).ajaxSend == 'function') {

                                    _jq(document).ajaxSend(function (a, b, c) {
                                        try {
                                            if (!perf_url_ignore_p.test(c.url)) {

                                                var _now = new Date().getTime();
                                                if (perf_ajaxpage_firstloadtime == 0 && _now - asyn_pv_sendtime_dmpa < 5000) {
                                                    //标识当前 ajax请求是否属于ajax异步加载页面对应的ajax请求,约定：页面打开时2秒内发起的请求都属于异步加载页面的一部分
                                                    c.ajaxpage_flag = 1;
                                                    perf_ajaxpage_in = ++perf_ajaxpage_in;
                                                    if (perf_ajaxpage_min_time == 0) {
                                                        perf_ajaxpage_min_time = _now;
                                                    }
                                                    ajaxthreshold_time = ((perf_ajaxpage_firstloadtime - asyn_pv_sendtime_dmpa) > 2000) ? 5000 : 3000;

                                                } else if (perf_ajaxpage_firstloadtime > 0 && (_now - perf_ajaxpage_firstloadtime <= ajaxthreshold_time)) {
                                                    c.ajaxpage_flag = 1;
                                                    perf_ajaxpage_in = ++perf_ajaxpage_in;

                                                }
                                                c.st = _now;
                                            }
                                        } catch (e) {
                                        }
                                        ;
                                    });
                                    _jq(document).ajaxComplete(function (a, b, c) {
                                        try {
                                            if (!perf_url_ignore_p.test(c.url)) {
                                                var _now = new Date().getTime();
                                                var _dur = _now - c.st;
                                                if (perf_ajaxpage_firstloadtime == 0) {
                                                    perf_ajaxpage_firstloadtime = _now;
                                                }
                                                var haBIStructure = {
                                                    'url': c.url,
                                                    'st': c.st,
                                                    //'url': configCustomUrl || locationHrefAlias,
                                                    tt: _dur
                                                };
                                                if (c.ajaxpage_flag == 1) {
                                                    perf_ajaxpage_out = ++perf_ajaxpage_out;
                                                    perf_ajaxpage_max_time = _now;
                                                }
                                                //把当前请求性能数据存放到队列
                                                if (typeof _dur == 'number') {
                                                    perf_event_q.push(haBIStructure);
                                                    if (perf_send_status == 'sleeping') {
                                                        //如果还未开始批量上报性能数据，则触发一个4秒后执行的上报任务
                                                        perf_send_status = 'ready';
                                                        setTimeout(sendPerfQueue, 4000);
                                                    }
                                                }

                                            }
                                        } catch (e) {
                                        }
                                        ;
                                    });
                                }
                            } catch (e) {
                            }
                            ;
                        }

                    }
                },

                /**
                 * Log visit to this page
                 *
                 * @param string customTitle
                 * @param mixed customData
                 */
                trackPerformance: function (customTitle, customData, dryrun) {
                    if (!isOverlaySession(configTrackerSiteId)) {
                        trackCallback(function () {
                            logPerformance(customTitle, customData, dryrun);
                        });
                    }
                },

                trackiFramePerformance: function () {
                    logiFramePerf()
                },
                /**
                 * Log special pageview: Internal search
                 *
                 * @param string customTitle
                 * @param mixed customData
                 */
                /*
        keyword搜索关键字
        category搜索类别，例如w3的搜人、所有、应用等
        filters搜索过滤器选择
        resultCount 本次搜索返回的结果集大小
        id 一次搜索 动作的唯一标识
        pageIndex 点击翻页的页码
        clickIndex 点击结果在结果集中的序号
        clickTitle 点击结果的标题
        clickUrl  点击结果的URL
      */
                trackSiteSearch: function (type, data) {

                    trackCallback(function () {
                        logSiteSearch(type, data);
                    });
                },


                getNewPageId: function () {
                    var sesname = getCookieName('ses'),
                        id = loadVisitorIdCookie(),
                        ses = getCookie(sesname),
                        uuid = id[1];
                    return hash(uuid + ses + (new Date() - 0));
                },

                f: [],

                //execute the command queue
                execQ: function (aArgs) {
                    var exec = function (args) {
                        try {
                            var method = args[0];
                            if (this[method] && this[method].apply) {
                                method !== "exec" && this[method].apply(this, [].slice.call(args, 1));
                                return !0;
                            }
                        } catch (e) {
                        }

                    };
                    aArgs = this.f.concat(aArgs);
                    for (this.f = []; aArgs.length > 0; aArgs.shift()) {
                        !exec.call(this, aArgs[0]) && this.f.push(aArgs[0]);
                    }
                    //this.f = this.f.concat(aArgs);
                }

            };
        }

        /*
   * HA Tracker class End
   */


        /************************************************************
         * Proxy object
         * - this allows the caller to continue push()'ing to _haq
         *   after the Tracker has been initialized and loaded
         ************************************************************/

        /*
    function TrackerProxy() {
      return {
        push: apply
      };
    }
    */

        /************************************************************
         * Constructor
         ************************************************************/

        // initialize the HA singleton
        addEventListener(windowAlias, 'beforeunload', beforeUnloadHandler, false);
        addReadyListener();

        Date.prototype.getTimeAlias = Date.prototype.getTime;

        asyncTracker = new Tracker();

        asyncTracker.execQ(windowAlias.dmpa.q);
        //asyncTracker.trackiFramePerformance(); 用处不明，先注释下


        //var noAutoSendPV = windowAlias.dmpa.q && windowAlias.dmpa.q.autoSendPV && windowAlias.dmpa.q.autoSendPV == false;
        // use settimeout to delay exec of pv auto send
        setTimeout(function () {
            if (autoSendPV) {
                asyncTracker.trackPageView();
            }
            if (autoSendPP) {
                asyncTracker.trackPerformance(null, null);
            }

        }, 0);

        if (autoLinkTracking) asyncTracker.enableLinkTracking();

        //4
        asyncTracker.trackAjax();

        // replace initialization array with proxy object
        if(!windowAlias.dmpa){//防止与老2.0冲突，不存在再赋值
            windowAlias.dmpa = function () {
                asyncTracker.execQ([arguments]);
            };
        }
        if(windowAlias.dmpa.toString().indexOf("asyncTracker.execQ")==-1){
            windowAlias.dmpa = function () {
                asyncTracker.execQ([arguments]);
            };
        }


        /************************************************************
         * Public data and methods
         ************************************************************/
        return {
            /**
             * Add plugin
             *
             * @param string pluginName
             * @param Object pluginObj
             */
            addPlugin: function (pluginName, pluginObj) {
                plugins[pluginName] = pluginObj;
            },

            /**
             * Get Tracker (factory method)
             *
             * @param string piwikUrl
             * @param int|string siteId
             * @return Tracker
             */
            getTracker: function () {
                return new Tracker();
            },

            /**
             * Get internal asynchronous tracker object
             *
             * @return Tracker
             */
            getAsyncTracker: function () {
                return asyncTracker;
            }
        };
    }());

var myNewAsyncTracker = DMPA5.getTracker();
window.dmpa5 = function () {
    myNewAsyncTracker.execQ([arguments]);
};
window.dmpa5('setDMPAVersion', 2);


