var dmpa_js_init_time = (typeof window.performance != 'undefined') ?  window.performance.timing.navigationStart : (typeof hwa_pv_start_time != 'undefined' ? hwa_pv_start_time : new Date().getTime());
var asyn_pv_sendtime_dmpa = dmpa_js_init_time;
var dmpa_prototype_options_dmpaid;
var dmpa_prototype_options_gdomain;

function isIE(){
if (window.navigator.userAgent.indexOf("MSIE") > -1) 
return true; 
else 
return false; 
}
function isIE8(){
if (window.navigator.userAgent.indexOf("MSIE") > -1 && window.navigator.userAgent.indexOf("Trident/4") > -1) 
return true; 
else 
return false; 
}
function isFF(){
if(window.navigator.userAgent.indexOf('Firefox') > -1)
  return true;
else 
  return false;
}

if(isFF()){ 
try{
    if(typeof(HTMLElement)!="undefined" && !window.opera){        
        HTMLElement.prototype.__defineGetter__("innerText",function () {  
        return this.textContent; 
       } 
      );  
      
      HTMLElement.prototype.__defineSetter__("innerText",function (setValue) {  
        this.textContent = setValue;    
      }); 
     }
}catch(e){}
} 

var dmpa_source_this = this;

(function (windowAlias) {
meld.before =         adviceApi('before');
meld.around =         adviceApi('around');
meld.on =             adviceApi('on');
meld.afterReturning = adviceApi('afterReturning');
meld.afterThrowing =  adviceApi('afterThrowing');
meld.after =          adviceApi('after');

meld.joinpoint =      joinpoint;

meld.add =            function() { return meld.apply(null, arguments); };

function meld(target, pointcut, aspect) {
  var pointcutType, remove;

  if(arguments.length < 3) {
    return addAspectToFunction(target, pointcut);
  } else {
    if (isArray(pointcut)) {
      remove = addAspectToAll(target, pointcut, aspect);
    } else {
      pointcutType = typeof pointcut;

      if (pointcutType === 'string') {
        if (typeof target[pointcut] === 'function') {
          remove = addAspectToMethod(target, pointcut, aspect);
        }

      } else if (pointcutType === 'function') {
        remove = addAspectToAll(target, pointcut(target), aspect);

      } else {
        remove = addAspectToMatches(target, pointcut, aspect);
      }
    }

    return remove;
  }

}

function Advisor(target, func) {

  var orig, advisor, advised;

  this.target = target;
  this.func = func;
  this.aspects = {};

  orig = this.orig = target[func];
  advisor = this;

  advised = this.advised = function() {
    var context, joinpoint, args, callOrig, afterType;  
    if(this instanceof advised) {
      context = objectCreate(orig.prototype);
      callOrig = function (args) {
        return applyConstructor(orig, context, args);
      };

    } else {
      context = this;
      callOrig = function(args) {
        return orig.apply(context, args);
      };

    }

    args = slice.call(arguments);
    afterType = 'afterReturning';
    joinpoint = pushJoinpoint({
      target: context,
      method: func,
      args: args
    });

    try {
      advisor._callSimpleAdvice('before', context, args);

      try {
        joinpoint.result = advisor._callAroundAdvice(context, func, args, callOrigAndOn);
      } catch(e) {
        joinpoint.result = joinpoint.exception = e;
        afterType = 'afterThrowing';
      }

      args = [joinpoint.result];

      callAfter(afterType, args);
      callAfter('after', args);

      if(joinpoint.exception) {
        throw joinpoint.exception;
      }

      return joinpoint.result;

    } finally {
      popJoinpoint();
    }

    function callOrigAndOn(args) {
      var result = callOrig(args);
      advisor._callSimpleAdvice('on', context, args);

      return result;
    }

    function callAfter(afterType, args) {
      advisor._callSimpleAdvice(afterType, context, args);
    }
  };

  defineProperty(advised, '_advisor', { value: advisor, configurable: true });
}

Advisor.prototype = {
  _callSimpleAdvice: function(adviceType, context, args) {

    var iterator, advices;

    advices = this.aspects[adviceType];
    if(!advices) {
      return;
    }

    iterator = iterators[adviceType];

    iterator(this.aspects[adviceType], function(aspect) {
      var advice = aspect.advice;
      advice && advice.apply(context, args);
    });
  },

  _callAroundAdvice: function (context, method, args, applyOriginal) {
    var len, aspects;

    aspects = this.aspects.around;
    len = aspects ? aspects.length : 0;
    function callNext(i, args) {
      return i < 0
        ? applyOriginal(args)
        : callAround(aspects[i].advice, i, args);
    }

    function callAround(around, i, args) {
      var proceedCalled, joinpoint;

      proceedCalled = 0;
      joinpoint = pushJoinpoint({
        target: context,
        method: method,
        args: args,
        proceed: proceedCall,
        proceedApply: proceedApply,
        proceedCount: proceedCount
      });

      try {
        return around.call(context, joinpoint);
      } finally {
        popJoinpoint();
      }

      function proceedCount() {
        return proceedCalled;
      }

      function proceedCall() {
        return proceed(arguments.length > 0 ? slice.call(arguments) : args);
      }
      function proceedApply(newArgs) {
        return proceed(newArgs || args);
      }
      function proceed(args) {
        proceedCalled++;
        return callNext(i - 1, args);
      }

    }

    return callNext(len - 1, args);
  },

  add: function(aspect) {

    var advisor, aspects;

    advisor = this;
    aspects = advisor.aspects;

    insertAspect(aspects, aspect);

    return {
      remove: function () {
        var remaining = removeAspect(aspects, aspect);
        if (!remaining) {
          advisor.remove();
        }
      }
    };
  },
  remove: function () {
    delete this.advised._advisor;
    this.target[this.func] = this.orig;
  }
};

Advisor.get = function(target, methodName) {
  if(!(methodName in target)) {
    return;
  }

  var advisor, advised;

  advised = target[methodName];

  if(typeof advised !== 'function') {
    throw new Error('Advice can only be applied to functions: ' + methodName);
  }

  advisor = advised._advisor;
  if(!advisor) {
    advisor = new Advisor(target, methodName);
    target[methodName] = advisor.advised;
  }

  return advisor;
};

function addAspectToFunction(func, aspect) {
  var name, placeholderTarget;

  name = func.name || '_';

  placeholderTarget = {};
  placeholderTarget[name] = func;

  addAspectToMethod(placeholderTarget, name, aspect);

  return placeholderTarget[name];

}

function addAspectToMethod(target, method, aspect) {
  var advisor = Advisor.get(target, method);

  return advisor && advisor.add(aspect);
}

function addAspectToAll(target, methodArray, aspect) {
  var removers, added, f, i;

  removers = [];
  i = 0;

  while((f = methodArray[i++])) {
    added = addAspectToMethod(target, f, aspect);
    added && removers.push(added);
  }

  return createRemover(removers);
}

function addAspectToMatches(target, pointcut, aspect) {
  var removers = [];
 
  for (var p in target) {
    if (typeof target[p] == 'function' && pointcut.test(p)) {
      removers.push(addAspectToMethod(target, p, aspect));
    }
  }

  return createRemover(removers);
}

function createRemover(removers) {
  return {
    remove: function() {
      for (var i = removers.length - 1; i >= 0; --i) {
        removers[i].remove();
      }
    }
  };
}

function adviceApi(type) {
  return function(target, method, adviceFunc) {
    var aspect = {};

    if(arguments.length === 2) {
      aspect[type] = method;
      return meld(target, aspect);
    } else {
      aspect[type] = adviceFunc;
      return meld(target, method, aspect);
    }
  };
}

function insertAspect(aspectList, aspect) {
  var adviceType, advice, advices;

  for(adviceType in iterators) {
    advice = aspect[adviceType];

    if(advice) {
      advices = aspectList[adviceType];
      if(!advices) {
        aspectList[adviceType] = advices = [];
      }

      advices.push({
        aspect: aspect,
        advice: advice
      });
    }
  }
}
function removeAspect(aspectList, aspect) {
  var adviceType, advices, remaining;

  remaining = 0;

  for(adviceType in iterators) {
    advices = aspectList[adviceType];
    if(advices) {
      remaining += advices.length;

      for (var i = advices.length - 1; i >= 0; --i) {
        if (advices[i].aspect === aspect) {
          advices.splice(i, 1);
          --remaining;
          break;
        }
      }
    }
  }

  return remaining;
}

function applyConstructor(C, instance, args) {
  try {
    defineProperty(instance, 'constructor', {
      value: C,
      enumerable: false
    });
  } catch(e) {
  }

  C.apply(instance, args);

  return instance;
}

var currentJoinpoint, joinpointStack,
  ap, prepend, append, iterators, slice, isArray, defineProperty, objectCreate;

joinpointStack = [];

ap      = Array.prototype;
prepend = ap.unshift;
append  = ap.push;
slice   = ap.slice;

isArray = Array.isArray || function(it) {
  return Object.prototype.toString.call(it) == '[object Array]';
};

defineProperty = definePropertyWorks()
  ? Object.defineProperty
  : function(obj, prop, descriptor) {
  obj[prop] = descriptor.value;
};

objectCreate = Object.create ||
  (function() {
    function F() {}
    return function(proto) {
      F.prototype = proto;
      var instance = new F();
      F.prototype = null;
      return instance;
    };
  }());

iterators = {
  before: forEachReverse,
  around: false
};

iterators.on
  = iterators.afterReturning
  = iterators.afterThrowing
  = iterators.after
  = forEach;

function forEach(array, func) {
  for (var i = 0, len = array.length; i < len; i++) {
    func(array[i]);
  }
}

function forEachReverse(array, func) {
  for (var i = array.length - 1; i >= 0; --i) {
    func(array[i]);
  }
}

function joinpoint() {
  return currentJoinpoint;
}

function pushJoinpoint(newJoinpoint) {
  joinpointStack.push(currentJoinpoint);
  return currentJoinpoint = newJoinpoint;
}

function popJoinpoint() {
  return currentJoinpoint = joinpointStack.pop();
}

function definePropertyWorks() {
  try {
    return 'x' in Object.defineProperty({}, 'x', {});
  } catch (e) { /* return falsey */ }
}

windowAlias.hwa_meld = meld;


})(window);

if (typeof JSON !== 'object') {
JSON = {};
}

(function() {
'use strict';

function f(n) {
  return n < 10 ? '0' + n : n;
}

if (typeof Date.prototype.toJSON !== 'function') {

  Date.prototype.toJSON = function(key) {

    return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;
  };

  String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function(key) {
    return this.valueOf();
  };
}

var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
  escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
  gap,
  indent,
  meta = { 
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '"': '\\"',
    '\\': '\\\\'
  },
  rep;

function quote(string) {
  escapable.lastIndex = 0;
  return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
    var c = meta[a];
    return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
  }) + '"' : '"' + string + '"';
}

function str(key, holder) {

  var i, 
    k, 
    v, 
    length,
    mind = gap,
    partial,
    value = holder[key];
  if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
    value = value.toJSON(key);
  }
  if (typeof rep === 'function') {
    value = rep.call(holder, key, value);
  }
  switch (typeof value) {
    case 'string':
      return quote(value);

    case 'number':

      return isFinite(value) ? String(value) : 'null';

    case 'boolean':
    case 'null':
      return String(value);
    case 'object':
      if (!value) {
        return 'null';
      }
      gap += indent;
      partial = [];

      if (Object.prototype.toString.apply(value) === '[object Array]') {
        length = value.length;
        for (i = 0; i < length; i += 1) {
          partial[i] = str(i, value) || 'null';
        }

        v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
        gap = mind;
        return v;
      }
      if (rep && typeof rep === 'object') {
        length = rep.length;
        for (i = 0; i < length; i += 1) {
          if (typeof rep[i] === 'string') {
            k = rep[i];
            v = str(k, value);
            if (v) {
              partial.push(quote(k) + (gap ? ': ' : ':') + v);
            }
          }
        }
      } else {
        for (k in value) {
          if (Object.prototype.hasOwnProperty.call(value, k)) {
            v = str(k, value);
            if (v) {
              partial.push(quote(k) + (gap ? ': ' : ':') + v);
            }
          }
        }
      }
      v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
      gap = mind;
      return v;
  }
}

if (typeof JSON.stringify !== 'function') {
  JSON.stringify = function(value, replacer, space) {
    var i;
    gap = '';
    indent = '';
    if (typeof space === 'number') {
      for (i = 0; i < space; i += 1) {
        indent += ' ';
      }
    } else if (typeof space === 'string') {
      indent = space;
    }
    rep = replacer;
    if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
      throw new Error('JSON.stringify');
    }
    return str('', {
      '': value
    });
  };
}

if (typeof JSON.parse !== 'function') {
  JSON.parse = function(text, reviver) {
    var j;

    function walk(holder, key) {
      var k, v, value = holder[key];
      if (value && typeof value === 'object') {
        for (k in value) {
          if (Object.prototype.hasOwnProperty.call(value, k)) {
            v = walk(value, k);
            if (v !== undefined) {
              value[k] = v;
            } else {
              delete value[k];
            }
          }
        }
      }
      return reviver.call(holder, key, value);
    }
    text = String(text);
    cx.lastIndex = 0;
    if (cx.test(text)) {
      text = text.replace(cx, function(a) {
        return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      });
    }
    if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
      .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
      .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
      j = eval('(' + text + ')');
      return typeof reviver === 'function' ? walk({
        '': j
      }, '') : j;
    }

    throw new SyntaxError('JSON.parse');
  };
}
}(window));
var

DMPA = DMPA || (function() {
"use strict";

var expireDateTime,

  plugins = {},

  documentAlias = document,
  navigatorAlias = navigator,
  screenAlias = screen,
  windowAlias = window,

  pageId = null,

  pageIdBeforeHashChange = null,

  jalorPageForwardFlag = false,

  jalorPageForwardFlag4PV = false,

  urlBeforeHashChange = null,

  urlRefBeforeHashChange = null,
  


  configiFrameTrackingDisabled = false,
  dis_parent  =  false,

  documentTileBeforeHashchange = null,

  hasLoaded = false,
  registeredOnLoadHandlers = [],

  registeredOnUnloadHandlers = [],

  encodeWrapper = windowAlias.encodeURIComponent,
  decodeWrapper = windowAlias.decodeURIComponent,
  urldecode = unescape,
  asyncTracker,
  perfInfo,
  i;

function isDefined(property) {
  return 'undefined' !== typeof property;
}
function hwaLog(message) {
  if (typeof console != 'undefined' && typeof console.log != 'undefined') {
    console.log(message);
  }

}

function isFunction(property) {
  return typeof property === 'function';
}

function isObject(property) {
  return typeof property === 'object';
}

function isString(property) {
  return typeof property === 'string' || property instanceof String;
}

function mixin() {
  var target = arguments[0];
  var len = arguments.length;
  for(var i=0;i<len;i++){
    var src = arguments[i];
    if ((typeof src).toLowerCase() != "object") return;
    for (var p in src) {
      if(typeof src[p] != 'undefined' && src[p] != 'undefined'){
            target[p] = src[p];
        }
    }
  }
  return target;
}

function preventDefault(e) {
  e.preventDefault && e.preventDefault();
  e.returnValue = false;
}

function apply() {
  var i, f, parameterArray;

  for (i = 0; i < arguments.length; i += 1) {
    parameterArray = arguments[i];
    f = parameterArray.shift();

    if (isString(f)) {
      asyncTracker[f].apply(asyncTracker, parameterArray);
    } else {
      f.apply(asyncTracker, parameterArray);
    }
  }
}

    function getEleIndex(target) {
      var parentElement = target.parentElement
      var index = ""
      var tagCountMap = {}
      var targetTagName = target.tagName
      for (var i = 0; i < parentElement.childElementCount; i++) {
        var childEle = parentElement.children[i]
        var childEleTagName = childEle.tagName
        if(tagCountMap[childEleTagName]==undefined){
          tagCountMap[childEleTagName] = 0
        }else{
          if (tagCountMap[childEleTagName]>-1) {
            tagCountMap[childEleTagName] = tagCountMap[childEleTagName] + 1
          }
        }
        var isSameEle = childEle.isEqualNode(target)
            &&(childEle.offsetTop==target.offsetTop
            &&childEle.offsetLeft==target.offsetLeft)

        if (isSameEle) {
          index = ":eq(" + tagCountMap[childEleTagName] + ")";
          return index
        }
      }

      return index
    }

    function getSingleSelector(target) {
      var targetId = target["id"]
      var parentElement = target.parentElement
      var singleEle
      if (targetId) {
        singleEle = "#" + targetId
      } else {
        var isHasMultiChild = parentElement.childElementCount > 1
        var index = ""
        if (isHasMultiChild) {
          index = getEleIndex(target)
        }
        var classList = "";
        singleEle = target.tagName.toLocaleLowerCase() + index + classList
      }
      return singleEle
    }
    function getEleSelector(srcEle) {
      var path = ""
      var target = srcEle
      while (target.parentElement) {
        var parentElement = target.parentElement
        var targetId = target["id"]
        var singleEle = getSingleSelector(target)
        path = singleEle + ">" + path
        if(targetId){
          break
        }else{
          target = parentElement
        }
      }
      path = path.substr(0, path.length - 1)
      return path
    }
    function getEleSelectorByEvent(evt) {
      var target = evt.target

      return getEleSelector(target)
    }

function addEventListener(element, eventType, eventHandler, useCapture) {
  if (element.attachEvent) {
    element.attachEvent('on' + eventType, (function (el) {
      return function() {
        eventHandler.call(el, window.event);
      };
    }(element)));
  } else {
     element.addEventListener(eventType, eventHandler, useCapture);
  }
  element = null;
  return true;
}

function removeEventListener(element, eventType, eventHandler) {
  if (element.removeEventListener) {
    element.removeEventListener(eventType, eventHandler);
    return true;
  }

  if (element.detachEvent) {
    return element.detachEvent('on' + eventType, eventHandler);
  }

  element['on' + eventType] = null;
}

function executePluginMethod(methodName, callback) {
  var result = '',
    i,
    pluginMethod;

  for (i in plugins) {
    if (Object.prototype.hasOwnProperty.call(plugins, i)) {
      pluginMethod = plugins[i][methodName];
      if (isFunction(pluginMethod)) {
        result += pluginMethod(callback);
      }
    }
  }

  return result;
}
function beforeUnloadHandler() {
  var now;

  executePluginMethod('unload');

  for (i = 0; i < registeredOnUnloadHandlers.length; i++) {
    registeredOnUnloadHandlers[i]();
  }

  if (expireDateTime) {
    do {
      now = new Date();
    } while (now.getTimeAlias() < expireDateTime && expireDateTime - now.getTimeAlias()<1000);
  }
}

function loadHandler() {
  if (!hasLoaded) {
    hasLoaded = true;
    executePluginMethod('load');
    for (var i = 0; i < registeredOnLoadHandlers.length; i++) {
      registeredOnLoadHandlers[i]();
    }
  }
  return true;
}

function hashchangeHandler() {
}

function addReadyListener() {
  var _timer;

  if (documentAlias.attachEvent) {
      var readyFunc = function () {
        if (documentAlias.readyState === 'complete') {
          documentAlias.detachEvent('onreadystatechange', readyFunc);
          loadHandler(true);
        }
      };
       documentAlias.attachEvent('onreadystatechange', readyFunc);
       if (documentAlias.readyState === 'complete') {
          documentAlias.detachEvent('onreadystatechange', readyFunc);
          loadHandler(true);
        }
  } else if (documentAlias.addEventListener) {
      addEventListener(documentAlias, 'DOMContentLoaded', function ready() {
          documentAlias.removeEventListener('DOMContentLoaded', ready, false);
          loadHandler();
      });
  }
  if(typeof documentAlias.readyState !='undefined'){
      _timer = setInterval(function () {
          if (hasLoaded || /loaded|complete/.test(documentAlias.readyState)) {
              clearInterval(_timer);
              loadHandler();
          }
      }, 10);
  }
  addEventListener(windowAlias, 'load', loadHandler, false);
  addEventListener(windowAlias, 'hashchange', hashchangeHandler, false);

  
}

function loadScript(src, onLoad) {
    var script = documentAlias.createElement('script');

    script.type = 'text/javascript';
    script.src = src;

    if (script.readyState) {
        script.onreadystatechange = function () {
            var state = this.readyState;

            if (state === 'loaded' || state === 'complete') {
                script.onreadystatechange = null;
                onLoad();
            }
        };
    } else {
        script.onload = onLoad;
    }

    documentAlias.getElementsByTagName('head')[0].appendChild(script);
}

function getReferrer() {
  var referrer = '';
  try {
    referrer = windowAlias.top.document.referrer;
  } catch (e) {
    if (windowAlias.parent) {
      try {
        referrer = windowAlias.parent.document.referrer;
      } catch (e2) {
        referrer = '';
      }
    }
  }
  if (referrer === '') {
    referrer = documentAlias.referrer;
  }
  return referrer;
}

function getProtocolScheme(url) {
  var e = new RegExp('^([a-z]+):'),
    matches = e.exec(url);

  return matches ? matches[1] : null;
}

function getHostName(url) {
  var e = new RegExp('^(?:(?:https?|ftp):)/*(?:[^@]+@)?([^:/#]+)'),
    matches = e.exec(url);
  return matches ? matches[1] : url;
}

function getParameter(url, name) {
  var e = new RegExp('^(?:https?|ftp)(?::/*(?:[^?]+)[?])([^#]+)'),
    matches = e.exec(url),
    f = new RegExp('(?:^|&)' + name + '=([^&]*)'),
    result = matches ? f.exec(matches[1]) : 0;
  return result ? decodeWrapper(result[1]) : '';
}

function utf8_encode(argString) {
  return urldecode(encodeWrapper(argString));
}


function sha1(str) {
  var
  rotate_left = function(n, s) {
    return (n << s) | (n >>> (32 - s));
  },

    cvt_hex = function(val) {
      var str = '',
        i,
        v;

      for (i = 7; i >= 0; i--) {
        v = (val >>> (i * 4)) & 0x0f;
        str += v.toString(16);
      }
      return str;
    },

    blockstart,
    i,
    j,
    W = [],
    H0 = 0x67452301,
    H1 = 0xEFCDAB89,
    H2 = 0x98BADCFE,
    H3 = 0x10325476,
    H4 = 0xC3D2E1F0,
    A,
    B,
    C,
    D,
    E,
    temp,
    str_len,
    word_array = [];

  str = utf8_encode(str);
  str_len = str.length;

  for (i = 0; i < str_len - 3; i += 4) {
    j = str.charCodeAt(i) << 24 | str.charCodeAt(i + 1) << 16 | str.charCodeAt(i + 2) << 8 | str.charCodeAt(i + 3);
    word_array.push(j);
  }

  switch (str_len & 3) {
    case 0:
      i = 0x080000000;
      break;
    case 1:
      i = str.charCodeAt(str_len - 1) << 24 | 0x0800000;
      break;
    case 2:
      i = str.charCodeAt(str_len - 2) << 24 | str.charCodeAt(str_len - 1) << 16 | 0x08000;
      break;
    case 3:
      i = str.charCodeAt(str_len - 3) << 24 | str.charCodeAt(str_len - 2) << 16 | str.charCodeAt(str_len - 1) << 8 | 0x80;
      break;
  }

  word_array.push(i);

  while ((word_array.length & 15) !== 14) {
    word_array.push(0);
  }

  word_array.push(str_len >>> 29);
  word_array.push((str_len << 3) & 0x0ffffffff);

  for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {
    for (i = 0; i < 16; i++) {
      W[i] = word_array[blockstart + i];
    }

    for (i = 16; i <= 79; i++) {
      W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    }

    A = H0;
    B = H1;
    C = H2;
    D = H3;
    E = H4;

    for (i = 0; i <= 19; i++) {
      temp = (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
      E = D;
      D = C;
      C = rotate_left(B, 30);
      B = A;
      A = temp;
    }

    for (i = 20; i <= 39; i++) {
      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
      E = D;
      D = C;
      C = rotate_left(B, 30);
      B = A;
      A = temp;
    }

    for (i = 40; i <= 59; i++) {
      temp = (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
      E = D;
      D = C;
      C = rotate_left(B, 30);
      B = A;
      A = temp;
    }

    for (i = 60; i <= 79; i++) {
      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
      E = D;
      D = C;
      C = rotate_left(B, 30);
      B = A;
      A = temp;
    }

    H0 = (H0 + A) & 0x0ffffffff;
    H1 = (H1 + B) & 0x0ffffffff;
    H2 = (H2 + C) & 0x0ffffffff;
    H3 = (H3 + D) & 0x0ffffffff;
    H4 = (H4 + E) & 0x0ffffffff;
  }

  temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);
  return temp.toLowerCase();
}

function urlFixup(hostName, href, referrer) {
  if (hostName === 'translate.googleusercontent.com') { // Google
    if (referrer === '') {
      referrer = href;
    }
    href = getParameter(href, 'u');
    hostName = getHostName(href);
  } else if (hostName === 'cc.bingj.com' || // Bing
    hostName === 'webcache.googleusercontent.com' || // Google
    hostName.slice(0, 5) === '74.6.') { // Yahoo (via Inktomi 74.6.0.0/16)
    href = documentAlias.links[0].href;
    hostName = getHostName(href);
  }

  return [hostName, href, referrer];
}


function domainFixup(domain) {
    var domain = (location.hostname + "/").match(/[\w-]+\.(com|info|net|org|me|mobi|hk|us|biz|xxx|ca|mx|tv|ws|am|asia|at|be|bz|cc|co|de|nom|es|eu|fm|fr|gs|firm|gen|ind|in|it|jobs|jp|ms|nl|nu|se|tc|tk|idv|tw|vg|gov|cn|ha)(\.(cn|hk|jp|tw|kr|mo|uk|ag|es|co|nz|in|br|bz|mx))*\//gi);
    dmpa_prototype_options_gdomain=domain=domain ? 0 < domain.length ? domain[0].substr(0, domain[0].length - 1) : void 0 : document.domain
    
    return domain   
}


function titleFixup(title) {
  if (!isString(title)) {
    title = title.text || '';
    var tmp = documentAlias.getElementsByTagName('title');
    if (tmp && isDefined(tmp[0])) {
      title = tmp[0].text;
    }
  }
  return title;
}

function getPiwikUrlForOverlay(trackerUrl, apiUrl) {
    if (apiUrl) {
        return apiUrl;
    }

    if (trackerUrl.slice(-5) === '/hwa/') {
        trackerUrl = trackerUrl.slice(0, trackerUrl.length - 5);
    }

    return trackerUrl;
}

function isOverlaySession(configTrackerSiteId) {
    var windowName = 'Piwik_Overlay';
    var referrerRegExp = new RegExp('\/redirect\\?module=Overlay&action=startOverlaySession'
                       + '&idSite=([^&]+)&period=([^&]+)&date=([^&]+)&url=([^&]+)$');

    var match = referrerRegExp.exec(documentAlias.referrer);

    if (match) {
        var idsite = match[1];

        if (idsite !== String(configTrackerSiteId)) {
            return false;
        }
        var period = match[2],
            date = match[3];
        windowAlias.name = windowName + '###' + period + '###' + date;
    }
    var windowNameParts = windowAlias.name.split('###');

    return windowNameParts.length === 3 && windowNameParts[0] === windowName;
}

function injectOverlayScripts(configTrackerUrl, configApiUrl, configTrackerSiteId) {
    var windowNameParts = windowAlias.name.split('###'),
        period = windowNameParts[1],
        date = windowNameParts[2],
        piwikUrl = getPiwikUrlForOverlay(configTrackerUrl, configApiUrl);

    loadScript(
        piwikUrl + 'resource/scripts/client/client.js?v=1',
        function () {
            Piwik_Overlay_Client.initialize(piwikUrl, configTrackerSiteId, period, date);
        }
    );
}

var intranet = true;

var autoSendPV = true;
var autoLinkTracking = true;
var bfdvalue=null;
function Tracker(siteId) {
  var
  registeredHooks = {},
    fields = {},
    mapFields = {
      'siteId': 'idsite',
      'page_hierarchy': 'hier',
      'action_type': 'action',
      'page_title': 'dt',
      'url': 'url',
      'referrer': 'urlref',
      'is_landing_page': 'blp',
      'uid': '_id',
      'uid_encrypt': '_idenc',
      'user_id_type':'_ut',
      'session_id': '_sid',
      'page_id': '_pid',
      'data': 'data',
      'search_keyword': 's_key',
      'search_category': 's_cat',
      'search_type': 's_t',
      'order_type': 'o_t',
      'search_resultsCount': 's_count',
      'search_id': 's_id',
      'search_pageIndex': 's_page_n',
      'search_clickIndex': 's_item_n',
      'search_clickIndex_inpage': 's_item_index',
      'search_clickType': 'l_type',
      'search_clickTitle': 'l_title',
      'search_clickUrl': 'l_href',
      'language': 'url_l',
      'goal_id': 'idgoal',
      'revenue': 'revenue',
      'link_title': 'l_title',
      'link_type': 'l_type',
      'link_target': 'l_target',
      'link_html': 'l_html',
      'link_href': 'l_href',
      'page_x': 'pagex',
      'page_y': 'pagey',

      'opr_wf_d': 'opr_wf_d',

      'opr_wf_n' : 'opr_wf_n',

      'opr_wf_s' : 'opr_wf_s',

      'biz_wf_n': 'biz_wf_n',

      'biz_wf_s_s' : 'biz_wf_s_s',

      'biz_wf_s_n' : 'biz_wf_s_n',

      't_d_1' : 't_d_1',

      'appn' : 'appn',

      'appv' : 'appv',
      'user_id' : 'user_id',
      'tag_list': ['span','p']
    },
    locationArray = urlFixup(documentAlias.domain, windowAlias.location.href, getReferrer()),
    domainAlias = domainFixup(locationArray[0]),
    locationHrefAlias = locationArray[1],
    configReferrerUrl = locationArray[2],
    configRequestMethod = 'GET',
    configTrackerUrl = ("https:" == location.protocol ? "https:" : "http:") + "//nebula-collector.huawei.com/dmpa/",

    configApiUrl = ("https:" == location.protocol ? "https:" : "http:") + "//w3.huawei.com/hwasite/",
    configTrackerSiteId = siteId || '',
    configHierarchy = '',
    configCustomUrl,
    configTitle = documentAlias.title,
    configDownloadExtensions = '7z|aac|ar[cj]|as[fx]|avi|bin|csv|deb|dmg|doc|exe|flv|gif|gz|gzip|hqx|jar|jpe?g|js|mp(2|3|4|e?g)|mov(ie)?|ms[ip]|od[bfgpst]|og[gv]|pdf|phps|png|ppt|qtm?|ra[mr]?|rpm|sea|sit|tar|t?bz2?|tgz|torrent|txt|wav|wm[av]|wpd||xls|xml|z|zip',
    configHostsAlias = [domainAlias],
    configIgnoreClasses = [],
    configDownloadClasses = [],
    configLinkClasses = [],
    configTrackerPause = 80,
    configMinimumVisitTime,
    configHeartBeatTimer,
    configDiscardHashTag,
    configCustomData,
    configCampaignNameParameters = ['ha_campaign', 'ha_campaign', 'utm_campaign', 'utm_source', 'utm_medium'],
    configCampaignKeywordParameters = ['ha_kwd', 'ha_kwd', 'utm_term'],
    configCookieNamePrefix = '_dmpa_',
    configCookieDomain,
    configCookiePath = "/" + (intranet ? location.pathname.split("/")[0] : ""),
    configCookiesDisabled = (typeof g_hwa_configCookiesDisabled != 'undefined') ? g_hwa_configCookiesDisabled : false ,
    configDoNotTrack,
    configCountPreRendered,
    configConversionAttributionFirstReferrer,
    configVisitorCookieTimeout = 63072000000,
    configSessionCookieTimeout = 1800000, 
    configReferralCookieTimeout = 15768000000, 
    cookieSecure = documentAlias.location.protocol === 'https',
    customVariables = false,
    customVariablesPage = {},
    customVariableMaximumLength = 200,
    browserFeatures = {},
    linkTrackingInstalled = false,
    activityTrackingInstalled = false,
    lastActivityTime,
    lastButton,
    lastTarget,
    hash = sha1,
    domainHash,
    visitorUUID,
    visitorUUIDEncrypt,

    pageURLBeforeRegenerate,
    configHaIgnoreClass = 'ha_ignore',
    
    configHaClickClass = 'hwa-click',
    perf_event_q = [],
    perf_send_status = 'sleeping',

    perf_ajaxpage_in = 0,

    perf_ajaxpage_out = 0,

    perf_ajaxpage_sended = false,

    perf_ajaxpage_min_time =0,

    perf_ajaxpage_max_time = 0,

    perf_ajaxpage_firstloadtime = 0,

    ajaxthreshold_time = 0,
    perf_url_ignore_p = /(\.css)|(only4ssoTimeUpdate.do)/i,
    ha_js_parent_pid = ha_js_parent_pid || hash( dmpa_js_init_time + locationHrefAlias + (new Date() - 0));
    var ha_js_parent_sid ,
    ha_js_parent_url,
    duration,
    perf_ifrmae_succeed_flag = false;
    var hasiFrame = false;
    
    function getTagList(){
        for(var i=0;i<mapFields.tag_list.length;i++){
            mapFields.tag_list[i] = mapFields.tag_list[i].toUpperCase();
        }
        return mapFields.tag_list;
    }
  function sendPerfQueue(){
      try{
        perf_send_status = 'sending';
        var _qlen = perf_event_q.length;
        var _tmp_q = [];
        for(var i =0 ; i < _qlen; i ++) {
          _tmp_q.push(perf_event_q.shift());
        };
        if(perf_event_q.length > 0 ) {
          perf_send_status = 'ready';
          setTimeout(sendPerfQueue,4000);
        }else{
          perf_send_status = 'sleeping';
        }
      }catch(e){};
  };

  function getCustomName(name) {
    var ret = null;
    if (name) {
      var m = name.match(/((metric)|(dimension))(.*)/);
      if (m && m[4]) {
        if (m[2]) ret = 'ri';
        else if (m[3]) ret = 'rv';
        if (ret) {
          var no = m[4] - 0;
          if (isNaN(no) || no < 1 || no > 10) return null;
          ret += no;
        }
      }
    }
    return ret;
  }

  function mapData(data) {
    var ret = {};
    for (var o in data) {
       var name;
              if(mapFields[o] instanceof Array){
                name= o;
              }else{
                   name = mapFields[o];
              }
      if (o == "search_filters") {
        for (var i = 1; i <= data[o].length; i++) {
          ret['s_f' + i] = data[o][i - 1];
        }
      }
      var custom_name = getCustomName(o);
      if (custom_name) {
        ret[custom_name] = data[o];
        continue;
      }
      if (name) ret[name] = data[o];
    }
    return ret;
  }

  function getbfdCookie(){
      var bfdkey="bfdid";
      var _bfd_value=getBfdid(bfdkey);
      return _bfd_value;
  }

  function setCookie(cookieName, value, msToExpire, path, domain, secure) {
    if (configCookiesDisabled) {
      return;
    }

    var expiryDate;
    if (msToExpire) {
      expiryDate = new Date();
      expiryDate.setTime(expiryDate.getTime() + msToExpire);
    }
    if("_dmpa_ses"==cookieName){
        documentAlias.cookie ='_dmpa_ses='+encodeWrapper(value)+';path=/;domain='+dmpa_prototype_options_gdomain;
    }else{
        documentAlias.cookie = cookieName + '=' + encodeWrapper(value) + (msToExpire ? ';expires=' + expiryDate.toGMTString() : '') +
        ';path=' + (path || '/') + (dmpa_prototype_options_gdomain ? ';domain=' + dmpa_prototype_options_gdomain : '') + (secure ? ';secure' : '');
    }       
  }

  function getCookie(cookieName) {
    if (configCookiesDisabled) {
      return 0;
    }

    var cookiePattern = new RegExp('(^|;)[ ]*' + cookieName + '=([^;]*)'),
      cookieMatch = cookiePattern.exec(documentAlias.cookie);

    return cookieMatch ? decodeWrapper(cookieMatch[2]) : 0;
  }
  
  function getBfdid(bfdkey){
      var arr=document.cookie.split(";");
      for(var i=0;i<arr.length;i++){
          if(arr[i].indexOf(bfdkey)>=0){
              var itemArr=arr[i].split("=");
              for(var j=0;j<itemArr.length;j++){
                  var value=itemArr[1];
                  return value;
              }
          }
          
      }
  }
  function purify(url) {
    var targetPattern;

    if (configDiscardHashTag) {
      targetPattern = new RegExp('#.*');
      return url.replace(targetPattern, '');
    }

    return url;
  }

  function resolveRelativeReference(baseUrl, url) {
    var protocol = getProtocolScheme(url),
      i;

    if (protocol) {
      return url;
    }

    if (url.slice(0, 1) === '/') {
      return getProtocolScheme(baseUrl) + '://' + getHostName(baseUrl) + url;
    }

    baseUrl = purify(baseUrl);
    if ((i = baseUrl.indexOf('?')) >= 0) {
      baseUrl = baseUrl.slice(0, i);
    }

    if ((i = baseUrl.lastIndexOf('/')) !== baseUrl.length - 1) {
      baseUrl = baseUrl.slice(0, i + 1);
    }

    return baseUrl + url;
  }
  function isSiteHostName(hostName) {
    var i,
      alias,
      offset;

    for (i = 0; i < configHostsAlias.length; i++) {
      alias = domainFixup(configHostsAlias[i].toLowerCase());

      if (hostName === alias) {
        return true;
      }

      if (alias.slice(0, 1) === '.') {
        if (hostName === alias.slice(1)) {
          return true;
        }

        offset = hostName.length - alias.length;
        if ((offset > 0) && (hostName.slice(offset) === alias)) {
          return true;
        }
      }
    }
    return false;
  }
  function getParmers(request){
      var json={"other":"other"};
      if(bfdvalue !=null && "" != bfdvalue){
          json.bfdid=bfdvalue;
      }
      var _rv4=JSON.stringify(json);
      request=request+"&rv1='"+ encodeWrapper(_rv4)+"'"
      return request;
  }
  
  function getImage(request) {
    var image = new Image(1, 1);
    image.onload = function() {};
    image.src = configTrackerUrl + "open/dc?" + request;
  }
  function iframePost(data) {
    if (document.body) {
      try{
        data = encodeURIComponent(data);
        try {
          var ifr = document.createElement('<iframe name="' + data + '"></iframe>')
        } catch (d) {
          ifr = document.createElement("iframe"), ifr.name = data;
        }
        ifr.height = "0";
        ifr.width = "0";
        ifr.style.display = "none";
        ifr.style.visibility = "hidden";
        var _ss = "/favicon.ico";
        if(typeof static_source_4hwa != 'undefined'){
          _ss = static_source_4hwa;
        }

        var src = configTrackerUrl + "../api/2.0/analytics_iframe.html#" + encodeURIComponent(location.protocol + "//" + location.host+ _ss),
          clear = function() {
            ifr.src = "";
            ifr.parentNode && ifr.parentNode.removeChild(ifr);
          };
        addEventListener(windowAlias, "beforeunload", clear);
        var flag = !1,
          l = 0,
          run = function() {
            if (!flag) {
              try {
                if (9 < l || (ifr.contentWindow.location.host == location.host && ifr.contentWindow.location.path == _ss)) {
                  flag = !0;
                  clear();
                  removeEventListener(windowAlias, "beforeunload", clear);
                  return;
                }
              } catch (e) {}
              l++;
              setTimeout(run, 200);
            }
          };
        addEventListener(ifr, "load", run);
        document.body.appendChild(ifr);
        ifr.src = src;  
      }catch(e){};

    } else {
      setTimeout(function() {
        iframePost(data);
      }, 100);
    }
  }
  /*
   * Send request
   */

  var _cRequest = 0;
  var _dDate = new Date();

  function sendRequest(request, delay) {
    var now = new Date();
    if ((now - _dDate) > 1000) {
      _cRequest = 0;
      _dDate = now;
    }
    if (!configDoNotTrack && _cRequest < 5) {
      _cRequest++;
      iframePost(request);
      expireDateTime = now.getTime() + delay;
    }
    try{
      //清理全局数据
      fields['data'] = null;
      fields['goal_id'] = null;
      fields['page_x'] = null;
      fields['page_y'] = null;
      fields['opr_wf_d'] = null;
      fields['opr_wf_n'] = null;
      fields['opr_wf_s'] = null;
      fields['biz_wf_n'] = null;
      fields['biz_wf_s_s'] = null;
      fields['biz_wf_s_n'] = null;
      if(fields['page_hierarchy'] != null){
        fields['page_hierarchy'] = fields['page_hierarchy'].replace(/((g:{)|(t:{)|(tab:{)|(app:{)|(func:{)|(f:{))(.*?)}/g,"");
      }
      fields['ri1'] = null;
      fields['ri2'] = null;
      fields['ri3'] = null;
      fields['ri4'] = null;
      fields['ri5'] = null;

      fields['rv1'] = null;
      fields['rv2'] = null;
      fields['rv3'] = null;
      fields['rv4'] = null;
      fields['rv5'] = null;

      fields['t_d_1'] = null;
      

    }catch(e){}
  }

  function getCookieName(baseName) {
    return configCookieNamePrefix + baseName;
  }

  function hasCookies() {
    if (configCookiesDisabled) {
      return '0';
    }

    if (!isDefined(navigatorAlias.cookieEnabled)) {
      var testCookieName = getCookieName('testcookie');
      setCookie(testCookieName, '1');

      return getCookie(testCookieName) === '1' ? '1' : '0';
    }

    return navigatorAlias.cookieEnabled ? '1' : '0';
  }

  function updateDomainHash() {
    domainHash = hash((configCookieDomain || domainAlias) + (configCookiePath || '/')).slice(0, 4); // 4 hexits = 16 bits
  }

  function getCustomVariablesFromCookie() {
    var cookieName = getCookieName('cvar'),
      cookie = getCookie(cookieName);

    if (cookie.length) {
      cookie = JSON.parse(cookie);
      if (isObject(cookie)) {
        return cookie;
      }
    }
    return {};
  }
  function loadCustomVariables() {
    if (customVariables === false) {
      customVariables = getCustomVariablesFromCookie();
    }
  }

  function activityHandler() {
    var now = new Date();

    lastActivityTime = now.getTime();
  }

  function setVisitorIdCookie(uuid, createTs, visitCount, nowTs, lastVisitTs, lastEcommerceOrderTs) {
      setCookie(getCookieName('id'), uuid + '.' + createTs + '.' + visitCount + '.' + nowTs + '.' + lastVisitTs + '.' + lastEcommerceOrderTs, configVisitorCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
  }

  function loadVisitorIdCookie() {
    var now = new Date(),
      nowTs = Math.round(now.getTime() / 1000),
      id = getCookie(getCookieName('id')),
      tmpContainer;

    var cst_uid = document.getElementById("fm_loginUserName");
    if (cst_uid && cst_uid.innerText){
       visitorUUID = cst_uid.innerText.replace(/\s{1,}/g,"").split("|")[0];
       visitorUUIDEncrypt = 0;
    }
    visitorUUID = dmpa_prototype_options_dmpaid;
    visitorUUIDEncrypt = 0;

    if (id) {
      tmpContainer = id.split('.');
      tmpContainer.unshift('0');
      if (tmpContainer[0] === visitorUUID || !visitorUUID) {
        return tmpContainer;
      }
    }
    if (!visitorUUID) {
        visitorUUID = dmpa_prototype_options_dmpaid;
        }

    tmpContainer = [
      '1',
      visitorUUID,
      nowTs,
      0,
      nowTs,
      '',
      ''
    ];
    return tmpContainer;
  }
  function loadReferrerAttributionCookie() {
    var cookie = getCookie(getCookieName('ref'));

    if (cookie.length) {
      try {
        cookie = JSON.parse(cookie);
        if (isObject(cookie)) {
          return cookie;
        }
      } catch (err) {
      }
    }
    return [
      '',
      '',
      0,
      ''];
  }

  var unloadCookieFuncBound;

  function getPerformance() {
   try{
    if (!perfInfo) {
      var perf = windowAlias.performance || windowAlias.webkitPerformance,
        perf = perf && perf.timing;
      if (perf) {
        var c = perf.navigationStart;
        if (0 == c) return !1;
        var d = perf.loadEventStart - c;
        if (Infinity == d || isNaN(d) || d <= 0) return !1;
        perfInfo = {
          plt: d,
          dns: perf.connectEnd - c,
          dit: perf.domInteractive - c,
          tcp: perf.connectEnd - perf.connectStart,
          srt: perf.responseStart - perf.requestStart,
          pdt: perf.responseEnd - perf.responseStart,
          rrt: perf.domComplete - perf.domLoading,
          clt: perf.loadEventEnd  - perf.loadEventStart
        };
        for (var o in perfInfo)
          if (perfInfo[o] < 0) perfInfo[o] = 0;

      } else {
        var b = windowAlias.external,
          c = b && b.onloadT;
        b && !b.isValidLoadTime && (c = void 0);
        2147483648 < c && (c = void 0);
        0 < c && b.setPageReadyTime();
        if (c == void 0) {
          if (document.readyState != "complete") return !1;
          var _lpName = getCookieName("lp"),
            _info = getCookie(_lpName);

          registeredOnUnloadHandlers.push(function() {
            setCookie(_lpName, JSON.stringify({
              url: locationHrefAlias,
              t: new Date() - 0
            }), 6e4);
          });
          setCookie(_lpName, "", -86400);

          if (!_info) {
            perfInfo = {
              plt: new Date().getTime() - dmpa_js_init_time
            };
            return perfInfo;
          }
          _info = JSON.parse(_info);
          c = new Date() - (_info.t || 0);
          if (c >= 6e4) return !1;
        }
        perfInfo = {
          plt: c
        };
      }
    }
    return perfInfo;
   }catch(e){}
  }

  function buildPayload(data) {
    var ret = [];
    for (var o in data) {
      if (data[o] != null) {
        ret.push(o + "=" + encodeURIComponent(data[o]));
      }
    }
    return ret.join("&");
  }
              var types = [ "华为Mate 10 Pro:BLA-AL00 Build/HUAWEIBLA-AL00",
                      "华为Mate 10:ALP-AL00 Build/HUAWEIALP-AL00",
                      "华为Mate 9:MHA-AL00 Build/HUAWEIMHA-AL00",
                      "华为Mate 8:HUAWEI NXT-TL00 Build/HUAWEINXT-TL00",
                      "华为nova 3:PAR-AL00 Build/HUAWEIPAR-AL00",
                      "华为nova 2:PIC-AL00 Build/HUAWEIPIC-AL00",
                      "华为nova 2 Plus:BAC-AL00 Build/HUAWEIBAC-AL00",
                      "华为P20:EML-AL00 Build/HUAWEIEML-AL00",
                      "华为P10:VTR-AL00 Build/HUAWEIVTR-AL00",
                      "华为P9:EVA-AL10 Build/HUAWEIEVA-AL10",
                      "华为P8:HUAWEI GRA-UL10 Build/HUAWEIGRA-UL10",
                      "华为MT1-U06:HUAWEI MT1-U06 Build/HuaweiMT1-U06",
                      "荣华为荣耀10:COL-TL10 Build/HUAWEICOL-TL10",
                      "荣耀V10 全网通标配版:BKL-AL00 Build/HUAWEIBKL-AL00",
                      "荣耀V10:BKL-AL20 Build/HUAWEIBKL-AL20",
                      "荣耀V9:DUK-AL20 Build/HUAWEIDUK-AL20",
                      "荣耀9:STF-AL00 Build/HUAWEISTF-AL00",
                      "华为荣耀8高配版:FRD-AL10 Build/HUAWEIFRD-AL10",
                      "华为荣耀V8:KNT-AL20 Build/HUAWEIKNT-AL20",
                      "华为荣耀8:FRD-AL00 Build/HUAWEIFRD-AL00",
                      "华为荣耀7i:ATH-AL00 Build/HONORATH-AL00",
                      "华为荣耀7:PLK-AL10 Build/HONORPLK-AL10",
                      "荣耀V8全网通:KNT-UL10 Build/HUAWEIKNT-UL10",
                      "荣耀畅玩6X:BLN-AL40 Build/HONORBLN-AL40",
                      "荣耀畅玩5X:KIW-AL10 Build/HONORKIW-AL10",
                      "荣耀畅玩4X:Che2-TL00 Build/HonorChe2-TL00",
                      "荣耀8青春版:PRA-AL00X Build/HONORPRA-AL00X",
                      "荣耀畅玩5C:NEM-AL10 Build/HONORNEM-AL10",
                      "荣耀畅玩4C:CHM-TL00H Build/HonorCHM-TL00H",
                      "荣耀6 Plus:PE-TL20 Build/HuaweiPE-TL20",
                      "华为荣耀Note8:EDI-AL10 Build/HUAWEIEDISON-AL10",



                      "三星Galaxy J3:SM-J3109 Build/LMY47X",
                      "三星Galaxy S9+:SM-G9650 Build/R16NW",
                      "三星Galaxy Note 8:SM-N9500 Build/R16NW",
                      "三星GALAXY S6 Edge+:SM-G9280 Build/NRD90M",
                      "三星GALAXY S6 Edge:SM-G9250 Build/NRD90M",
                      "三星Galaxy S6:SM-G9208 Build/NRD90M",
                      "三星GALAXY S8:SM-G9500 Build/R16NW",
                      "三星GALAXY S7:SM-G9350 Build/R16NW",
                      "三星GALAXY C7:SM-C7000 Build/NRD90M",
                      "三星GALAXY S8+:SM-G9550 Build/NRD90M",
                      "三星GALAXY S7 Edge:SM-G9350 Build/NRD90M",
                      "三星GALAXY C9:SM-C9000 Build/MMB29M",
                      "三星GALAXY C9 Pro:SM-C9000 Build/MMB29M",
                      "三星GALAXY C5:SM-C5000 Build/R16NW",
                      "三星2016版GALAXY A7:SM-A7100 Build/LMY47X",
                      "三星GALAXY S7 Edge:SM-G9350 Build/NRD90M",
                      "三星GALAXY Note 5:SM-N9200 Build/NRD90M",
                      "三星GALAXY A5:SM-A5000 Build/MMB29M",
                      "三星GALAXY A8:SM-A8000 Build/MMB29M",

                      "小米Note 2:Mi Note 2 Build/OPR", 
                      "小米6:MI 6 Build/OPR",
                      "小米5s:MI 5s Build/NRD90M",
                      "小米Note 3:Mi Note 3 Build/OPM", 
                      "小米5:MI 5 Build/OPR",
                      "小米MAX 3:MI MAX 3 Build/OPM", 
                      "小米2S:MIX 2S Build/PKQ",
                      "小米5s Plus:MI 5s Plus Build/NRD90M",
                      "小米MAX 2:MI MAX 2 Build/NMF26F",
                      "小米3:MI 3 Build/KTU84P", 
                      "小米5X:MI 5X Build/N2G47H",
                      "小米8:MI 8 Build/OPM", 
                      "小米6X:MI 6X Build/OPM",
                      "小米Note:MI NOTE LTE Build/MMB29M",
                      "小米5s:MI 5s Build/MXB48T",
                      "小米5s Plus:MI 5s Plus Build/NRD90M",
                      "小米8 SE:MI 8 SE Build/OPM", 
                      "小米MIX 2:MIX 2 Build/OPR",
                      "小米MIX:MIX Build/OPR",
                      "小米NOTE Pro:MI NOTE Pro Build/NRD90M",
                      "红米Note 4X:Redmi Note 4X Build/NRD90M",
                      "红米6 Pro:Redmi 6 Pro Build/OPM",
                      "红米5 Plus:Redmi 5 Plus Build/N2G47H",
                      "红米Pro:Redmi Pro Build/MRA58K",
                      "红米Note 5:Redmi Note 5 Build/OPM",
                      "红米Note 4:Redmi Note 4 Build/MRA58K",
                      "红米Note 3:Redmi Note 3 Build/MMB29M",
                      "红米4A:Redmi 4A Build/MMB29M",
                      "红米3S:Redmi 3S Build/MMB29M",
                      "红米4:Redmi 4 Build/MMB29M", 
                      "红米5:Redmi 5 Build/N2G47H",
                      "红米6:Redmi 6 Build/O11019",
                      "红米Note 5A:Redmi Note 5A Build/N2G47H",
                      "红米4X:Redmi 4X Build/MMB29M",

                      "魅族m2 note:m2 note Build/LMY47D",
                      "魅族PRO 6:PRO 6 Build/NMF26O", 
                      "魅族MX6:MX6 Build/NMF26O",
                      "魅族MX5:MX5 Build/LMY47I", 
                      "魅族PRO 5:PRO 5 Build/NRD90M",
                      "魅族MX4:MX4 Pro Build/LMY48W",
                      "魅族魅蓝metal:m1 metal Build/LMY47I",
                      "魅族MX4 Pro:MX4 Pro Build/LMY48W",

                      "OPPO A57:OPPO A57 Build/MMB29M",
                      "OPPO R15:PACM00 Build/O11019",
                      "OPPO R11:OPPO R11 Build/NMF26X",
                      "OPPO R9 Plus:OPPO R9 Plustm A Build/LMY47V",
                      "OPPO R9s:OPPO R9s Build/MMB29M",
                      "OPPO R11st:OPPO R11st Build/NMF26X",
                      "OPPO R9 Plusm A:OPPO R9 Plusm A Build/LMY47V",
                      "OPPO R7s:OPPO R7s Build/KTU84P",
                      "OPPO R9sk:OPPO R9sk Build/MMB29M",
                      "OPPO R9st:OPPO R9st Build/MMB29M",
                      "OPPO R9m:OPPO R9m Build/LMY47I",
                      "OPPO A59s:OPPO A59s Build/LMY47I",
                      "OPPO A57t:OPPO A57t Build/MMB29M",
                      "OPPO A57:OPPO A57 Build/MMB29M",
                      "OPPO R11t:OPPO R11t Build/NMF26X",
                      "OPPO A83t:OPPO A83t Build/N6F26Q",
                      "OPPO R11s:OPPO R11s Build/NMF26X",
                      "OPPO A33m:OPPO A33m Build/LMY47V",
                      "OPPO A37t:OPPO A37t Build/MRA58K",
                      "OPPO A77:OPPO A77 Build/NMF26F",
                      "OPPO R9s Plus:OPPO R9s Plus Build/MMB29M",
                      "OPPO A73:OPPO A73 Build/N6F26Q",
                      "OPPO R11plus:OPPO R11plus Build/NRD90M",
                      "OPPO A79k:OPPO A79k Build/N6F26Q",
                      "OPPO A53:OPPO A53 Build/LMY47V",
                      "OPPO A59:A59m Build/LMY47I",
                      "OPPO A83:OPPO A83 Build/N6F26Q",
                      "OPPO A37m:OPPO A37m Build/LMY47I",
                      "OPPO R7sPlus:OPPO R7sPlus Build/LMY47V",
                      "OPPO A73t:OPPO A73t Build/N6F26Q",

                      "vivo X6S A:vivo X6S A Build/LMY47V",
                      "vivo X20A:vivo X20A Build/NMF26X",
                      "vivo Y85:vivo Y85 Build/OPM",
                      "vivo Y71A:vivo Y71A Build/OPM",
                      "vivo Z1:vivo Z1 Build/OPM",
                      "vivo X6Plus D:vivo X6Plus D Build/LMY47I",
                      "vivo X9Plus:vivo X9Plus Build/N2G47H",
                      "vivo X7:vivo X7 Build/LMY47V",
                      "vivo X9:vivo X9 Build/N2G47H",
                      "vivo Y35A:vivo Y35A Build/LRX22G",
                      "vivo X9s Plus:vivo X9s Plus Build/N2G47H",
                      "vivo V3Max A:vivo V3Max A Build/LMY47V",
                      "vivo X5Pro L:vivo X5Pro L Build/LRX21M",
                      "vivo X9i:vivo X9i Build/N2G47H",
                      "vivo Y66:vivo Y66 Build/MMB29M",
                      "vivo X21A:vivo X21A Build/OPM",
                      "vivo Y55:vivo Y55 Build/MMB29M",
                      "vivo X21UD A:vivo X21UD A Build/OPM",
                      "vivo Xplay6:vivo Xplay6 Build/NMF26F",
                      "vivo Y66L:vivo Y66L Build/MMB29M",
                      "vivo X21:vivo X21 Build/OPM",
                      "vivo Y85A:vivo Y85A Build/OPM",
                      "vivo X6S A:vivo X6S A Build/LMY47V",
                      "vivo X21A:vivo X21A Build/OPM",
                      "vivo X20Plus A:vivo X20Plus A Build/NMF26X",
                      "vivo Y79A: vivo Y79A Build/N2G47H",
                      "vivo X6:vivo X6A Build/LRX22G",


              ];
              function getDType() {
                  var userAgent = navigator.userAgent;
                  if(userAgent==undefined||null==userAgent)	{
                      return "others";
                  }
                  if(userAgent.indexOf("iPhone")!=-1)
                  {
                      return userAgent.substring(userAgent.indexOf("iPhone OS"),userAgent.indexOf(" like"));
                  }
                  
                  if(userAgent.indexOf("iPad")!=-1)
                  {
                      return "iPad "+userAgent.substring(userAgent.indexOf("CPU")+4,userAgent.indexOf(" like"));
                  }


                  var indexOfBuild=userAgent.indexOf("Build/");
                  if(indexOfBuild==-1)
                  {
                      return "others";
                  }
  
                  var preIndex=userAgent.substring(0,indexOfBuild).lastIndexOf(";");
                  var fenhao=userAgent.indexOf(";",userAgent.indexOf("Build"));
                  var kuohao=userAgent.indexOf(")",userAgent.indexOf("Build"));
                  var posIndex=fenhao ==-1? kuohao:kuohao==-1?fenhao:fenhao>kuohao?kuohao:fenhao;
                  if(preIndex==-1 || posIndex==-1)
                  {
                      return "others";
                  }
                  return userAgent.substring(preIndex+2,posIndex);
              }

  function getRequest(request, customData, pluginMethod, currentEcommerceOrderTs) {
      var i,
      now = new Date(),
      nowTs = Math.round(now.getTime() / 1000),
      newVisitor,
      uuid,
      visitCount,
      createTs,
      currentVisitTs,
      lastVisitTs,
      lastEcommerceOrderTs,
      referralTs,
      referralUrl,
      referralUrlMaxLength = 1024,
      currentReferrerHostName,
      originalReferrerHostName,
      customVariablesCopy = customVariables,
      idname = getCookieName('id'),
      sesname = getCookieName('ses'),
      refname = getCookieName('ref'),
      cvarname = getCookieName('cvar'),
      datasend = null,
      id = loadVisitorIdCookie(),
      ses = getCookie(sesname),
      attributionCookie = loadReferrerAttributionCookie(),
      currentUrl = configCustomUrl || locationHrefAlias,
      campaignNameDetected,
      campaignKeywordDetected;
    if (configCookiesDisabled) {
      configCookiesDisabled = false;
      setCookie(idname, '', -86400, configCookiePath, configCookieDomain);
      setCookie(sesname, '', -86400, configCookiePath, configCookieDomain);
      setCookie(cvarname, '', -86400, configCookiePath, configCookieDomain);
      setCookie(refname, '', -86400, configCookiePath, configCookieDomain);
      configCookiesDisabled = true;
    }

    if (configDoNotTrack) {
      return '';
    }
    newVisitor = id[0];
    uuid = id[1];
    createTs = id[2];
    visitCount = id[3];
    currentVisitTs = id[4];
    lastVisitTs = id[5];

    if (!isDefined(id[6])) {
      id[6] = "";
    }

    lastEcommerceOrderTs = id[6];

    if (!isDefined(currentEcommerceOrderTs)) {
      currentEcommerceOrderTs = "";
    }
    var charSet = document.characterSet || document.charset;
    if (!charSet || charSet.toLowerCase() === 'utf-8') {
      charSet = null;
    }

    campaignNameDetected = attributionCookie[0];
    campaignKeywordDetected = attributionCookie[1];
    referralTs = attributionCookie[2];
    referralUrl = attributionCookie[3];
    var _dmpa_ses_time=getCookie("_dmpa_ses_time");
    var newDate=new Date()-0;
    if (!ses) {
        visitCount++;
        ses = hash(uuid + (new Date() - 0) + "" + Math.random());
        lastVisitTs = currentVisitTs;
        if (!configConversionAttributionFirstReferrer || !campaignNameDetected.length) {
          for (i in configCampaignNameParameters) {
            if (Object.prototype.hasOwnProperty.call(configCampaignNameParameters, i)) {
              campaignNameDetected = getParameter(currentUrl, configCampaignNameParameters[i]);
              if (campaignNameDetected.length) {
                break;
              }
            }
          }
          for (i in configCampaignKeywordParameters) {
            if (Object.prototype.hasOwnProperty.call(configCampaignKeywordParameters, i)) {
              campaignKeywordDetected = getParameter(currentUrl, configCampaignKeywordParameters[i]);
              if (campaignKeywordDetected.length) {
                break;
              }
            }
          }
        }

        currentReferrerHostName = getHostName(configReferrerUrl);
        originalReferrerHostName = referralUrl.length ? getHostName(referralUrl) : '';
        if (currentReferrerHostName.length && // there is a referrer
          !isSiteHostName(currentReferrerHostName) && // domain is not the current domain
          (!configConversionAttributionFirstReferrer || // attribute to last known referrer
            !originalReferrerHostName.length || // previously empty
            isSiteHostName(originalReferrerHostName))) { // previously set but in current domain
          referralUrl = configReferrerUrl;
        }

        if (referralUrl.length || campaignNameDetected.length) {
          referralTs = nowTs;
          attributionCookie = [
            campaignNameDetected,
            campaignKeywordDetected,
            referralTs,
            purify(referralUrl.slice(0, referralUrlMaxLength))
          ];
          setCookie(refname, JSON.stringify(attributionCookie), configReferralCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
        }
        setCookie("_dmpa_ses_time", newDate+configSessionCookieTimeout, configSessionCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
      }
    
    if(!_dmpa_ses_time){
        setCookie("_dmpa_ses_time", newDate+configSessionCookieTimeout, configSessionCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
        ses = hash(uuid + newDate + "" + Math.random());
    }else{
          var timeMistake=newDate - _dmpa_ses_time;
          if(timeMistake>0){//session需要更新
              ses = hash(uuid + newDate + "" + Math.random());
          }
          setCookie("_dmpa_ses_time", newDate+configSessionCookieTimeout, configSessionCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
    }
    pageId = pageId || hash(uuid + ses + newDate);

    function isLandingPage() {
      if (configReferrerUrl === "") return false;
      var referrerHost = getHostName(configReferrerUrl);
      var ret = /(\/\/)([^\/]*)(.*)/.exec(configReferrerUrl);
      var referrerPath = ret && ret[3] || "";
      return referrerHost != location.hostname || !(new RegExp(configCookiePath)).test(referrerPath);
    }
    if(request.action =="pv" && jalorPageForwardFlag4PV){
      fields["page_hierarchy"] = null;
      jalorPageForwardFlag4PV = false;
    }
    var hwaHier = (request.hier ? request.hier : configHierarchy);
    if(hwaHier == null || hwaHier == "") {
      if(request.action =="link-h" ) {
        hwaHier = fields["page_hierarchy_before"];
        fields["page_hierarchy_before"] = null;
      }else{
        hwaHier = fields["page_hierarchy"];
      }        
    }


    if(!/((c:{)|(c{)|(c\())(.*?)}/.test(hwaHier)){
     if(fields["page_hierarchy"] != null &&  fields["page_hierarchy"].match(/((c:{)|(c{)|(c\())(.*?)}/g)!= null){
        var hwaPageHier = fields["page_hierarchy"].match(/((c:{)|(c{)|(c\())(.*?)}/g)[0];
        if(hwaPageHier != null) {
          hwaHier = hwaPageHier + (hwaHier == null ? "" : hwaHier );
        }
      }else if(isDefined(documentAlias.getElementById("hwa-page-hier"))){
        var hwaPageHier  = getPageHierCurrent(documentAlias.getElementById("hwa-page-hier"));
        if(hwaPageHier != null) {
          hwaHier = hwaPageHier + (hwaHier == null ? "" : hwaHier );
        }
      }       
    }
    request.hier = hwaHier;
    if(request.action !="link-h" ){
      fields["page_hierarchy"] = hwaHier;
    }else {
      fields["page_hierarchy"] = null;
    }
    var _bfdid_=getbfdCookie();
    var _dType = getDType();
    if (!configCustomData) {
      configCustomData = {};
    }
  configCustomData["device_type"] = _dType;
    datasend = {
      'action':request.action,
      'idsite': configTrackerSiteId,
      'hier':  hwaHier,
      'r': String(Math.random()).slice(2, 8),
      "t": (request.action =="pv"  ? dmpa_js_init_time : now - 0),
      "tz": (-now.getTimezoneOffset() / 60),
      'dt': configTitle,
      'url': (request.action =="link-h"  ? purify(urlBeforeHashChange) : purify(currentUrl)),
      'urlref': (request.action =="link-h"  ? purify(urlRefBeforeHashChange) : (configReferrerUrl.length ? purify(configReferrerUrl) : null)),
      'blp': isLandingPage() ? 1 : 0,
      "_idenc": visitorUUIDEncrypt,
      '_id': uuid,
      "_sid": ses,
      '_pid': (request.action =="link-h"  ? pageIdBeforeHashChange : pageId) ,
      '_idts': createTs, // currently unused
      '_idvc': visitCount, // currently unused
      '_idn': newVisitor, // currently unused
      '_rcn': (campaignNameDetected.length ? campaignNameDetected : null),
      '_rck': (campaignKeywordDetected.length ? campaignKeywordDetected : null),
      '_refts': referralTs,
      '_viewts': lastVisitTs,
      '_ects': (String(lastEcommerceOrderTs).length ? lastEcommerceOrderTs : null),
      '_ref': (String(referralUrl).length ? purify(referralUrl.slice(0, referralUrlMaxLength)) : null),
      'cs': (charSet ? charSet : null),
      'data':customData,
      '_bfd_id':_bfdid_,
      'user_id':request.user_id
    }
    if(fields['pageReadyTime']){
      try{
        var now1 = new Date();
        datasend.offset = now1.getTime() - fields['pageReadyTime']; 
      }catch(ee1){
        datasend.offset = 0;
      }
      
    }

    if (request.action && (request.action == 'search' || request.action == 'searchclick')) {
      datasend['ri1'] = 10;
    }
    if(request.action !="link-h" ){
      mixin(datasend, mapData(fields));
    }
    
    mixin(datasend, request);
    if ((request.action == "pp" || request.action =="ajax-pp" ) && !configiFrameTrackingDisabled && !dis_parent && perf_ifrmae_succeed_flag) { //本窗体未禁用 && 父窗体未禁用
    var tempStructure,p;
      try{
        p =  windowAlias.performance.timing || windowAlias.webkitPerformance.timing; 
        if(p.loadEventEnd){
          duration = p.loadEventEnd  -  dmpa_js_init_time;
        }else{
          duration = p.loadEventStart -  dmpa_js_init_time;
        } 
      }catch(e){};          
      if(request.action =="ajax-pp"){duration =  perf_ajaxpage_max_time - dmpa_js_init_time};         
      if(window == top && hasiFrame){tempStructure =  {sid:ha_js_parent_sid,pid:ha_js_parent_pid,time:dmpa_js_init_time,dur:duration,istop:true};};
      if(window !== top && !dis_parent && typeof ha_js_parent_sid == 'string'){ 
        tempStructure   =  {sid:ha_js_parent_sid,pid:ha_js_parent_pid,time:dmpa_js_init_time,dur:duration,url:ha_js_parent_url}; 
      };
      datasend["rv5"] =  JSON.stringify(tempStructure);
    };

    var customVariablesPageStringified = JSON.stringify(customVariablesPage);
    if (customVariablesPageStringified.length > 2) {
      datasend.cvar = customVariablesPageStringified;
    }
    for (i in browserFeatures) {
      if (Object.prototype.hasOwnProperty.call(browserFeatures, i)) {
        datasend[i] = browserFeatures[i];
      }
    }
    customData = customData || configCustomData;
    if (customData) {
      var sCustomData = JSON.stringify(customData);
      if (sCustomData.length < 4000) datasend.data = sCustomData;
    }
    if (customVariables) {
      var customVariablesStringified = JSON.stringify(customVariables);
      if (customVariablesStringified.length > 2) {
        datasend._cvar = customVariablesStringified;
      }

      for (i in customVariablesCopy) {
        if (Object.prototype.hasOwnProperty.call(customVariablesCopy, i)) {
          if (customVariables[i][0] === '' || customVariables[i][1] === '') {
            delete customVariables[i];
          }
        }
      }
      setCookie(cvarname, JSON.stringify(customVariables), configSessionCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
    }
    if(request.action =="link-h" ){
      pageIdBeforeHashChange = null;
    }
    setVisitorIdCookie(uuid, createTs, visitCount, nowTs, lastVisitTs, isDefined(currentEcommerceOrderTs) && String(currentEcommerceOrderTs).length ? currentEcommerceOrderTs : lastEcommerceOrderTs);
    
    setCookie(sesname, ses, configSessionCookieTimeout, configCookiePath, configCookieDomain, cookieSecure);
    request = buildPayload(datasend);
    request += executePluginMethod(pluginMethod);


    return request;
  }

  function logiFramePerf(){
    var i_error = 0,_topTimer,_childTimer;
    if(windowAlias !== top){
     if(!configiFrameTrackingDisabled){top.postMessage({flag:'ifr_get'},'*')};
      _childTimer = setInterval(function(){
        if(!ha_js_parent_sid){
    
          top.postMessage({flag:'ifr_get'},'*');
          if((i_error += 1) >= 10) {
            perf_ifrmae_succeed_flag = true;
            clearInterval(_childTimer);
          }; 
        };        
      },Math.ceil(Math.random()*2000)); 
    }else{
      _topTimer = setInterval(function(){
        if(hasiFrame){
          perf_ifrmae_succeed_flag = true;
          clearInterval(_topTimer);
        };
      },300);
      setTimeout(
        function(){
          hasiFrame = false;
          perf_ifrmae_succeed_flag = true;
          clearInterval(_topTimer);
        }
      ,10000); 
    }; 
    addEventListener(windowAlias,'message',function(event){
      switch(event.data.flag){
        case 'ifr_get':
          var iFrameArray = [];
          hasiFrame = true;
          var parentMessage = {ifr_siteId:ha_js_parent_sid,ifr_pageId:ha_js_parent_pid,ifr_time:dmpa_js_init_time,ifr_url:document.location.href};
          if(configiFrameTrackingDisabled){
            parentMessage.flag = 'ifr_dis'
          }else{
            parentMessage.flag = 'ifr_set'         
          };
          event.source.postMessage(parentMessage,event.origin);
        break;
        case 'ifr_dis': 
          dis_parent = true;
          perf_ifrmae_succeed_flag = true; 
        break;
        case 'ifr_set':
          var urlPattern =  new RegExp('[.xml]','i');            
          if (urlPattern.test(document.referrer)){
            ha_js_parent_url = event.data.ifr_url;
          }else{
            ha_js_parent_url = document.referrer;
          };
          if(event.data.ifr_siteId){  
            dmpa_js_init_time  = event.data.ifr_time; 
            ha_js_parent_sid = event.data.ifr_siteId;
            ha_js_parent_pid = event.data.ifr_pageId;
            perf_ifrmae_succeed_flag  = true;  
            dis_parent = false
          };
        break;
      }
    },false);
  };

  function logPerformance(customTitle, customData, dryrun) {
    /*cwx*/
    if (!configiFrameTrackingDisabled && !perf_ifrmae_succeed_flag ){
      setTimeout(function(){
        logPerformance(customTitle, customData, dryrun);
      },100);
      return;
    }else if (documentAlias.readyState != "complete"){
      setTimeout(function(){
        logPerformance(customTitle, customData, dryrun);
      },100);
      return;
    }
    perfInfo = perfInfo || getPerformance();
    if (!perfInfo || dryrun) return;
    var request = getRequest(mixin(perfInfo, {
      action: 'pp'
    }), customData, "performance");

    sendRequest(request, configTrackerPause);
    
  }
  
  /**
   * 组装json对象
   */
  function getJsonData(){
       var _bfd_cookie=getbfdCookie();
       if(_bfd_cookie){
         _json.bfdid=_bfd_cookie
       }else{
           
       }
       return _json;
  }

  /*
   * Log the page view / visit
   */
  /*cwx*/
  function logPageView(data) {
    var now = new Date();
    fields["pageReadyTime"] = (new Date()).getTime();
    var _pv_timeout = 10; 
    if(dmpa_source_this.parent != dmpa_source_this) {
      _pv_timeout = 1000;
    }
    setTimeout(function(){
        var request = getRequest(mixin({'action': 'pv'
                },mapData(data)),null, 'log');
      sendRequest(request, configTrackerPause);
      //for Jalor异步加载页面
        try{
        if(typeof Jalor !== "object" || typeof Jalor.Page !== "object" ){
          return ;
        }
        hwa_meld.before(Jalor.Page, ['forward','_forward','forwardMethod','forwardIntervalMethod'], function(result) {
        try{
            urlBeforeHashChange = windowAlias.location.href;
            pageIdBeforeHashChange = pageId;
            urlRefBeforeHashChange = configReferrerUrl;
            documentTileBeforeHashchange = configTitle;
        }catch(e){}
        });
        hwa_meld.after(Jalor.Page, ['forward','_forward','forwardMethod','forwardIntervalMethod'], function(result) {
          try{
           
              if(((new Date().getTime() - dmpa_js_init_time)<1000) ) {
                return;
              }
              if(pageURLBeforeRegenerate != null && pageURLBeforeRegenerate == windowAlias.location.href){
                return;//由于时间差等原因同一个pv触发了多次
              }else{
                pageURLBeforeRegenerate = windowAlias.location.href;//用来判断是否从复发送，使用jalor框架的系统有些在一个页面打开里面既调用了forward,又调用了_forward
              }
              var sesname = getCookieName('ses'),
              _id = loadVisitorIdCookie(),
              _ses = getCookie(sesname),
              _uuid =  _id[1];
              pageId = hash(_uuid + _ses + (new Date() - 0));

              fields["referrer"] = urlBeforeHashChange ;
              configReferrerUrl = urlBeforeHashChange ;
              fields["url"]  = windowAlias.location.href;
              configCustomUrl = windowAlias.location.href;
              configTitle = documentAlias.title;
              fields["page_hierarchy_before"]  = fields["page_hierarchy"];
              fields["page_hierarchy"] = null;
              var haBIStructure = {};
              jalorPageForwardFlag = true;
              jalorPageForwardFlag4PV = true;
              setTimeout(function(){
                logPageView(haBIStructure);
              },500);
              
              asyn_pv_sendtime_dmpa = new Date().getTime();
              perf_ajaxpage_firstloadtime = 0;
              
          }catch(e){}
        });
      }catch(e){};

    },_pv_timeout);
    
  }

  function logSiteSearch(type, data) {
  
    type = type == "click" ? "searchclick" : "search";
    var request = getRequest(mixin({
      action: type
    },mapData(data)), null, 'sitesearch');
    sendRequest(request, configTrackerPause);
  }
  function logGoal(gData,data) {
    var request = getRequest(mixin(gData, {
      'action': 'goal'
    },mapData(data)), null, 'goal');
    sendRequest(request, configTrackerPause);
  }

  function logLink(url, linkType, customData) {
    customData.data=configCustomData;
    var request = getRequest(mixin(customData, {
      "action": linkType
    }), null, 'link');

    sendRequest(request, configTrackerPause);
  }

  function prefixPropertyName(prefix, propertyName) {
    if (prefix !== '') {
      return prefix + propertyName.charAt(0).toUpperCase() + propertyName.slice(1);
    }

    return propertyName;
  }

  function trackCallback(callback) {
    var isPreRendered,
      i,
      prefixes = ['', 'webkit', 'ms', 'moz'],
      prefix;

    if (!configCountPreRendered) {
      for (i = 0; i < prefixes.length; i++) {
        prefix = prefixes[i];
        if (Object.prototype.hasOwnProperty.call(documentAlias, prefixPropertyName(prefix, 'hidden'))) {
          if (documentAlias[prefixPropertyName(prefix, 'visibilityState')] === 'prerender') {
            isPreRendered = true;
          }
          break;
        }
      }
    }

    if (isPreRendered) {
      addEventListener(documentAlias, prefix + 'visibilitychange', function ready() {
        documentAlias.removeEventListener(prefix + 'visibilitychange', ready, false);
        callback();
      });
      return;
    }
    callback();
  }

  function getClassesRegExp(configClasses, defaultClass) {
    var i,
      classesRegExp = '(^| )(hwa[_-]' + defaultClass;

    if (configClasses) {
      for (i = 0; i < configClasses.length; i++) {
        classesRegExp += '|' + configClasses[i];
      }
    }

    classesRegExp += ')( |$)';

    return new RegExp(classesRegExp);
  }

  function getLinkType(className, href) {
    var downloadPattern = getClassesRegExp(configDownloadClasses, 'download'),
      linkPattern = getClassesRegExp(configLinkClasses, 'link'),
      downloadExtensionsPattern = new RegExp('\\.(' + configDownloadExtensions + ')([?&#]|$)', 'i');
    return linkPattern.test(className) ?
      'link' : (downloadPattern.test(className) || downloadExtensionsPattern.test(href) ? 'download' : 'link');
  }

  function processClick(evt) {
    try {
      var parentElement,
        tag,
        linkType,
        _c = 3,
        sourceElement = evt.target || evt.srcElement,
        sourceElementOrginal = evt.target || evt.srcElement,
        event = event || evt;

      var ignorePattern = getClassesRegExp([configHaIgnoreClass], 'ignore');

      if (ignorePattern.test(sourceElement.className)) return;

      /*BEGIN 处理HWA自定义事件*/
      var hwaClickPattern =  getClassesRegExp( [configHaClickClass],"hwa-click");
      if(hwaClickPattern.test(sourceElement.className)){
        var attrs = sourceElement.attributes,
          target = sourceElement.target;
         if (attrs) {
           if(attrs['hwa-opr-wf']){
             if(attrs['hwa-opr-wf-status'] && attrs['hwa-opr-wf-status'].value=="end"){
               var now  = new Date();
               var wf =fields[attrs['hwa-opr-wf'].value] = fields[attrs['hwa-opr-wf'].value] || [];
               var duration = 0;
               if(wf.length > 0){
                 duration = now.getTime() - wf[0].t;
               }
               wf.push({'t':now.getTime(),'opr':(attrs['hwa-func'] ? attrs['hwa-func'].value : ""),'duration' : duration});
               var doc = sourceElement.ownerDocument || document, body = doc.body;
                       doc = doc.documentElement;
                       var haBIStructure = {
                         'l_title': sourceElement.innerText ? sourceElement.innerText : sourceElement.title,
                         'l_href': sourceHref,                
                         'l_target': target,
                         'l_html': sourceElement.innerHTML,
                         'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
                         'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
                         'rv4':getEleSelector(sourceElement)
                       };
                      haBIStructure['hier'] = getModuleHier(sourceElement);
                      haBIStructure['opr_wf_d'] = duration;
                      haBIStructure['opr_wf_n'] = attrs['hwa-opr-wf'].value;
                      haBIStructure['opr_wf_s'] = attrs['hwa-opr-wf-status'].value;
                      haBIStructure['data'] = wf;
                      logLink(sourceElement.href,  'click', haBIStructure);
                      delete fields[attrs['hwa-opr-wf'].value] ;
                      return ;      
             }else {
               var now  = new Date();
               var wf =fields[attrs['hwa-opr-wf'].value] = fields[attrs['hwa-opr-wf'].value] || [];
               if(wf.length > 10) {
                 delete fields[attrs['hwa-opr-wf'].value] ;
                 return ;
               }
               wf.push({'t':now.getTime(),'opr':(attrs['hwa-func'] ? attrs['hwa-func'].value : "")});
               return;
             }
           }else if(attrs['hwa-biz-wf']){
           var now  = new Date();
           var doc = sourceElement.ownerDocument || document, body = doc.body;
                   doc = doc.documentElement;
                   var haBIStructure = {
                     'l_title': sourceElement.innerText ? sourceElement.innerText : sourceElement.title,
                     'l_href': sourceHref,
                     'l_target': target,
                     'l_html': sourceElement.innerHTML,
                     'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
                     'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
                     'rv4':getEleSelector(sourceElement)
                    };
                  haBIStructure['hier'] = getModuleHier(sourceElement);
                  haBIStructure['biz_wf_n'] = attrs['hwa-biz-wf'].value;
                  haBIStructure['biz_wf_s_s'] = attrs['hwa-biz-wf-status'] ? attrs['hwa-biz-wf-status'].value : "";
                  haBIStructure['biz_wf_s_n'] = attrs['hwa-func'] ? attrs['hwa-func'].value : "";
                  logLink(sourceElement.href,  'click', haBIStructure);
                  return ;         
           }else if(attrs['hwa-query-form'] ){
              //记录表单查询
              var targetForm = attrs['hwa-query-form'].value;
              if(!targetForm) return;

              var doc = sourceElement.ownerDocument || document, body = doc.body;
                  doc = doc.documentElement;
               var fills =[];
               var hwaforms = document.getElementsByTagName("form");
               var queryForm = null;
               if(!hwaforms || hwaforms.length<1) return;
               for(var i=0; i < hwaforms.length;i++){
                  if(hwaforms[i] && hwaforms[i].attributes["hwa-query-form-name"] &&  targetForm==hwaforms[i].attributes["hwa-query-form-name"].value && typeof document.getElementsByClassName != 'undefined'){
                    var hwaFill = hwaforms[i].getElementsByClassName('hwa-query-fill');
                    for(var j=0;j<hwaFill.length;j++){  
                          var i_id = hwaFill[j].attributes["id"] !=null ? hwaFill[j].attributes["id"].value :'';
                          var i_name = hwaFill[j].attributes["name"] !=null ? hwaFill[j].attributes["name"].value :'';
                          var i_value = hwaFill[j].value !=null ? hwaFill[j].value :'';
                          var i_ele = {};
                          i_ele.id = i_id;
                          i_ele.name = i_name;
                          i_ele.value = i_value;
                          fills.push(i_ele);
                    }
                    break;
                  }
               }
               var haBIStructure = {
                 'l_title': sourceElement.innerText ? sourceElement.innerText : null,
                 'l_html': sourceElement.innerHTML,
                 'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
                 'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
                  'rv1': sourceElementOrginal.attributes["id"] != null ? sourceElementOrginal.attributes["id"].value : null,
                  'rv2': sourceElementOrginal.attributes["name"] != null ? sourceElementOrginal.attributes["name"].value : null,
                  'rv4':getEleSelector(sourceElement),
                  'data': JSON.stringify(fills)
                };
                haBIStructure['hier'] = getModuleHier(sourceElement);
                logLink(sourceElement.href,  'click-query', haBIStructure);
                return;
           }else {
                 var doc = sourceElement.ownerDocument || document, body = doc.body;
                 doc = doc.documentElement;
                 
                 var haBIStructure = {
                   'l_title': sourceElement.innerText ? sourceElement.innerText : sourceElement.title,
                   'l_href': sourceHref,
                   'l_target': target,
                   'l_html': sourceElement.innerHTML,
                   'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
                   'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
                   'rv4':getEleSelector(sourceElement)
                  };
                haBIStructure['hier'] = getModuleHier(sourceElement);
                logLink(sourceElement.href,  'click', haBIStructure);
                return ;             
           }
         } 
       return ;          
      }
      while ((parentElement = sourceElement.parentNode) !== null && isDefined(parentElement)&& isDefined(parentElement.tagName)  && // buggy IE5.5
        ((tag = sourceElement.tagName.toUpperCase()) !== 'A' && tag !== 'AREA') && _c--) {
        sourceElement = parentElement;
      }

      if (isDefined(sourceElement.href) && sourceElement.href != "" && ((tag = sourceElement.tagName.toUpperCase()) == 'A' || tag == 'AREA')) {
        var originalSourceHostName = sourceElement.hostname || getHostName(sourceElement.href),
          sourceHostName = originalSourceHostName.toLowerCase(),
          sourceHref = sourceElement.href.replace(originalSourceHostName, sourceHostName);
   
          var attrs = sourceElement.attributes,
            target = sourceElement.target,
            onclick = sourceElement.onclick;

          if (attrs) {
            var doc = sourceElement.ownerDocument || document,
              body = doc.body;
            doc = doc.documentElement;

            var custHWMicroFormatPattern = /^habi:(\w+)/i,
              haBIStructure = {
                'l_title': ((sourceElement.title !=null && sourceElement.title!="") ? sourceElement.title : sourceElement.innerText),
                'l_href': sourceHref,
                'l_target': target,
                'l_html': sourceElement.innerHTML,
                'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
                'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
                'rv4':getEleSelector(sourceElement)
            },
              result;
            for (i = 0; i < sourceElement.attributes.length; i += 1) {
              result = custHWMicroFormatPattern.exec(sourceElement.attributes[i].nodeName);
              if (result) {
                var _name = result[1].toLowerCase();
                var _value = attrs[i].value;
                if (_name == "data") {
                  result = {};

                  try {
                    result = JSON.parse(_value);
                  } catch (e) {}

                  haBIStructure.data = result;

                }
                var _pTitlePattern = /^parenttitle([1-3]?)$/i;
                var _pTitleIdPattern = /^parenttitleid([1-3]?)$/i
                var match;

                if (_name === 'title') {
                  haBIStructure.title = _value;
                } else if (_name === 'titleid') {
                  var ele = documentAlias.getElementById(_value);
                  if (ele) {
                    haBIStructure.title = ele.childNodes[0].value.replace(/\n/g, '');
                  }
                } else if ((match = _pTitlePattern.exec(_name))) {
                  if (match[1].length < 1) {
                    haBIStructure.pTitleL3 = _value;
                  } else {
                    haBIStructure['pTitleL' + match[1]] = _value;
                  }
                } else if (match = _pTitleIdPattern.exec(_name)) {
                  var ele = documentAlias.getElementById(_value);
                  if (ele) {
                    if (match[1].length < 1) {
                      haBIStructure.pTitleL3 = ele.childNodes[0].value.replace(/\n/g, '');
                    } else {
                      haBIStructure['pTitleL' + match[1]] = ele.childNodes[0].value.replace(/\n/g, '');
                    }
                  }
                } else if (_name === 'btype') {
                  haBIStructure['l_type'] = _value;
                } else if (_name === 'datacallback') {
                  if (_value && _value.length > 0) {
                    var custDataFunc = eval(_value);
                    if (isFunction(custDataFunc)) {
                      var custData = custDataFunc.apply(sourceElement);
                      if (isObject(custData)) {
                        haBIStructure = mixin(haBIStructure, custData);
                      }
                    }
                  }
                }
              }
            }
          }
          linkType = getLinkType(sourceElement.className, sourceHref);
          if (linkType) {
            // urldecode %xx
            sourceHref = urldecode(sourceHref);
            logLink(sourceHref, linkType, haBIStructure);
            var href = sourceElement.getAttribute('href');
            if ((!target || target == "_self") && href.indexOf("#") != 0 && href != location.href && href != (location.href + '#')) {
              if(onclick != null && (onclick.toString().indexOf("return(false)") >-1 || onclick.toString().indexOf("return false")>-1 || onclick.toString().indexOf("return  false"))>-1 ){
              }else {
            }
            }
          }
        return ;
      }
      /* 处理HREF为空的A标签且在_seft或_blank打开的点击 */
      if(isDefined(sourceElement.target) && (sourceElement.target == "_self" || sourceElement.target == "_blank") && ((tag = sourceElement.tagName.toUpperCase()) == 'A' || tag == 'AREA')){
        var originalSourceHostName = sourceElement.hostname || getHostName(sourceElement.href),
        sourceHostName = originalSourceHostName.toLowerCase(),
        sourceHref = sourceElement.href.replace(originalSourceHostName, sourceHostName);
        var doc = sourceElement.ownerDocument || document,body = doc.body;
        doc = doc.documentElement;

        haBIStructure = {
          'l_title': ((sourceElement.title !=null && sourceElement.title!="") ? sourceElement.title : sourceElement.innerText),
          //'l_href': sourceHref,
          'rv4':getEleSelector(sourceElement),
          'l_target': target,
          'l_html': sourceElement.innerHTML,
          'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
          'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0))
        };
        if(jalorPageForwardFlag){
          setTimeout(function(){
            haBIStructure.l_href =  windowAlias.location.href;
            logLink(null, 'link-h', haBIStructure);
            return ;
          },500);
        }else {
          logLink(null, 'link', haBIStructure);
          jalorPageForwardFlag = false;
        }      
      }
if (!Array.prototype.indexOf) {
   
  Array.prototype.indexOf = function(searchElement, fromIndex) {

      var k;

      if (this == null) {
          throw new TypeError('"this" is null or not defined');
      }

      var O = Object(this);

      var len = O.length >>> 0;

      if (len === 0) {
          return -1;
      }

      var n = +fromIndex || 0;

      if (Math.abs(n) === Infinity) {
          n = 0;
      }

      if (n >= len) {
          return -1;
      }

      k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

      while (k < len) {
          if (k in O && O[k] === searchElement) {
              return k;
          }

          k++;

      }

      return -1;

  };

}
      if(sourceElement.tagName.toUpperCase() == 'A'||getTagList().indexOf(sourceElementOrginal.tagName.toUpperCase())!=-1|| ((getTagList().indexOf("BUTTON"))!=-1&&(sourceElementOrginal.tagName.toUpperCase() === 'INPUT' && sourceElementOrginal.type.toUpperCase()==='BUTTON'))) {    	
          var doc = sourceElement.ownerDocument || document,body = doc.body;
          doc = doc.documentElement;
          
          var title_t;
          if(sourceElementOrginal.title !=null && sourceElementOrginal.title!=""){
            title_t  = sourceElementOrginal.title ;
          }else if(sourceElementOrginal.attributes["value"] != null && sourceElementOrginal.attributes["value"].value){
            title_t = sourceElementOrginal.attributes["value"].value
          }else {
            title_t = sourceElementOrginal.innerText.substr(0,100)
          }
          haBIStructure = {
          'l_title': title_t,
          'l_target':sourceElementOrginal,
          'l_html': sourceElementOrginal.outerHTML.substr(0,500),
          'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
          'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
          't_d_1': sourceElementOrginal.tagName,
          'rv1': sourceElementOrginal.attributes["id"] != null ? sourceElementOrginal.attributes["id"].value : null,
          'rv2': sourceElementOrginal.attributes["name"] != null ? sourceElementOrginal.attributes["name"].value : null,
          'rv4':getEleSelector(sourceElementOrginal)
          };
          logLink("", 'click', haBIStructure);
          return;
        }

      if("trackAll" === fields["trackType"]) {
        //处理开通跟踪所有事件的网络的事件
        var doc = sourceElement.ownerDocument || document,body = doc.body;
        doc = doc.documentElement;

        var title_t;
        if(sourceElementOrginal.title !=null && sourceElementOrginal.title!=""){
          title_t  = sourceElementOrginal.title ;
        }else if(sourceElementOrginal.attributes["value"] != null && sourceElementOrginal.attributes["value"].value){
          title_t = sourceElementOrginal.attributes["value"].value
        }else {
          title_t = sourceElementOrginal.innerText.substr(0,100)
        }
        haBIStructure = {
          'l_title': title_t,
          'l_target': target,
          'l_html': sourceElementOrginal.outerHTML.substr(0,500),
          'pagex': event.pageX || (event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0)),
          'pagey': event.pageY || (event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)),
          'rv1': sourceElementOrginal.attributes["id"] != null ? sourceElementOrginal.attributes["id"].value : null,
          'rv2': sourceElementOrginal.attributes["name"] != null ? sourceElementOrginal.attributes["name"].value : null,
          'rv3': sourceElementOrginal.attributes["value"] != null ? sourceElementOrginal.attributes["value"].value : null,
          'rv4':getEleSelectorByEvent(sourceElementOrginal)
        };
        logLink("", 'click-trackall', haBIStructure);
        return;
      }
    } catch (e) {}
  }

function processKeydown(evt){
  if("trackAll" === fields["trackType"] && (evt.keyCode == 13 || evt.keyCode == 9)){
    try{
      var sourceElement = evt.target || evt.srcElement,event  = event || evt;
      var doc = sourceElement.ownerDocument || document,body = doc.body;
      doc = doc.documentElement;
      var title_t;
      if(sourceElement.title !=null && sourceElement.title!=""){
        title_t  = sourceElement.title ;
      }else if(sourceElement.attributes["value"] != null && sourceElement.attributes["value"].value){
        title_t = sourceElement.attributes["value"].value
      }else {
        title_t = sourceElement.innerText.substr(0,100)
      }

      var haBIStructure = {
      'l_title': title_t,
      'l_target': sourceElement.target,
      'l_html': sourceElement.outerHTML.substr(0,500),
      'pagex': getElementX(sourceElement),
      'pagey': getElementY(sourceElement),
      'rv1': sourceElement.attributes["id"] != null ? sourceElement.attributes["id"].value : null,
      'rv2': sourceElement.attributes["name"] != null ? sourceElement.attributes["name"].value : null,
      'rv3': sourceElement.attributes["value"] != null ? sourceElement.attributes["value"].value : null
      };
      var request = getRequest(mixin({
        'action': "keydown_" + evt.keyCode
      }, haBIStructure));
      sendRequest(request, configTrackerPause);
    }catch(e){
    }
  }


}

function getElementX(sourceElement){
  return sourceElement.getBoundingClientRect().left + Math.max(sourceElement.scrollLeft,document.body.scrollLeft);
}
function getElementY(sourceElement){
  return sourceElement.getBoundingClientRect().top + Math.max(sourceElement.scrollTop,document.body.scrollTop);
}


function getModuleHier(sourceElement){
    try{
      var parent = sourceElement, hwaParentClass = getClassesRegExp("hwa-dc","dc");
      var levels = [],modules = [], tabs = [],func,module_hier;

      for(var i = 0; i < 20; i++){
        if(!isDefined(parent) || parent==null){
          break;
        }
        if(parent.className!= null && hwaParentClass.test(parent.className)){
           if(levels.length < 6 && isDefined(parent.attributes["hwa-hier"])){
             levels.push((parent.attributes["hwa-hier"].value|| parent.attributes["hwa-hier"] ));
           }
           if(modules.length < 3 && isDefined(parent.attributes["hwa-module"])){
             modules.push((parent.attributes["hwa-module"].value|| parent.attributes["hwa-module"] ));
           }
           if(tabs.length < 3 && isDefined(parent.attributes["hwa-tab"])){
             tabs.push((parent.attributes["hwa-tab"].value|| parent.attributes["hwa-tab"] ));
           }
        }
        parent =  parent.parentElement;
      }
      var levels_t;
      for(var i = levels.length; i > 0; i--){
        levels_t = (levels_t == null ? "" : levels_t) + levels.pop() + "/";
      }
      if(levels_t != null) {
        module_hier = "c:{" + levels_t + "}"
      }

      var modules_t;
      for(var i = modules.length; i > 0; i--){
        modules_t = (modules_t==null ? "" : modules_t) + modules.pop() + "/";
      }
      if(modules_t != null) {
        module_hier = "g:{" + modules_t + "}"
      }

      var tabs_t;
      for(var i = tabs.length; i > 0; i--){
        tabs_t = (tabs_t == null ? "" : tabs_t) + tabs.pop() + "/";
      }
      if(tabs_t != null) {
        module_hier = (module_hier==null ? "" : module_hier) + "t:{" + tabs_t + "}"
      }

      if(func == null && isDefined(sourceElement.attributes["hwa-func"])){
          func = "f:{" +(sourceElement.attributes["hwa-func"].value|| sourceElement.attributes["hwa-func"] )+ "}";
      }


      return (module_hier==null ? "" : module_hier) + func;       
    }catch(e){
    }
}
function getPageHierCurrent(sourceElement){
    try{
      var parentTemp = sourceElement;
      if(!isDefined(parentTemp) || parentTemp == null) {
        return;
      }
      var page_hier;
      if(isDefined(parentTemp.attributes["hwa-hier"])){
        page_hier = "c:{" +(parentTemp.attributes["hwa-hier"].value || parentTemp.attributes["hwa-hier"])+ "}";
      }
      return page_hier;
    }catch(e){
      
    }
}


function addClickListener(element, enable) {
    if (!linkTrackingInstalled) {
      linkTrackingInstalled = true;
      addEventListener(documentAlias, 'click', processClick, false);
      addEventListener(windowAlias, 'keydown', processKeydown, false);
    }
   
}

function _getFlashVersion() {
    var a, b, c;
    if ((c = (c = window["navigator"]) ? c.plugins : da) && c["length"])
      for (var d = 0; d < c["length"] && !b; d++) {
        var e = c[d]; - 1 < e["name"]["indexOf"]("Shockwave Flash") && (b = e.description)
      }
    if (!b) try {
      a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7"), b = a.GetVariable("$version")
    } catch (g) {}
    if (!b) try {
      a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6"), b = "WIN 6,0,21,0", a.AllowScriptAccess = "always", b = a.GetVariable("$version")
    } catch (ca) {}
    if (!b) try {
      a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash"), b = a.GetVariable("$version")
    } catch (l) {}
    b && (a = b["match"](/[\d]+/g)) && 3 <= a["length"] && (b = a[0] + "." + a[1] + " r" + a[2]);
    return b || ""
};
function detectBrowserFeatures() {
    var i,
      mimeType,
      pluginMap = {
        // document types
        pdf: 'application/pdf',

        // media players
        qt: 'video/quicktime',
        realp: 'audio/x-pn-realaudio-plugin',
        wma: 'application/x-mplayer2',

        // interactive multimedia
        dir: 'application/x-director',
        fla: 'application/x-shockwave-flash',

        // RIA
        java: 'application/x-java-vm',
        gears: 'application/x-googlegears',
        ag: 'application/x-silverlight'
      },
      devicePixelRatio = (new RegExp('Mac OS X.*Safari/')).test(navigatorAlias.userAgent) ? windowAlias.devicePixelRatio || 1 : 1;
    if (navigatorAlias.mimeTypes && navigatorAlias.mimeTypes.length) {
      for (i in pluginMap) {
        if (Object.prototype.hasOwnProperty.call(pluginMap, i)) {
          mimeType = navigatorAlias.mimeTypes[pluginMap[i]];
          browserFeatures[i] = (mimeType && mimeType.enabledPlugin) ? '1' : '0';
        }
      }
    }
    if (typeof navigator.javaEnabled !== 'unknown' && isDefined(navigatorAlias.javaEnabled) && navigatorAlias.javaEnabled()) {
      browserFeatures.java = '1';
    }
    if (isFunction(windowAlias.GearsFactory)) {
      browserFeatures.gears = '1';
    }

    if (!browserFeatures.fla) {
      var _flav = _getFlashVersion();
      if (_flav) browserFeatures.fla = '1';
    }
    browserFeatures.cookie = hasCookies();
    browserFeatures.res = screenAlias.width * devicePixelRatio + 'x' + screenAlias.height * devicePixelRatio;
}

function registerHook(hookName, userHook) {
    var hookObj = null;

    if (isString(hookName) && !isDefined(registeredHooks[hookName]) && userHook) {
      if (isObject(userHook)) {
        hookObj = userHook;
      } else if (isString(userHook)) {
        try {
          eval('hookObj =' + userHook);
        } catch (e) {}
      }

      registeredHooks[hookName] = hookObj;
    }
    return hookObj;
}
  detectBrowserFeatures();
  executePluginMethod('run', registerHook);
  return {
    hook: registeredHooks,
    getHook: function(hookName) {
      return registeredHooks[hookName];
    },
    set: function(name, value) {
      if (typeof name == "object") {
          configCustomData=name.data;
        mixin(fields, name);
        if(name.siteId && windowAlias == top){
          ha_js_parent_sid = fields["siteId"];
        };
        if(name.tag_list){
            mapFields.tag_list=fields["tag_list"];
        }
      } else if (typeof name == "string") {
        fields[name] = value;
        if(name == 'siteId'  && windowAlias == top){
          ha_js_parent_sid = fields["siteId"];
        }
      }
    },
    // get field value
    get: function(name) {
      return fields[name];
    },
    getVisitorId: function() {
      return (loadVisitorIdCookie())[1];
    },

    getVisitorInfo: function() {
      return loadVisitorIdCookie();
    },

    getAttributionInfo: function() {
      return loadReferrerAttributionCookie();
    },
    getAttributionCampaignName: function() {
      return loadReferrerAttributionCookie()[0];
    },

    getAttributionCampaignKeyword: function() {
      return loadReferrerAttributionCookie()[1];
    },
    getAttributionReferrerTimestamp: function() {
      return loadReferrerAttributionCookie()[2];
    },
    getAttributionReferrerUrl: function() {
      return loadReferrerAttributionCookie()[3];
    },

    setSiteId: function(siteId) {
      configTrackerSiteId = siteId;
      if(windowAlias == top){
       ha_js_parent_sid = siteId;
      };
    },

    setHierarchy: function(hierarchy) {
      configHierarchy = hierarchy;
    },
    setUUID: function(uuid, encrypt) {
      visitorUUID = uuid;
      visitorUUIDEncrypt = encrypt;
    },
    setCustomData: function(key_or_obj, opt_value) {
      if (isObject(key_or_obj)) {
        configCustomData = key_or_obj;
      } else {
        if (!configCustomData) {
          configCustomData = [];
        }
        configCustomData[key_or_obj] = opt_value;
      }
    },

    getCustomData: function() {
      return configCustomData;
    },
    setCustomVariable: function(index, name, value, scope) {
      var toRecord;
      if (!isDefined(scope)) {
        scope = 'visit';
      }
      if (index > 0) {
        name = isDefined(name) && !isString(name) ? String(name) : name;
        value = isDefined(value) && !isString(value) ? String(value) : value;
        toRecord = [name.slice(0, customVariableMaximumLength), value.slice(0, customVariableMaximumLength)];
        if (scope === 'visit' || scope === 2) { /* GA compatibility/misuse */
          loadCustomVariables();
          customVariables[index] = toRecord;
        } else if (scope === 'page' || scope === 3) { /* GA compatibility/misuse */
          customVariablesPage[index] = toRecord;
        }
      }
    },
    getCustomVariable: function(index, scope) {
      var cvar;

      if (!isDefined(scope)) {
        scope = "visit";
      }

      if (scope === "page" || scope === 3) {
        cvar = customVariablesPage[index];
      } else if (scope === "visit" || scope === 2) {
        loadCustomVariables();
        cvar = customVariables[index];
      }

      if (!isDefined(cvar) || (cvar && cvar[0] === '')) {
        return false;
      }

      return cvar;
    },

    deleteCustomVariable: function(index, scope) {
      // Only delete if it was there already
      if (this.getCustomVariable(index, scope)) {
        this.setCustomVariable(index, '', '', scope);
      }
    },

    setLinkTrackingTimer: function(delay) {
      configTrackerPause = delay;
    },

    setDownloadExtensions: function(extensions) {
      configDownloadExtensions = extensions;
    },

    addDownloadExtensions: function(extensions) {
      configDownloadExtensions += '|' + extensions;
    },
    setDomains: function(hostsAlias) {
      configHostsAlias = isString(hostsAlias) ? [hostsAlias] : hostsAlias;
      configHostsAlias.push(domainAlias);
    },
    setIgnoreClasses: function(ignoreClasses) {
      configIgnoreClasses = isString(ignoreClasses) ? [ignoreClasses] : ignoreClasses;
    },
    setRequestMethod: function(method) {
      configRequestMethod = method || 'GET';
    },
    setReferrerUrl: function(url) {
      configReferrerUrl = url;
    },

    getReferrerUrl: function() {
      return configReferrerUrl;
    },

    setCustomUrl: function(url) {
      configCustomUrl = resolveRelativeReference(locationHrefAlias, url);
    },

    getCurrentUrl: function() {
      return configCustomUrl || locationHrefAlias ;
    },
    setDocumentTitle: function(title) {
      configTitle = title;
    },
    getDocumentTitle: function() {
      return configTitle;
    },
    setDownloadClasses: function(downloadClasses) {
      configDownloadClasses = isString(downloadClasses) ? [downloadClasses] : downloadClasses;
    },

    setLinkClasses: function(linkClasses) {
      configLinkClasses = isString(linkClasses) ? [linkClasses] : linkClasses;
    },

    setCampaignNameKey: function(campaignNames) {
      configCampaignNameParameters = isString(campaignNames) ? [campaignNames] : campaignNames;
    },

    setCampaignKeywordKey: function(campaignKeywords) {
      configCampaignKeywordParameters = isString(campaignKeywords) ? [campaignKeywords] : campaignKeywords;
    },

    discardHashTag: function(enableFilter) {
      configDiscardHashTag = enableFilter;
    },
    setCookieNamePrefix: function(cookieNamePrefix) {
      configCookieNamePrefix = cookieNamePrefix;
      // Re-init the Custom Variables cookie
      customVariables = getCustomVariablesFromCookie();
    },
    setCookieDomain: function(domain) {
      configCookieDomain = domainFixup(domain);
    },
    setCookiePath: function(path) {
      configCookiePath = path;
    },
    setVisitorCookieTimeout: function(timeout) {
      configVisitorCookieTimeout = timeout * 1000;
    },
    setSessionCookieTimeout: function(timeout) {
      configSessionCookieTimeout = timeout * 1000;
    },
    setReferralCookieTimeout: function(timeout) {
      configReferralCookieTimeout = timeout * 1000;
    },
    setConversionAttributionFirstReferrer: function(enable) {
      configConversionAttributionFirstReferrer = enable;
    },

    disableCookies: function() {
      configCookiesDisabled = true;
      browserFeatures.cookie = '0';
    },

    disableiFrameTracking: function(flag) {
      configiFrameTrackingDisabled = flag;
      if(configiFrameTrackingDisabled){
        ha_js_parent_sid = null;               
      }else{
        if (windowAlias == top ) {
           ha_js_parent_sid = fields["siteId"]; 
        };
      };
    },
    setDoNotTrack: function(enable) {
      var dnt = navigatorAlias.doNotTrack || navigatorAlias.msDoNotTrack;
      configDoNotTrack = enable && (dnt === 'yes' || dnt === '1');
      if (configDoNotTrack) {
        this.disableCookies();
      }
    },

    addListener: function(element, enable) {
      addClickListener(element, enable);
    },

    enableLinkTracking: function() {
      if (hasLoaded) {
        addClickListener();
      } else {
        registeredOnLoadHandlers.push(function() {
          addClickListener();
        });
      }
    },

    setHeartBeatTimer: function(minimumVisitLength, heartBeatDelay) {
      var now = new Date();

      configMinimumVisitTime = now.getTime() + minimumVisitLength * 1000;
      configHeartBeatTimer = heartBeatDelay * 1000;
    },

    killFrame: function() {
      if (windowAlias.location !== windowAlias.top.location) {
        windowAlias.top.location = windowAlias.location;
      }
    },

    redirectFile: function(url) {
      if (windowAlias.location.protocol === 'file:') {
        windowAlias.location = url;
      }
    },

    setCountPreRendered: function(enable) {
      configCountPreRendered = enable;
    },

    setAutoSendPV: function(flag) {
      autoSendPV = flag;
    },

    setAutoLinkTracking: function(flag){
      autoLinkTracking = flag;
    },

    trackGoal: function(idGoal, customRevenue, data) {
      trackCallback(function() {
        logGoal({
          'idgoal': idGoal,
          'revenue': customRevenue
        }, data);
      });
    },

    trackEvent: function(etype, data) {
      trackCallback(function() {
        var request = getRequest(mixin({
          'action': etype
        }, mapData(data)));
        sendRequest(request, configTrackerPause);
      });
    },

    trackLink: function(sourceUrl, linkType, customData) {
      trackCallback(function() {
        logLink(sourceUrl, linkType, customData);
      });
    },

    trackPageView: function(data) {
      if (isOverlaySession(configTrackerSiteId)) {
            trackCallback(function () {
                injectOverlayScripts(configTrackerUrl, configApiUrl, configTrackerSiteId);
            });
        } else {
          trackCallback(function() {
            logPageView(data);
            });
        }
    },
  trackAjax : function(data) {
    if(typeof g_hwa_disable_trackajax != 'undefined' && g_hwa_disable_trackajax==true){
       return;
    } 	

    if(window.addEventListener &&  window.XMLHttpRequest){
        var _XMLHttpRequest = window.XMLHttpRequest;
        window.XMLHttpRequest = function () {
        var e, req, startTime,_open, _send,_datalist,_isignore_url;
        req = new _XMLHttpRequest;
        try {
          _open = req.open;
          req.open = function(type, url, async) {
            if(!perf_url_ignore_p.test(url)){
              var e;
              try {
                startTime = null;
                _datalist = {};
              
                var s_begin = function(_event){
                    try{
                  
                    var dur,codeMapping;
                    codeMapping = {
                      1: 'sending',
                      2: 'headers',
                      3: 'waiting',
                      4: 'receiving'
                    };
                    if(startTime == null) {
                      startTime = new Date().getTime();
                    }
                    if(req.readyState == 2) {
                      var _now = new Date().getTime();
                      _datalist.st = startTime;
                      _datalist.url = url;

                      if(perf_ajaxpage_firstloadtime == 0 && _now - asyn_pv_sendtime_dmpa < 5000){
                        //标识当前 ajax请求是否属于ajax异步加载页面对应的ajax请求,约定：页面打开时2秒内发起的请求都属于异步加载页面的一部分
                        req.ajaxpage_flag=1;
                        perf_ajaxpage_in = ++perf_ajaxpage_in; 
                        if(perf_ajaxpage_min_time == 0 ) {
                          perf_ajaxpage_min_time = startTime;
                        }
                        ajaxthreshold_time = ((perf_ajaxpage_firstloadtime - asyn_pv_sendtime_dmpa) > 2000) ? 5000 : 3000;
                                      
                      }else if(perf_ajaxpage_firstloadtime > 0 && (_now-perf_ajaxpage_firstloadtime <= ajaxthreshold_time) ) {
                        req.ajaxpage_flag=1;
                        perf_ajaxpage_in = ++perf_ajaxpage_in;  
                      }
                      return;
                    }
                    if(startTime == null) {
                      return;
                    }
                    dur = new Date().getTime() - startTime;
                    (_datalist[codeMapping[req.readyState]]) = dur;
                  }catch(e){}
                }
                req.addEventListener('readystatechange', s_begin, false);

                //服务请求完成后的hook
                var s_end = function(){
                  try{
                      if(typeof _datalist != 'undefined' && typeof _datalist.url != 'undefined'){
                        //请求结束
                        var _now = new Date().getTime();
                        _datalist.tt =  (_now - startTime);
                        //发送结果
                        if(perf_ajaxpage_firstloadtime == 0){
                            perf_ajaxpage_firstloadtime = _now;
                        }

                        if(req.ajaxpage_flag==1){
                          perf_ajaxpage_out = ++perf_ajaxpage_out;
                          perf_ajaxpage_max_time = _now;                  
                        }
                        perf_event_q.push(_datalist);
                        if(perf_send_status == 'sleeping'){
                          //如果还未开始批量上报性能数据，则触发一个4秒后执行的上报任务
                          perf_send_status = 'ready';
                          setTimeout(sendPerfQueue,4000);
                        }
                      }

                  }catch(e){};
                }
                req.addEventListener('loadend', s_end, false);
              } catch (_error) {
                e = _error;
                hwaLog("HWA error monitoring XHR open call->" + e.message);
              }
            }
            return _open.apply(req, arguments);
          };
          _send = req.send;
          req.send = function() {
            return _send.apply(req, arguments);
          };
        } catch (_error) {
          e = _error;
          hwaLog("HWA error monitoring XHR->" + e.message);
        }
        return req;
      };
    }else{//不支持addEventListener的浏览器必须是使用了jQuery进行ajax调用的才能统一监控服务请求性能
      if(typeof $ != 'undefined' || typeof jQuery != 'undefined'){
          try{
            var _jq = (typeof $ != 'undefined' && $(document) != null && typeof $(document).ajaxSend == 'function') ? $ : jQuery;
            if(_jq && typeof _jq(document).ajaxSend ==  'function'){
              
                _jq(document).ajaxSend(function(a,b,c) {
                  try{
                    if(!perf_url_ignore_p.test(c.url)){

                      var _now = new Date().getTime();
                      if(perf_ajaxpage_firstloadtime == 0  && _now - asyn_pv_sendtime_dmpa < 5000){
                        //标识当前 ajax请求是否属于ajax异步加载页面对应的ajax请求,约定：页面打开时2秒内发起的请求都属于异步加载页面的一部分
                        c.ajaxpage_flag=1;
                        perf_ajaxpage_in = ++perf_ajaxpage_in; 
                        if(perf_ajaxpage_min_time == 0 ) {
                          perf_ajaxpage_min_time = _now;
                        }
                        ajaxthreshold_time = ((perf_ajaxpage_firstloadtime - asyn_pv_sendtime_dmpa) > 2000) ? 5000 : 3000;
                                      
                      }else if(perf_ajaxpage_firstloadtime > 0 && (_now-perf_ajaxpage_firstloadtime <= ajaxthreshold_time) ) {
                        c.ajaxpage_flag=1;
                        perf_ajaxpage_in = ++perf_ajaxpage_in; 
                        
                      }
                      c.st = _now;
                    }
                  }catch(e){};
                });
                _jq(document).ajaxComplete(function(a,b,c) {
                  try{
                    if(!perf_url_ignore_p.test(c.url)){
                      var _now = new Date().getTime();
                      var _dur = _now - c.st;
                      if(perf_ajaxpage_firstloadtime == 0){
                          perf_ajaxpage_firstloadtime = _now;
                      }
                      var haBIStructure = {'url': c.url,
                         'st':c.st,
                          //'url': configCustomUrl || locationHrefAlias,               
                          tt : _dur
                      };
                     if(c.ajaxpage_flag==1){
                        perf_ajaxpage_out = ++perf_ajaxpage_out;
                        perf_ajaxpage_max_time = _now;                  
                      }
                      //把当前请求性能数据存放到队列
                      if(typeof _dur == 'number'){
                        perf_event_q.push(haBIStructure);
                        if(perf_send_status == 'sleeping'){
                          //如果还未开始批量上报性能数据，则触发一个4秒后执行的上报任务
                          perf_send_status = 'ready';
                          setTimeout(sendPerfQueue,4000);
                        }
                      }
                      
                    }
                  }catch(e){};
                });     
          }
        }catch(e){};
      }

    }
  },
    trackPerformance: function(customTitle, customData, dryrun) {
      if (!isOverlaySession(configTrackerSiteId)) {
        trackCallback(function() {
          logPerformance(customTitle, null, dryrun);
          });
      }
    },

    trackiFramePerformance: function() {
      logiFramePerf()
    },
   
    trackSiteSearch: function(type, data) {
     
      trackCallback(function() {
        logSiteSearch(type, data);
      });
    },

    


    getNewPageId: function(){
          var sesname = getCookieName('ses'),
          id = loadVisitorIdCookie(),
          ses = getCookie(sesname),
          uuid =  id[1];
      return hash(uuid + ses + (new Date() - 0));
    },

    f: [],

    //execute the command queue
    execQ: function(aArgs) {
      var exec = function(args) {
        try {
          var method = args[0];
          if (this[method] && this[method].apply) {
            method !== "exec" && this[method].apply(this, [].slice.call(args, 1));
            return !0;
          }
        } catch (e) {}

      };
      aArgs = this.f.concat(aArgs);
      for (this.f = []; aArgs.length > 0; aArgs.shift()) {
        !exec.call(this, aArgs[0]) && this.f.push(aArgs[0]);
      }
    }

  };
}

addEventListener(windowAlias, 'beforeunload', beforeUnloadHandler, false);
addReadyListener();

Date.prototype.getTimeAlias = Date.prototype.getTime;

asyncTracker = new Tracker();

asyncTracker.execQ(windowAlias.dmpa.q); 
asyncTracker.trackiFramePerformance();

setTimeout(function() {
  if (autoSendPV) {
    asyncTracker.trackPageView();
    asyncTracker.trackPerformance(null, null);
  }

}, 0);

if(autoLinkTracking) asyncTracker.enableLinkTracking();
asyncTracker.trackAjax();
windowAlias.dmpa = function() {
  asyncTracker.execQ([arguments]);
};
return {
  addPlugin: function(pluginName, pluginObj) {
    plugins[pluginName] = pluginObj;
  },

  getTracker: function(piwikUrl, siteId) {
    return new Tracker(piwikUrl, siteId);
  },
  getAsyncTracker: function() {
    return asyncTracker;
  }
};
}());